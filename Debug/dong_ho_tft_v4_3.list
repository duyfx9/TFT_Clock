
dong_ho_tft_v4_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000890c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000348c  08008a20  08008a20  00018a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beac  0800beac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800beac  0800beac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800beac  0800beac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beac  0800beac  0001beac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800beb0  0800beb0  0001beb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800beb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  200001dc  0800c090  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800c090  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f625  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002891  00000000  00000000  0002f86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00032100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0a  00000000  00000000  000331d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b08  00000000  00000000  00033eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cbc  00000000  00000000  000379e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e6a7  00000000  00000000  0004b69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005824  00000000  00000000  000d9d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000df56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a04 	.word	0x08008a04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008a04 	.word	0x08008a04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b08d      	sub	sp, #52	; 0x34
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	4611      	mov	r1, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	81bb      	strh	r3, [r7, #12]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b1e      	cmp	r3, #30
 8001000:	d964      	bls.n	80010cc <ILI9341_DrawChar+0xe8>
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db60      	blt.n	80010cc <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	3301      	adds	r3, #1
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	3302      	adds	r3, #2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	3303      	adds	r3, #3
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3b20      	subs	r3, #32
 800102c:	7ffa      	ldrb	r2, [r7, #31]
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	3304      	adds	r3, #4
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	4413      	add	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800103a:	7fbb      	ldrb	r3, [r7, #30]
 800103c:	b29a      	uxth	r2, r3
 800103e:	7f7b      	ldrb	r3, [r7, #29]
 8001040:	b29c      	uxth	r4, r3
 8001042:	88f9      	ldrh	r1, [r7, #6]
 8001044:	89b8      	ldrh	r0, [r7, #12]
 8001046:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4623      	mov	r3, r4
 800104c:	f000 fc1e 	bl	800188c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
 8001054:	e035      	b.n	80010c2 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
 800105a:	e02b      	b.n	80010b4 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800105c:	7f3b      	ldrb	r3, [r7, #28]
 800105e:	6a3a      	ldr	r2, [r7, #32]
 8001060:	fb03 f202 	mul.w	r2, r3, r2
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	10db      	asrs	r3, r3, #3
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	4413      	add	r3, r2
 800106e:	3301      	adds	r3, #1
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	2201      	movs	r2, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8001086:	7dfa      	ldrb	r2, [r7, #23]
 8001088:	7dbb      	ldrb	r3, [r7, #22]
 800108a:	4013      	ands	r3, r2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00d      	beq.n	80010ae <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	b29a      	uxth	r2, r3
 8001096:	89bb      	ldrh	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	b298      	uxth	r0, r3
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	b29a      	uxth	r2, r3
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	4413      	add	r3, r2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010a8:	4619      	mov	r1, r3
 80010aa:	f000 fb89 	bl	80017c0 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	3301      	adds	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	7fbb      	ldrb	r3, [r7, #30]
 80010b6:	6a3a      	ldr	r2, [r7, #32]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbcf      	blt.n	800105c <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	3301      	adds	r3, #1
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	7f7b      	ldrb	r3, [r7, #29]
 80010c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbc5      	blt.n	8001056 <ILI9341_DrawChar+0x72>
 80010ca:	e000      	b.n	80010ce <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80010cc:	bf00      	nop
			}
		}
	}
}
 80010ce:	372c      	adds	r7, #44	; 0x2c
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}

080010d4 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af02      	add	r7, sp, #8
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	4611      	mov	r1, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	460b      	mov	r3, r1
 80010e4:	80fb      	strh	r3, [r7, #6]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3301      	adds	r3, #1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80010f8:	e02d      	b.n	8001156 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	7818      	ldrb	r0, [r3, #0]
 80010fe:	88b9      	ldrh	r1, [r7, #4]
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	460b      	mov	r3, r1
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	f7ff ff69 	bl	8000fe4 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	3b20      	subs	r3, #32
 8001118:	7ffa      	ldrb	r2, [r7, #31]
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	3304      	adds	r3, #4
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	4413      	add	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	1c9a      	adds	r2, r3, #2
 8001130:	7fbb      	ldrb	r3, [r7, #30]
 8001132:	429a      	cmp	r2, r3
 8001134:	da07      	bge.n	8001146 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	b29a      	uxth	r2, r3
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4413      	add	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	3302      	adds	r3, #2
 8001142:	80fb      	strh	r3, [r7, #6]
 8001144:	e004      	b.n	8001150 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001146:	7fbb      	ldrb	r3, [r7, #30]
 8001148:	b29a      	uxth	r2, r3
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	4413      	add	r3, r2
 800114e:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1cd      	bne.n	80010fa <ILI9341_DrawText+0x26>
	}
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_SPI_TxCpltCallback+0x24>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d105      	bne.n	8001184 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <HAL_SPI_TxCpltCallback+0x28>)
 8001180:	f002 f815 	bl	80031ae <HAL_GPIO_WritePin>
  }
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000278 	.word	0x20000278
 8001190:	40010c00 	.word	0x40010c00

08001194 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800119e:	bf00      	nop
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <ILI9341_SPI_Tx+0x30>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d1f8      	bne.n	80011a0 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	2201      	movs	r2, #1
 80011b2:	4619      	mov	r1, r3
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <ILI9341_SPI_Tx+0x30>)
 80011b6:	f003 fe31 	bl	8004e1c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000278 	.word	0x20000278

080011c8 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80011d4:	bf00      	nop
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <ILI9341_SPI_TxBuffer+0x30>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d1f8      	bne.n	80011d6 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	461a      	mov	r2, r3
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ILI9341_SPI_TxBuffer+0x30>)
 80011ec:	f003 fe16 	bl	8004e1c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000278 	.word	0x20000278

080011fc <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8001206:	2200      	movs	r2, #0
 8001208:	2101      	movs	r1, #1
 800120a:	4808      	ldr	r0, [pc, #32]	; (800122c <ILI9341_WriteCommand+0x30>)
 800120c:	f001 ffcf 	bl	80031ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <ILI9341_WriteCommand+0x30>)
 8001218:	f001 ffc9 	bl	80031ae <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ffb8 	bl	8001194 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40010c00 	.word	0x40010c00

08001230 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800123a:	2201      	movs	r2, #1
 800123c:	2101      	movs	r1, #1
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <ILI9341_WriteData+0x30>)
 8001240:	f001 ffb5 	bl	80031ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <ILI9341_WriteData+0x30>)
 800124c:	f001 ffaf 	bl	80031ae <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff9e 	bl	8001194 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40010c00 	.word	0x40010c00

08001264 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001270:	2201      	movs	r2, #1
 8001272:	2101      	movs	r1, #1
 8001274:	4808      	ldr	r0, [pc, #32]	; (8001298 <ILI9341_WriteBuffer+0x34>)
 8001276:	f001 ff9a 	bl	80031ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <ILI9341_WriteBuffer+0x34>)
 8001282:	f001 ff94 	bl	80031ae <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	4619      	mov	r1, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff9c 	bl	80011c8 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010c00 	.word	0x40010c00

0800129c <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4604      	mov	r4, r0
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4623      	mov	r3, r4
 80012ac:	80fb      	strh	r3, [r7, #6]
 80012ae:	4603      	mov	r3, r0
 80012b0:	80bb      	strh	r3, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	807b      	strh	r3, [r7, #2]
 80012b6:	4613      	mov	r3, r2
 80012b8:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	b29b      	uxth	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80012da:	202a      	movs	r0, #42	; 0x2a
 80012dc:	f7ff ff8e 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2104      	movs	r1, #4
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ffbc 	bl	8001264 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	0a1b      	lsrs	r3, r3, #8
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80012f6:	88bb      	ldrh	r3, [r7, #4]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80012fc:	883b      	ldrh	r3, [r7, #0]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	b29b      	uxth	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001306:	883b      	ldrh	r3, [r7, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 800130c:	202b      	movs	r0, #43	; 0x2b
 800130e:	f7ff ff75 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2104      	movs	r1, #4
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffa3 	bl	8001264 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800131e:	202c      	movs	r0, #44	; 0x2c
 8001320:	f7ff ff6c 	bl	80011fc <ILI9341_WriteCommand>
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}

0800132c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001330:	2200      	movs	r2, #0
 8001332:	2102      	movs	r1, #2
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <ILI9341_Reset+0x40>)
 8001336:	f001 ff3a 	bl	80031ae <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f001 fa7c 	bl	8002838 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <ILI9341_Reset+0x40>)
 8001348:	f001 ff31 	bl	80031ae <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800134c:	200a      	movs	r0, #10
 800134e:	f001 fa73 	bl	8002838 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001352:	2201      	movs	r2, #1
 8001354:	2102      	movs	r1, #2
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <ILI9341_Reset+0x40>)
 8001358:	f001 ff29 	bl	80031ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001362:	4802      	ldr	r0, [pc, #8]	; (800136c <ILI9341_Reset+0x40>)
 8001364:	f001 ff23 	bl	80031ae <HAL_GPIO_WritePin>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40010c00 	.word	0x40010c00

08001370 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001374:	2201      	movs	r2, #1
 8001376:	2102      	movs	r1, #2
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <ILI9341_Enable+0x14>)
 800137a:	f001 ff18 	bl	80031ae <HAL_GPIO_WritePin>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40010c00 	.word	0x40010c00

08001388 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800138c:	f7ff fff0 	bl	8001370 <ILI9341_Enable>
	ILI9341_Reset();
 8001390:	f7ff ffcc 	bl	800132c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff ff31 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(10);
 800139a:	200a      	movs	r0, #10
 800139c:	f001 fa4c 	bl	8002838 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80013a0:	20cb      	movs	r0, #203	; 0xcb
 80013a2:	f7ff ff2b 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80013a6:	2039      	movs	r0, #57	; 0x39
 80013a8:	f7ff ff42 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80013ac:	202c      	movs	r0, #44	; 0x2c
 80013ae:	f7ff ff3f 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ff3c 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80013b8:	2034      	movs	r0, #52	; 0x34
 80013ba:	f7ff ff39 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80013be:	2002      	movs	r0, #2
 80013c0:	f7ff ff36 	bl	8001230 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80013c4:	20cf      	movs	r0, #207	; 0xcf
 80013c6:	f7ff ff19 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff ff30 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80013d0:	20c1      	movs	r0, #193	; 0xc1
 80013d2:	f7ff ff2d 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80013d6:	2030      	movs	r0, #48	; 0x30
 80013d8:	f7ff ff2a 	bl	8001230 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80013dc:	20e8      	movs	r0, #232	; 0xe8
 80013de:	f7ff ff0d 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80013e2:	2085      	movs	r0, #133	; 0x85
 80013e4:	f7ff ff24 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff ff21 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80013ee:	2078      	movs	r0, #120	; 0x78
 80013f0:	f7ff ff1e 	bl	8001230 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80013f4:	20ea      	movs	r0, #234	; 0xea
 80013f6:	f7ff ff01 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff ff18 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff ff15 	bl	8001230 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8001406:	20ed      	movs	r0, #237	; 0xed
 8001408:	f7ff fef8 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 800140c:	2064      	movs	r0, #100	; 0x64
 800140e:	f7ff ff0f 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001412:	2003      	movs	r0, #3
 8001414:	f7ff ff0c 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001418:	2012      	movs	r0, #18
 800141a:	f7ff ff09 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800141e:	2081      	movs	r0, #129	; 0x81
 8001420:	f7ff ff06 	bl	8001230 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001424:	20f7      	movs	r0, #247	; 0xf7
 8001426:	f7ff fee9 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800142a:	2020      	movs	r0, #32
 800142c:	f7ff ff00 	bl	8001230 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001430:	20c0      	movs	r0, #192	; 0xc0
 8001432:	f7ff fee3 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8001436:	2023      	movs	r0, #35	; 0x23
 8001438:	f7ff fefa 	bl	8001230 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 800143c:	20c1      	movs	r0, #193	; 0xc1
 800143e:	f7ff fedd 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001442:	2010      	movs	r0, #16
 8001444:	f7ff fef4 	bl	8001230 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001448:	20c5      	movs	r0, #197	; 0xc5
 800144a:	f7ff fed7 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800144e:	203e      	movs	r0, #62	; 0x3e
 8001450:	f7ff feee 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001454:	2028      	movs	r0, #40	; 0x28
 8001456:	f7ff feeb 	bl	8001230 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800145a:	20c7      	movs	r0, #199	; 0xc7
 800145c:	f7ff fece 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001460:	2086      	movs	r0, #134	; 0x86
 8001462:	f7ff fee5 	bl	8001230 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001466:	2036      	movs	r0, #54	; 0x36
 8001468:	f7ff fec8 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 800146c:	2048      	movs	r0, #72	; 0x48
 800146e:	f7ff fedf 	bl	8001230 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001472:	203a      	movs	r0, #58	; 0x3a
 8001474:	f7ff fec2 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001478:	2055      	movs	r0, #85	; 0x55
 800147a:	f7ff fed9 	bl	8001230 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800147e:	20b1      	movs	r0, #177	; 0xb1
 8001480:	f7ff febc 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fed3 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800148a:	2018      	movs	r0, #24
 800148c:	f7ff fed0 	bl	8001230 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001490:	20b6      	movs	r0, #182	; 0xb6
 8001492:	f7ff feb3 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8001496:	2008      	movs	r0, #8
 8001498:	f7ff feca 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 800149c:	2082      	movs	r0, #130	; 0x82
 800149e:	f7ff fec7 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80014a2:	2027      	movs	r0, #39	; 0x27
 80014a4:	f7ff fec4 	bl	8001230 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80014a8:	20f2      	movs	r0, #242	; 0xf2
 80014aa:	f7ff fea7 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff febe 	bl	8001230 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80014b4:	2026      	movs	r0, #38	; 0x26
 80014b6:	f7ff fea1 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff feb8 	bl	8001230 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80014c0:	20e0      	movs	r0, #224	; 0xe0
 80014c2:	f7ff fe9b 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80014c6:	200f      	movs	r0, #15
 80014c8:	f7ff feb2 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80014cc:	2031      	movs	r0, #49	; 0x31
 80014ce:	f7ff feaf 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80014d2:	202b      	movs	r0, #43	; 0x2b
 80014d4:	f7ff feac 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80014d8:	200c      	movs	r0, #12
 80014da:	f7ff fea9 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80014de:	200e      	movs	r0, #14
 80014e0:	f7ff fea6 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80014e4:	2008      	movs	r0, #8
 80014e6:	f7ff fea3 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80014ea:	204e      	movs	r0, #78	; 0x4e
 80014ec:	f7ff fea0 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80014f0:	20f1      	movs	r0, #241	; 0xf1
 80014f2:	f7ff fe9d 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80014f6:	2037      	movs	r0, #55	; 0x37
 80014f8:	f7ff fe9a 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80014fc:	2007      	movs	r0, #7
 80014fe:	f7ff fe97 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001502:	2010      	movs	r0, #16
 8001504:	f7ff fe94 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001508:	2003      	movs	r0, #3
 800150a:	f7ff fe91 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800150e:	200e      	movs	r0, #14
 8001510:	f7ff fe8e 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001514:	2009      	movs	r0, #9
 8001516:	f7ff fe8b 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fe88 	bl	8001230 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001520:	20e1      	movs	r0, #225	; 0xe1
 8001522:	f7ff fe6b 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fe82 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800152c:	200e      	movs	r0, #14
 800152e:	f7ff fe7f 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001532:	2014      	movs	r0, #20
 8001534:	f7ff fe7c 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001538:	2003      	movs	r0, #3
 800153a:	f7ff fe79 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 800153e:	2011      	movs	r0, #17
 8001540:	f7ff fe76 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001544:	2007      	movs	r0, #7
 8001546:	f7ff fe73 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800154a:	2031      	movs	r0, #49	; 0x31
 800154c:	f7ff fe70 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001550:	20c1      	movs	r0, #193	; 0xc1
 8001552:	f7ff fe6d 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8001556:	2048      	movs	r0, #72	; 0x48
 8001558:	f7ff fe6a 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800155c:	2008      	movs	r0, #8
 800155e:	f7ff fe67 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001562:	200f      	movs	r0, #15
 8001564:	f7ff fe64 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001568:	200c      	movs	r0, #12
 800156a:	f7ff fe61 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800156e:	2031      	movs	r0, #49	; 0x31
 8001570:	f7ff fe5e 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001574:	2036      	movs	r0, #54	; 0x36
 8001576:	f7ff fe5b 	bl	8001230 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800157a:	200f      	movs	r0, #15
 800157c:	f7ff fe58 	bl	8001230 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001580:	2011      	movs	r0, #17
 8001582:	f7ff fe3b 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(100);
 8001586:	2064      	movs	r0, #100	; 0x64
 8001588:	f001 f956 	bl	8002838 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 800158c:	2029      	movs	r0, #41	; 0x29
 800158e:	f7ff fe35 	bl	80011fc <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f802 	bl	800159c <ILI9341_SetRotation>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80015a6:	2036      	movs	r0, #54	; 0x36
 80015a8:	f7ff fe28 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(1);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f001 f943 	bl	8002838 <HAL_Delay>

	switch(rotation)
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d837      	bhi.n	8001628 <ILI9341_SetRotation+0x8c>
 80015b8:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <ILI9341_SetRotation+0x24>)
 80015ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015be:	bf00      	nop
 80015c0:	080015d1 	.word	0x080015d1
 80015c4:	080015e7 	.word	0x080015e7
 80015c8:	080015fd 	.word	0x080015fd
 80015cc:	08001613 	.word	0x08001613
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80015d0:	2048      	movs	r0, #72	; 0x48
 80015d2:	f7ff fe2d 	bl	8001230 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <ILI9341_SetRotation+0x98>)
 80015d8:	22f0      	movs	r2, #240	; 0xf0
 80015da:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <ILI9341_SetRotation+0x9c>)
 80015de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015e2:	801a      	strh	r2, [r3, #0]
		break;
 80015e4:	e021      	b.n	800162a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80015e6:	2028      	movs	r0, #40	; 0x28
 80015e8:	f7ff fe22 	bl	8001230 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <ILI9341_SetRotation+0x98>)
 80015ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015f2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <ILI9341_SetRotation+0x9c>)
 80015f6:	22f0      	movs	r2, #240	; 0xf0
 80015f8:	801a      	strh	r2, [r3, #0]
		break;
 80015fa:	e016      	b.n	800162a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80015fc:	2088      	movs	r0, #136	; 0x88
 80015fe:	f7ff fe17 	bl	8001230 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <ILI9341_SetRotation+0x98>)
 8001604:	22f0      	movs	r2, #240	; 0xf0
 8001606:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <ILI9341_SetRotation+0x9c>)
 800160a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800160e:	801a      	strh	r2, [r3, #0]
		break;
 8001610:	e00b      	b.n	800162a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001612:	20e8      	movs	r0, #232	; 0xe8
 8001614:	f7ff fe0c 	bl	8001230 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <ILI9341_SetRotation+0x98>)
 800161a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800161e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <ILI9341_SetRotation+0x9c>)
 8001622:	22f0      	movs	r2, #240	; 0xf0
 8001624:	801a      	strh	r2, [r3, #0]
		break;
 8001626:	e000      	b.n	800162a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001628:	bf00      	nop
	}
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000002 	.word	0x20000002
 8001638:	20000000 	.word	0x20000000

0800163c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 800163c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001640:	b08d      	sub	sp, #52	; 0x34
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	6039      	str	r1, [r7, #0]
 8001648:	80fb      	strh	r3, [r7, #6]
 800164a:	466b      	mov	r3, sp
 800164c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800165a:	d202      	bcs.n	8001662 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001660:	e002      	b.n	8001668 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001662:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2101      	movs	r1, #1
 800166c:	483f      	ldr	r0, [pc, #252]	; (800176c <ILI9341_DrawColorBurst+0x130>)
 800166e:	f001 fd9e 	bl	80031ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001678:	483c      	ldr	r0, [pc, #240]	; (800176c <ILI9341_DrawColorBurst+0x130>)
 800167a:	f001 fd98 	bl	80031ae <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b29b      	uxth	r3, r3
 8001684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8001688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800168a:	460b      	mov	r3, r1
 800168c:	3b01      	subs	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	2300      	movs	r3, #0
 8001692:	4688      	mov	r8, r1
 8001694:	4699      	mov	r9, r3
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016aa:	2300      	movs	r3, #0
 80016ac:	460c      	mov	r4, r1
 80016ae:	461d      	mov	r5, r3
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	00eb      	lsls	r3, r5, #3
 80016ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016be:	00e2      	lsls	r2, r4, #3
 80016c0:	1dcb      	adds	r3, r1, #7
 80016c2:	08db      	lsrs	r3, r3, #3
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	ebad 0d03 	sub.w	sp, sp, r3
 80016ca:	466b      	mov	r3, sp
 80016cc:	3300      	adds	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d4:	e00e      	b.n	80016f4 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	4413      	add	r3, r2
 80016dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016e0:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	3301      	adds	r3, #1
 80016e6:	88fa      	ldrh	r2, [r7, #6]
 80016e8:	b2d1      	uxtb	r1, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	3302      	adds	r3, #2
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d3ec      	bcc.n	80016d6 <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001710:	fbb3 f2f2 	udiv	r2, r3, r2
 8001714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001716:	fb01 f202 	mul.w	r2, r1, r2
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d010      	beq.n	8001746 <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
 8001728:	e009      	b.n	800173e <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172c:	b29a      	uxth	r2, r3
 800172e:	230a      	movs	r3, #10
 8001730:	69b9      	ldr	r1, [r7, #24]
 8001732:	480f      	ldr	r0, [pc, #60]	; (8001770 <ILI9341_DrawColorBurst+0x134>)
 8001734:	f003 fa2e 	bl	8004b94 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	3301      	adds	r3, #1
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
 800173e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	429a      	cmp	r2, r3
 8001744:	d3f1      	bcc.n	800172a <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	b29a      	uxth	r2, r3
 800174a:	230a      	movs	r3, #10
 800174c:	69b9      	ldr	r1, [r7, #24]
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <ILI9341_DrawColorBurst+0x134>)
 8001750:	f003 fa20 	bl	8004b94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800175a:	4804      	ldr	r0, [pc, #16]	; (800176c <ILI9341_DrawColorBurst+0x130>)
 800175c:	f001 fd27 	bl	80031ae <HAL_GPIO_WritePin>
 8001760:	46b5      	mov	sp, r6
}
 8001762:	bf00      	nop
 8001764:	3734      	adds	r7, #52	; 0x34
 8001766:	46bd      	mov	sp, r7
 8001768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800176c:	40010c00 	.word	0x40010c00
 8001770:	20000278 	.word	0x20000278

08001774 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <ILI9341_FillScreen+0x44>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <ILI9341_FillScreen+0x48>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	2100      	movs	r1, #0
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fd85 	bl	800129c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <ILI9341_FillScreen+0x44>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <ILI9341_FillScreen+0x48>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff46 	bl	800163c <ILI9341_DrawColorBurst>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000002 	.word	0x20000002
 80017bc:	20000000 	.word	0x20000000

080017c0 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
 80017ca:	460b      	mov	r3, r1
 80017cc:	80bb      	strh	r3, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <ILI9341_DrawPixel+0xc4>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d24d      	bcs.n	800187a <ILI9341_DrawPixel+0xba>
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <ILI9341_DrawPixel+0xc8>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	88ba      	ldrh	r2, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d247      	bcs.n	800187a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	753b      	strb	r3, [r7, #20]
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	757b      	strb	r3, [r7, #21]
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	3301      	adds	r3, #1
 80017fe:	121b      	asrs	r3, r3, #8
 8001800:	b2db      	uxtb	r3, r3
 8001802:	75bb      	strb	r3, [r7, #22]
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	3301      	adds	r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	b29b      	uxth	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	743b      	strb	r3, [r7, #16]
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	747b      	strb	r3, [r7, #17]
 800181e:	88bb      	ldrh	r3, [r7, #4]
 8001820:	3301      	adds	r3, #1
 8001822:	121b      	asrs	r3, r3, #8
 8001824:	b2db      	uxtb	r3, r3
 8001826:	74bb      	strb	r3, [r7, #18]
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	733b      	strb	r3, [r7, #12]
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001842:	202a      	movs	r0, #42	; 0x2a
 8001844:	f7ff fcda 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2104      	movs	r1, #4
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fd08 	bl	8001264 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001854:	202b      	movs	r0, #43	; 0x2b
 8001856:	f7ff fcd1 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	2104      	movs	r1, #4
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fcff 	bl	8001264 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001866:	202c      	movs	r0, #44	; 0x2c
 8001868:	f7ff fcc8 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	2102      	movs	r1, #2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fcf6 	bl	8001264 <ILI9341_WriteBuffer>
 8001878:	e000      	b.n	800187c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800187a:	bf00      	nop
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000002 	.word	0x20000002
 8001888:	20000000 	.word	0x20000000

0800188c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	80fb      	strh	r3, [r7, #6]
 800189e:	4603      	mov	r3, r0
 80018a0:	80bb      	strh	r3, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	807b      	strh	r3, [r7, #2]
 80018a6:	4613      	mov	r3, r2
 80018a8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <ILI9341_DrawRectangle+0xb0>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d23d      	bcs.n	8001932 <ILI9341_DrawRectangle+0xa6>
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <ILI9341_DrawRectangle+0xb4>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	88ba      	ldrh	r2, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d237      	bcs.n	8001932 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80018c2:	88fa      	ldrh	r2, [r7, #6]
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <ILI9341_DrawRectangle+0xb0>)
 80018ca:	8812      	ldrh	r2, [r2, #0]
 80018cc:	b292      	uxth	r2, r2
 80018ce:	4293      	cmp	r3, r2
 80018d0:	dd05      	ble.n	80018de <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <ILI9341_DrawRectangle+0xb0>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80018de:	88ba      	ldrh	r2, [r7, #4]
 80018e0:	883b      	ldrh	r3, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a16      	ldr	r2, [pc, #88]	; (8001940 <ILI9341_DrawRectangle+0xb4>)
 80018e6:	8812      	ldrh	r2, [r2, #0]
 80018e8:	b292      	uxth	r2, r2
 80018ea:	4293      	cmp	r3, r2
 80018ec:	dd05      	ble.n	80018fa <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <ILI9341_DrawRectangle+0xb4>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	88bb      	ldrh	r3, [r7, #4]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	4413      	add	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	3b01      	subs	r3, #1
 8001904:	b29c      	uxth	r4, r3
 8001906:	88ba      	ldrh	r2, [r7, #4]
 8001908:	883b      	ldrh	r3, [r7, #0]
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b29b      	uxth	r3, r3
 8001912:	88b9      	ldrh	r1, [r7, #4]
 8001914:	88f8      	ldrh	r0, [r7, #6]
 8001916:	4622      	mov	r2, r4
 8001918:	f7ff fcc0 	bl	800129c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 800191c:	883b      	ldrh	r3, [r7, #0]
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	461a      	mov	r2, r3
 8001926:	8b3b      	ldrh	r3, [r7, #24]
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fe86 	bl	800163c <ILI9341_DrawColorBurst>
 8001930:	e000      	b.n	8001934 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001932:	bf00      	nop
}
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	20000002 	.word	0x20000002
 8001940:	20000000 	.word	0x20000000

08001944 <BUTTON_Init>:
#include"button.h"
#include <stdint.h>
void BUTTON_Init(BUTTON_HandleTypeDef *ButtonX, GPIO_TypeDef *GPIO_Button, uint16_t GPIO_Pin_Button)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	4613      	mov	r3, r2
 8001950:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIO_Button = GPIO_Button;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	601a      	str	r2, [r3, #0]
	ButtonX->GPIO_Pin_Button = GPIO_Pin_Button;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	88fa      	ldrh	r2, [r7, #6]
 800195c:	809a      	strh	r2, [r3, #4]
	ButtonX->current_state = 1;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	719a      	strb	r2, [r3, #6]
	ButtonX->last_state = 1;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2201      	movs	r2, #1
 8001968:	71da      	strb	r2, [r3, #7]
	ButtonX->deboucing_state = 1;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	721a      	strb	r2, [r3, #8]
	ButtonX->is_deboucing = 0;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	725a      	strb	r2, [r3, #9]
	ButtonX->deboucing_timer = 0;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
	ButtonX->counter = 0;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	729a      	strb	r2, [r3, #10]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <microDelay>:
uint8_t TFD = 0;
char strCopy[15];
extern TIM_HandleTypeDef htim1;
extern uint8_t timer3_flag ;
void microDelay (uint16_t delay)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <microDelay+0x2c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800199e:	bf00      	nop
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <microDelay+0x2c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3f9      	bcc.n	80019a0 <microDelay+0x14>
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000314 	.word	0x20000314

080019bc <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 80019d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2302      	movs	r3, #2
 80019de:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	482c      	ldr	r0, [pc, #176]	; (8001a9c <DHT11_Start+0xe0>)
 80019ea:	f001 fa45 	bl	8002e78 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f4:	4829      	ldr	r0, [pc, #164]	; (8001a9c <DHT11_Start+0xe0>)
 80019f6:	f001 fbda 	bl	80031ae <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 80019fa:	2014      	movs	r0, #20
 80019fc:	f000 ff1c 	bl	8002838 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a06:	4825      	ldr	r0, [pc, #148]	; (8001a9c <DHT11_Start+0xe0>)
 8001a08:	f001 fbd1 	bl	80031ae <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001a0c:	201e      	movs	r0, #30
 8001a0e:	f7ff ffbd 	bl	800198c <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	481f      	ldr	r0, [pc, #124]	; (8001a9c <DHT11_Start+0xe0>)
 8001a20:	f001 fa2a 	bl	8002e78 <HAL_GPIO_Init>
  microDelay (40);
 8001a24:	2028      	movs	r0, #40	; 0x28
 8001a26:	f7ff ffb1 	bl	800198c <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2e:	481b      	ldr	r0, [pc, #108]	; (8001a9c <DHT11_Start+0xe0>)
 8001a30:	f001 fba6 	bl	8003180 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <DHT11_Start+0x98>
  {
    microDelay (80);
 8001a3a:	2050      	movs	r0, #80	; 0x50
 8001a3c:	f7ff ffa6 	bl	800198c <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001a40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a44:	4815      	ldr	r0, [pc, #84]	; (8001a9c <DHT11_Start+0xe0>)
 8001a46:	f001 fb9b 	bl	8003180 <HAL_GPIO_ReadPin>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <DHT11_Start+0x98>
 8001a50:	2301      	movs	r3, #1
 8001a52:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001a54:	f000 fee6 	bl	8002824 <HAL_GetTick>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <DHT11_Start+0xe4>)
 8001a5c:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001a5e:	f000 fee1 	bl	8002824 <HAL_GetTick>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <DHT11_Start+0xe8>)
 8001a66:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001a68:	e004      	b.n	8001a74 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8001a6a:	f000 fedb 	bl	8002824 <HAL_GetTick>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <DHT11_Start+0xe8>)
 8001a72:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a78:	4808      	ldr	r0, [pc, #32]	; (8001a9c <DHT11_Start+0xe0>)
 8001a7a:	f001 fb81 	bl	8003180 <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <DHT11_Start+0xd6>
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <DHT11_Start+0xe4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	1c9a      	adds	r2, r3, #2
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <DHT11_Start+0xe8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d8eb      	bhi.n	8001a6a <DHT11_Start+0xae>
  }
  return Response;
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40010c00 	.word	0x40010c00
 8001aa0:	20000200 	.word	0x20000200
 8001aa4:	20000204 	.word	0x20000204

08001aa8 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	e066      	b.n	8001b82 <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8001ab4:	f000 feb6 	bl	8002824 <HAL_GetTick>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a36      	ldr	r2, [pc, #216]	; (8001b94 <DHT11_Read+0xec>)
 8001abc:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001abe:	f000 feb1 	bl	8002824 <HAL_GetTick>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a34      	ldr	r2, [pc, #208]	; (8001b98 <DHT11_Read+0xf0>)
 8001ac6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001ac8:	e004      	b.n	8001ad4 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001aca:	f000 feab 	bl	8002824 <HAL_GetTick>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a31      	ldr	r2, [pc, #196]	; (8001b98 <DHT11_Read+0xf0>)
 8001ad2:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001ad4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ad8:	4830      	ldr	r0, [pc, #192]	; (8001b9c <DHT11_Read+0xf4>)
 8001ada:	f001 fb51 	bl	8003180 <HAL_GPIO_ReadPin>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <DHT11_Read+0x4a>
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <DHT11_Read+0xec>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	1c9a      	adds	r2, r3, #2
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <DHT11_Read+0xf0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d8eb      	bhi.n	8001aca <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8001af2:	2028      	movs	r0, #40	; 0x28
 8001af4:	f7ff ff4a 	bl	800198c <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001afc:	4827      	ldr	r0, [pc, #156]	; (8001b9c <DHT11_Read+0xf4>)
 8001afe:	f001 fb3f 	bl	8003180 <HAL_GPIO_ReadPin>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10e      	bne.n	8001b26 <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2201      	movs	r2, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	b25a      	sxtb	r2, r3
 8001b1a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	71bb      	strb	r3, [r7, #6]
 8001b24:	e00b      	b.n	8001b3e <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f1c3 0307 	rsb	r3, r3, #7
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001b3e:	f000 fe71 	bl	8002824 <HAL_GetTick>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <DHT11_Read+0xec>)
 8001b46:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001b48:	f000 fe6c 	bl	8002824 <HAL_GetTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <DHT11_Read+0xf0>)
 8001b50:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001b52:	e004      	b.n	8001b5e <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001b54:	f000 fe66 	bl	8002824 <HAL_GetTick>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <DHT11_Read+0xf0>)
 8001b5c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <DHT11_Read+0xf4>)
 8001b64:	f001 fb0c 	bl	8003180 <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <DHT11_Read+0xd4>
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <DHT11_Read+0xec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1c9a      	adds	r2, r3, #2
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <DHT11_Read+0xf0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8eb      	bhi.n	8001b54 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	d995      	bls.n	8001ab4 <DHT11_Read+0xc>
    }
  }
  return b;
 8001b88:	79bb      	ldrb	r3, [r7, #6]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000200 	.word	0x20000200
 8001b98:	20000204 	.word	0x20000204
 8001b9c:	40010c00 	.word	0x40010c00

08001ba0 <read_dht11>:
void read_dht11(){
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af02      	add	r7, sp, #8

if(timer3_flag==1)
 8001ba6:	4b5d      	ldr	r3, [pc, #372]	; (8001d1c <read_dht11+0x17c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	f040 80b2 	bne.w	8001d14 <read_dht11+0x174>
	{
		 if(DHT11_Start())
 8001bb0:	f7ff ff04 	bl	80019bc <DHT11_Start>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80a9 	beq.w	8001d0e <read_dht11+0x16e>
	    {
	      RHI = DHT11_Read(); // Relative humidity integral
 8001bbc:	f7ff ff74 	bl	8001aa8 <DHT11_Read>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <read_dht11+0x180>)
 8001bc6:	701a      	strb	r2, [r3, #0]
	      RHD = DHT11_Read(); // Relative humidity decimal
 8001bc8:	f7ff ff6e 	bl	8001aa8 <DHT11_Read>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b54      	ldr	r3, [pc, #336]	; (8001d24 <read_dht11+0x184>)
 8001bd2:	701a      	strb	r2, [r3, #0]
	      TCI = DHT11_Read(); // Celsius integral
 8001bd4:	f7ff ff68 	bl	8001aa8 <DHT11_Read>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b52      	ldr	r3, [pc, #328]	; (8001d28 <read_dht11+0x188>)
 8001bde:	701a      	strb	r2, [r3, #0]
	      TCD = DHT11_Read(); // Celsius decimal
 8001be0:	f7ff ff62 	bl	8001aa8 <DHT11_Read>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <read_dht11+0x18c>)
 8001bea:	701a      	strb	r2, [r3, #0]
	      SUM = DHT11_Read(); // Check sum
 8001bec:	f7ff ff5c 	bl	8001aa8 <DHT11_Read>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <read_dht11+0x190>)
 8001bf6:	701a      	strb	r2, [r3, #0]
	      if (RHI + RHD + TCI + TCD == SUM)
 8001bf8:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <read_dht11+0x180>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <read_dht11+0x184>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <read_dht11+0x188>)
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a48      	ldr	r2, [pc, #288]	; (8001d2c <read_dht11+0x18c>)
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a47      	ldr	r2, [pc, #284]	; (8001d30 <read_dht11+0x190>)
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d17a      	bne.n	8001d0e <read_dht11+0x16e>
	      {
	        // Can use RHI and TCI for any purposes if whole number only needed
	        tCelsius = (float)TCI + (float)(TCD/10.0);
 8001c18:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <read_dht11+0x188>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff f839 	bl	8000c94 <__aeabi_ui2f>
 8001c22:	4604      	mov	r4, r0
 8001c24:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <read_dht11+0x18c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fbeb 	bl	8000404 <__aeabi_i2d>
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <read_dht11+0x194>)
 8001c34:	f7fe fd7a 	bl	800072c <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7fe ff22 	bl	8000a88 <__aeabi_d2f>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4619      	mov	r1, r3
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7fe ff73 	bl	8000b34 <__addsf3>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <read_dht11+0x198>)
 8001c54:	601a      	str	r2, [r3, #0]
	        tFahrenheit = tCelsius * 9/5 + 32;
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <read_dht11+0x198>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4938      	ldr	r1, [pc, #224]	; (8001d3c <read_dht11+0x19c>)
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f871 	bl	8000d44 <__aeabi_fmul>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4936      	ldr	r1, [pc, #216]	; (8001d40 <read_dht11+0x1a0>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f920 	bl	8000eac <__aeabi_fdiv>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe ff5e 	bl	8000b34 <__addsf3>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <read_dht11+0x1a4>)
 8001c7e:	601a      	str	r2, [r3, #0]
	        RH = (float)RHI + (float)(RHD/10.0);
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <read_dht11+0x180>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f805 	bl	8000c94 <__aeabi_ui2f>
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <read_dht11+0x184>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fbb7 	bl	8000404 <__aeabi_i2d>
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <read_dht11+0x194>)
 8001c9c:	f7fe fd46 	bl	800072c <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe feee 	bl	8000a88 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f7fe ff3f 	bl	8000b34 <__addsf3>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <read_dht11+0x1a8>)
 8001cbc:	601a      	str	r2, [r3, #0]

	        sprintf(strCopy,"%d.%d C   ", TCI, TCD);
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <read_dht11+0x188>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <read_dht11+0x18c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4920      	ldr	r1, [pc, #128]	; (8001d4c <read_dht11+0x1ac>)
 8001cca:	4821      	ldr	r0, [pc, #132]	; (8001d50 <read_dht11+0x1b0>)
 8001ccc:	f004 fd4e 	bl	800676c <siprintf>
	      	ILI9341_DrawText(strCopy, FONT1, 0, 0, BLACK, WHITE);
 8001cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	491d      	ldr	r1, [pc, #116]	; (8001d54 <read_dht11+0x1b4>)
 8001ce0:	481b      	ldr	r0, [pc, #108]	; (8001d50 <read_dht11+0x1b0>)
 8001ce2:	f7ff f9f7 	bl	80010d4 <ILI9341_DrawText>
	        sprintf(strCopy,"%d.%d %%  ", RHI, RHD);
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <read_dht11+0x180>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <read_dht11+0x184>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4919      	ldr	r1, [pc, #100]	; (8001d58 <read_dht11+0x1b8>)
 8001cf2:	4817      	ldr	r0, [pc, #92]	; (8001d50 <read_dht11+0x1b0>)
 8001cf4:	f004 fd3a 	bl	800676c <siprintf>
	        ILI9341_DrawText(strCopy, FONT1, 150, 0, BLACK, WHITE);
 8001cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	2296      	movs	r2, #150	; 0x96
 8001d06:	4913      	ldr	r1, [pc, #76]	; (8001d54 <read_dht11+0x1b4>)
 8001d08:	4811      	ldr	r0, [pc, #68]	; (8001d50 <read_dht11+0x1b0>)
 8001d0a:	f7ff f9e3 	bl	80010d4 <ILI9341_DrawText>
	      }
	    }
		timer3_flag = 0;
 8001d0e:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <read_dht11+0x17c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]

	}

}
 8001d14:	bf00      	nop
 8001d16:	3704      	adds	r7, #4
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}
 8001d1c:	20000004 	.word	0x20000004
 8001d20:	200001f8 	.word	0x200001f8
 8001d24:	200001f9 	.word	0x200001f9
 8001d28:	200001fa 	.word	0x200001fa
 8001d2c:	200001fb 	.word	0x200001fb
 8001d30:	200001fc 	.word	0x200001fc
 8001d34:	40240000 	.word	0x40240000
 8001d38:	20000208 	.word	0x20000208
 8001d3c:	41100000 	.word	0x41100000
 8001d40:	40a00000 	.word	0x40a00000
 8001d44:	2000020c 	.word	0x2000020c
 8001d48:	20000210 	.word	0x20000210
 8001d4c:	08008a20 	.word	0x08008a20
 8001d50:	20000214 	.word	0x20000214
 8001d54:	08008a48 	.word	0x08008a48
 8001d58:	08008a2c 	.word	0x08008a2c

08001d5c <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d102      	bne.n	8001d74 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		timer3_flag = 1;
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
	}
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40000400 	.word	0x40000400
 8001d84:	20000004 	.word	0x20000004

08001d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	//Set_bit_move_1(0x0E,2);
	uint8_t control=0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &control, 1, 100);
 8001d92:	2364      	movs	r3, #100	; 0x64
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	2301      	movs	r3, #1
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2301      	movs	r3, #1
 8001da0:	220e      	movs	r2, #14
 8001da2:	21d0      	movs	r1, #208	; 0xd0
 8001da4:	482a      	ldr	r0, [pc, #168]	; (8001e50 <main+0xc8>)
 8001da6:	f001 fc59 	bl	800365c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, (uint8_t *)(control|(0x1C)<<2), 1, 100);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	2364      	movs	r3, #100	; 0x64
 8001db6:	9302      	str	r3, [sp, #8]
 8001db8:	2301      	movs	r3, #1
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	9200      	str	r2, [sp, #0]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	220e      	movs	r2, #14
 8001dc2:	21d0      	movs	r1, #208	; 0xd0
 8001dc4:	4822      	ldr	r0, [pc, #136]	; (8001e50 <main+0xc8>)
 8001dc6:	f001 fb4f 	bl	8003468 <HAL_I2C_Mem_Write>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dca:	f000 fcd3 	bl	8002774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dce:	f000 f851 	bl	8001e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd2:	f000 fa09 	bl	80021e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd6:	f000 f9e9 	bl	80021ac <MX_DMA_Init>
  MX_I2C1_Init();
 8001dda:	f000 f891 	bl	8001f00 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001dde:	f000 f8bd 	bl	8001f5c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001de2:	f000 f941 	bl	8002068 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001de6:	f000 f8ef 	bl	8001fc8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001dea:	f000 f991 	bl	8002110 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001dee:	4819      	ldr	r0, [pc, #100]	; (8001e54 <main+0xcc>)
 8001df0:	f003 fa50 	bl	8005294 <HAL_TIM_Base_Start>
  BUTTON_Init(&bien_nut_bam,GPIOA,GPIO_PIN_3);
 8001df4:	2208      	movs	r2, #8
 8001df6:	4918      	ldr	r1, [pc, #96]	; (8001e58 <main+0xd0>)
 8001df8:	4818      	ldr	r0, [pc, #96]	; (8001e5c <main+0xd4>)
 8001dfa:	f7ff fda3 	bl	8001944 <BUTTON_Init>
  //Set_Time(57,15,15,4,3,1,24);
  HAL_TIM_Base_Start_IT(&htim3);
 8001dfe:	4818      	ldr	r0, [pc, #96]	; (8001e60 <main+0xd8>)
 8001e00:	f003 fa92 	bl	8005328 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001e04:	213c      	movs	r1, #60	; 0x3c
 8001e06:	4817      	ldr	r0, [pc, #92]	; (8001e64 <main+0xdc>)
 8001e08:	f003 fb82 	bl	8005510 <HAL_TIM_Encoder_Start>
	ILI9341_Init();
 8001e0c:	f7ff fabc 	bl	8001388 <ILI9341_Init>
	ILI9341_FillScreen(WHITE);
 8001e10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e14:	f7ff fcae 	bl	8001774 <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f7ff fbbf 	bl	800159c <ILI9341_SetRotation>
	//uint32_t timer_1 = HAL_GetTick();
	ILI9341_DrawText("AL1:", FONT6, 10, 125, BLACK, WHITE);
 8001e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	237d      	movs	r3, #125	; 0x7d
 8001e2a:	220a      	movs	r2, #10
 8001e2c:	490e      	ldr	r1, [pc, #56]	; (8001e68 <main+0xe0>)
 8001e2e:	480f      	ldr	r0, [pc, #60]	; (8001e6c <main+0xe4>)
 8001e30:	f7ff f950 	bl	80010d4 <ILI9341_DrawText>
	ILI9341_DrawText("AL2:", FONT6, 10, 175, BLACK, WHITE);
 8001e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	23af      	movs	r3, #175	; 0xaf
 8001e40:	220a      	movs	r2, #10
 8001e42:	4909      	ldr	r1, [pc, #36]	; (8001e68 <main+0xe0>)
 8001e44:	480a      	ldr	r0, [pc, #40]	; (8001e70 <main+0xe8>)
 8001e46:	f7ff f945 	bl	80010d4 <ILI9341_DrawText>
		//Set_bit_move_0(0x0E,7);


		//mode_default();
		//Read_Alaram();
		read_dht11();
 8001e4a:	f7ff fea9 	bl	8001ba0 <read_dht11>
 8001e4e:	e7fc      	b.n	8001e4a <main+0xc2>
 8001e50:	20000224 	.word	0x20000224
 8001e54:	20000314 	.word	0x20000314
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	200003ec 	.word	0x200003ec
 8001e60:	200003a4 	.word	0x200003a4
 8001e64:	2000035c 	.word	0x2000035c
 8001e68:	080090ac 	.word	0x080090ac
 8001e6c:	08008a38 	.word	0x08008a38
 8001e70:	08008a40 	.word	0x08008a40

08001e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b090      	sub	sp, #64	; 0x40
 8001e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7a:	f107 0318 	add.w	r3, r7, #24
 8001e7e:	2228      	movs	r2, #40	; 0x28
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 fcd5 	bl	8006832 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001eb2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb8:	f107 0318 	add.w	r3, r7, #24
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 f9e9 	bl	8004294 <HAL_RCC_OscConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ec8:	f000 f9e8 	bl	800229c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ecc:	230f      	movs	r3, #15
 8001ece:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001edc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 fc56 	bl	8004798 <HAL_RCC_ClockConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ef2:	f000 f9d3 	bl	800229c <Error_Handler>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3740      	adds	r7, #64	; 0x40
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <MX_I2C1_Init+0x50>)
 8001f06:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <MX_I2C1_Init+0x54>)
 8001f08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_I2C1_Init+0x50>)
 8001f0c:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <MX_I2C1_Init+0x58>)
 8001f0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <MX_I2C1_Init+0x50>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_I2C1_Init+0x50>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_I2C1_Init+0x50>)
 8001f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <MX_I2C1_Init+0x50>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_I2C1_Init+0x50>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <MX_I2C1_Init+0x50>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_I2C1_Init+0x50>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <MX_I2C1_Init+0x50>)
 8001f3e:	f001 f94f 	bl	80031e0 <HAL_I2C_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f48:	f000 f9a8 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000224 	.word	0x20000224
 8001f54:	40005400 	.word	0x40005400
 8001f58:	000186a0 	.word	0x000186a0

08001f5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f62:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <MX_SPI1_Init+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f90:	2208      	movs	r2, #8
 8001f92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001fa8:	220a      	movs	r2, #10
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <MX_SPI1_Init+0x64>)
 8001fae:	f002 fd6d 	bl	8004a8c <HAL_SPI_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fb8:	f000 f970 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000278 	.word	0x20000278
 8001fc4:	40013000 	.word	0x40013000

08001fc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	463b      	mov	r3, r7
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <MX_TIM1_Init+0x98>)
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <MX_TIM1_Init+0x9c>)
 8001fe8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <MX_TIM1_Init+0x98>)
 8001fec:	2247      	movs	r2, #71	; 0x47
 8001fee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <MX_TIM1_Init+0x98>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <MX_TIM1_Init+0x98>)
 8001ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ffc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <MX_TIM1_Init+0x98>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002004:	4b16      	ldr	r3, [pc, #88]	; (8002060 <MX_TIM1_Init+0x98>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <MX_TIM1_Init+0x98>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002010:	4813      	ldr	r0, [pc, #76]	; (8002060 <MX_TIM1_Init+0x98>)
 8002012:	f003 f8ef 	bl	80051f4 <HAL_TIM_Base_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800201c:	f000 f93e 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002024:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	4619      	mov	r1, r3
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <MX_TIM1_Init+0x98>)
 800202e:	f003 fc05 	bl	800583c <HAL_TIM_ConfigClockSource>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002038:	f000 f930 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002044:	463b      	mov	r3, r7
 8002046:	4619      	mov	r1, r3
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <MX_TIM1_Init+0x98>)
 800204a:	f003 fdff 	bl	8005c4c <HAL_TIMEx_MasterConfigSynchronization>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002054:	f000 f922 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002058:	bf00      	nop
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000314 	.word	0x20000314
 8002064:	40012c00 	.word	0x40012c00

08002068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	2224      	movs	r2, #36	; 0x24
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f004 fbdb 	bl	8006832 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <MX_TIM2_Init+0xa4>)
 8002086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800208a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <MX_TIM2_Init+0xa4>)
 800208e:	2200      	movs	r2, #0
 8002090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <MX_TIM2_Init+0xa4>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <MX_TIM2_Init+0xa4>)
 800209a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_TIM2_Init+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <MX_TIM2_Init+0xa4>)
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020ac:	2303      	movs	r3, #3
 80020ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020b4:	2301      	movs	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020c4:	2301      	movs	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_TIM2_Init+0xa4>)
 80020d8:	f003 f978 	bl	80053cc <HAL_TIM_Encoder_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020e2:	f000 f8db 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <MX_TIM2_Init+0xa4>)
 80020f4:	f003 fdaa 	bl	8005c4c <HAL_TIMEx_MasterConfigSynchronization>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020fe:	f000 f8cd 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	3730      	adds	r7, #48	; 0x30
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000035c 	.word	0x2000035c

08002110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	463b      	mov	r3, r7
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <MX_TIM3_Init+0x94>)
 800212e:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <MX_TIM3_Init+0x98>)
 8002130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 8002132:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <MX_TIM3_Init+0x94>)
 8002134:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002138:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <MX_TIM3_Init+0x94>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <MX_TIM3_Init+0x94>)
 8002142:	f242 720f 	movw	r2, #9999	; 0x270f
 8002146:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <MX_TIM3_Init+0x94>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <MX_TIM3_Init+0x94>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002154:	4813      	ldr	r0, [pc, #76]	; (80021a4 <MX_TIM3_Init+0x94>)
 8002156:	f003 f84d 	bl	80051f4 <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002160:	f000 f89c 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	4619      	mov	r1, r3
 8002170:	480c      	ldr	r0, [pc, #48]	; (80021a4 <MX_TIM3_Init+0x94>)
 8002172:	f003 fb63 	bl	800583c <HAL_TIM_ConfigClockSource>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800217c:	f000 f88e 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002188:	463b      	mov	r3, r7
 800218a:	4619      	mov	r1, r3
 800218c:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_TIM3_Init+0x94>)
 800218e:	f003 fd5d 	bl	8005c4c <HAL_TIMEx_MasterConfigSynchronization>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002198:	f000 f880 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200003a4 	.word	0x200003a4
 80021a8:	40000400 	.word	0x40000400

080021ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_DMA_Init+0x38>)
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <MX_DMA_Init+0x38>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6153      	str	r3, [r2, #20]
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_DMA_Init+0x38>)
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	200d      	movs	r0, #13
 80021d0:	f000 fc2d 	bl	8002a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021d4:	200d      	movs	r0, #13
 80021d6:	f000 fc46 	bl	8002a66 <HAL_NVIC_EnableIRQ>

}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000

080021e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <MX_GPIO_Init+0xa8>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a23      	ldr	r2, [pc, #140]	; (8002290 <MX_GPIO_Init+0xa8>)
 8002202:	f043 0320 	orr.w	r3, r3, #32
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <MX_GPIO_Init+0xa8>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <MX_GPIO_Init+0xa8>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <MX_GPIO_Init+0xa8>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <MX_GPIO_Init+0xa8>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <MX_GPIO_Init+0xa8>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a17      	ldr	r2, [pc, #92]	; (8002290 <MX_GPIO_Init+0xa8>)
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_GPIO_Init+0xa8>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f240 4103 	movw	r1, #1027	; 0x403
 800224a:	4812      	ldr	r0, [pc, #72]	; (8002294 <MX_GPIO_Init+0xac>)
 800224c:	f000 ffaf 	bl	80031ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002250:	2308      	movs	r3, #8
 8002252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	4619      	mov	r1, r3
 8002262:	480d      	ldr	r0, [pc, #52]	; (8002298 <MX_GPIO_Init+0xb0>)
 8002264:	f000 fe08 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8002268:	f240 4303 	movw	r3, #1027	; 0x403
 800226c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2302      	movs	r3, #2
 8002278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 0310 	add.w	r3, r7, #16
 800227e:	4619      	mov	r1, r3
 8002280:	4804      	ldr	r0, [pc, #16]	; (8002294 <MX_GPIO_Init+0xac>)
 8002282:	f000 fdf9 	bl	8002e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002286:	bf00      	nop
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	40010c00 	.word	0x40010c00
 8002298:	40010800 	.word	0x40010800

0800229c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a0:	b672      	cpsid	i
}
 80022a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022a4:	e7fe      	b.n	80022a4 <Error_Handler+0x8>
	...

080022a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_MspInit+0x40>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <HAL_MspInit+0x40>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6193      	str	r3, [r2, #24]
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_MspInit+0x40>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_MspInit+0x40>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_MspInit+0x40>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	61d3      	str	r3, [r2, #28]
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_MspInit+0x40>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40021000 	.word	0x40021000

080022ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a15      	ldr	r2, [pc, #84]	; (800235c <HAL_I2C_MspInit+0x70>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d123      	bne.n	8002354 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_I2C_MspInit+0x74>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_I2C_MspInit+0x74>)
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_I2C_MspInit+0x74>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002324:	23c0      	movs	r3, #192	; 0xc0
 8002326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002328:	2312      	movs	r3, #18
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	4619      	mov	r1, r3
 8002336:	480b      	ldr	r0, [pc, #44]	; (8002364 <HAL_I2C_MspInit+0x78>)
 8002338:	f000 fd9e 	bl	8002e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_I2C_MspInit+0x74>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <HAL_I2C_MspInit+0x74>)
 8002342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002346:	61d3      	str	r3, [r2, #28]
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_I2C_MspInit+0x74>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002354:	bf00      	nop
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40005400 	.word	0x40005400
 8002360:	40021000 	.word	0x40021000
 8002364:	40010c00 	.word	0x40010c00

08002368 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a28      	ldr	r2, [pc, #160]	; (8002424 <HAL_SPI_MspInit+0xbc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d149      	bne.n	800241c <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_SPI_MspInit+0xc0>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a26      	ldr	r2, [pc, #152]	; (8002428 <HAL_SPI_MspInit+0xc0>)
 800238e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_SPI_MspInit+0xc0>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <HAL_SPI_MspInit+0xc0>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a20      	ldr	r2, [pc, #128]	; (8002428 <HAL_SPI_MspInit+0xc0>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_SPI_MspInit+0xc0>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023b8:	23a0      	movs	r3, #160	; 0xa0
 80023ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	4619      	mov	r1, r3
 80023ca:	4818      	ldr	r0, [pc, #96]	; (800242c <HAL_SPI_MspInit+0xc4>)
 80023cc:	f000 fd54 	bl	8002e78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_SPI_MspInit+0xcc>)
 80023d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d6:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 80023d8:	2210      	movs	r2, #16
 80023da:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002400:	480b      	ldr	r0, [pc, #44]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 8002402:	f000 fb4b 	bl	8002a9c <HAL_DMA_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 800240c:	f7ff ff46 	bl	800229c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 8002414:	649a      	str	r2, [r3, #72]	; 0x48
 8002416:	4a06      	ldr	r2, [pc, #24]	; (8002430 <HAL_SPI_MspInit+0xc8>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800241c:	bf00      	nop
 800241e:	3720      	adds	r7, #32
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40013000 	.word	0x40013000
 8002428:	40021000 	.word	0x40021000
 800242c:	40010800 	.word	0x40010800
 8002430:	200002d0 	.word	0x200002d0
 8002434:	40020030 	.word	0x40020030

08002438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a16      	ldr	r2, [pc, #88]	; (80024a0 <HAL_TIM_Base_MspInit+0x68>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10c      	bne.n	8002464 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_TIM_Base_MspInit+0x6c>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <HAL_TIM_Base_MspInit+0x6c>)
 8002450:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002454:	6193      	str	r3, [r2, #24]
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_TIM_Base_MspInit+0x6c>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002462:	e018      	b.n	8002496 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <HAL_TIM_Base_MspInit+0x70>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d113      	bne.n	8002496 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_TIM_Base_MspInit+0x6c>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <HAL_TIM_Base_MspInit+0x6c>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_TIM_Base_MspInit+0x6c>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2101      	movs	r1, #1
 800248a:	201d      	movs	r0, #29
 800248c:	f000 facf 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002490:	201d      	movs	r0, #29
 8002492:	f000 fae8 	bl	8002a66 <HAL_NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40000400 	.word	0x40000400

080024ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ca:	d123      	bne.n	8002514 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_TIM_Encoder_MspInit+0x70>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_TIM_Encoder_MspInit+0x70>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	61d3      	str	r3, [r2, #28]
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_TIM_Encoder_MspInit+0x70>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_TIM_Encoder_MspInit+0x70>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_TIM_Encoder_MspInit+0x70>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	6193      	str	r3, [r2, #24]
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_TIM_Encoder_MspInit+0x70>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024fc:	2303      	movs	r3, #3
 80024fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	4619      	mov	r1, r3
 800250e:	4804      	ldr	r0, [pc, #16]	; (8002520 <HAL_TIM_Encoder_MspInit+0x74>)
 8002510:	f000 fcb2 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002514:	bf00      	nop
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	40010800 	.word	0x40010800

08002524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <NMI_Handler+0x4>

0800252a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252e:	e7fe      	b.n	800252e <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <MemManage_Handler+0x4>

08002536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253a:	e7fe      	b.n	800253a <BusFault_Handler+0x4>

0800253c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <UsageFault_Handler+0x4>

08002542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256a:	f000 f949 	bl	8002800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <DMA1_Channel3_IRQHandler+0x10>)
 800257a:	f000 fb49 	bl	8002c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200002d0 	.word	0x200002d0

08002588 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <TIM3_IRQHandler+0x10>)
 800258e:	f003 f84d 	bl	800562c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200003a4 	.word	0x200003a4

0800259c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return 1;
 80025a0:	2301      	movs	r3, #1
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <_kill>:

int _kill(int pid, int sig)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025b4:	f004 f990 	bl	80068d8 <__errno>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2216      	movs	r2, #22
 80025bc:	601a      	str	r2, [r3, #0]
  return -1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_exit>:

void _exit (int status)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025d2:	f04f 31ff 	mov.w	r1, #4294967295
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffe7 	bl	80025aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80025dc:	e7fe      	b.n	80025dc <_exit+0x12>

080025de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e00a      	b.n	8002606 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025f0:	f3af 8000 	nop.w
 80025f4:	4601      	mov	r1, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	60ba      	str	r2, [r7, #8]
 80025fc:	b2ca      	uxtb	r2, r1
 80025fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3301      	adds	r3, #1
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	dbf0      	blt.n	80025f0 <_read+0x12>
  }

  return len;
 800260e:	687b      	ldr	r3, [r7, #4]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e009      	b.n	800263e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	60ba      	str	r2, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	429a      	cmp	r2, r3
 8002644:	dbf1      	blt.n	800262a <_write+0x12>
  }
  return len;
 8002646:	687b      	ldr	r3, [r7, #4]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_close>:

int _close(int file)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002676:	605a      	str	r2, [r3, #4]
  return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <_isatty>:

int _isatty(int file)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800268c:	2301      	movs	r3, #1
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <_sbrk+0x5c>)
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <_sbrk+0x60>)
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <_sbrk+0x64>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <_sbrk+0x68>)
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d207      	bcs.n	80026f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e0:	f004 f8fa 	bl	80068d8 <__errno>
 80026e4:	4603      	mov	r3, r0
 80026e6:	220c      	movs	r2, #12
 80026e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e009      	b.n	8002704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <_sbrk+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <_sbrk+0x64>)
 8002700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20005000 	.word	0x20005000
 8002710:	00000400 	.word	0x00000400
 8002714:	200003fc 	.word	0x200003fc
 8002718:	20000550 	.word	0x20000550

0800271c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002728:	f7ff fff8 	bl	800271c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800272c:	480b      	ldr	r0, [pc, #44]	; (800275c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800272e:	490c      	ldr	r1, [pc, #48]	; (8002760 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002744:	4c09      	ldr	r4, [pc, #36]	; (800276c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f004 f8c7 	bl	80068e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002756:	f7ff fb17 	bl	8001d88 <main>
  bx lr
 800275a:	4770      	bx	lr
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002764:	0800beb4 	.word	0x0800beb4
  ldr r2, =_sbss
 8002768:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800276c:	20000550 	.word	0x20000550

08002770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC1_2_IRQHandler>
	...

08002774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_Init+0x28>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_Init+0x28>)
 800277e:	f043 0310 	orr.w	r3, r3, #16
 8002782:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002784:	2003      	movs	r0, #3
 8002786:	f000 f947 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800278a:	200f      	movs	r0, #15
 800278c:	f000 f808 	bl	80027a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002790:	f7ff fd8a 	bl	80022a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40022000 	.word	0x40022000

080027a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_InitTick+0x54>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_InitTick+0x58>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f95f 	bl	8002a82 <HAL_SYSTICK_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00e      	b.n	80027ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d80a      	bhi.n	80027ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d4:	2200      	movs	r2, #0
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f000 f927 	bl	8002a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e0:	4a06      	ldr	r2, [pc, #24]	; (80027fc <HAL_InitTick+0x5c>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e000      	b.n	80027ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000008 	.word	0x20000008
 80027f8:	20000010 	.word	0x20000010
 80027fc:	2000000c 	.word	0x2000000c

08002800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_IncTick+0x1c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_IncTick+0x20>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4413      	add	r3, r2
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <HAL_IncTick+0x20>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000010 	.word	0x20000010
 8002820:	20000400 	.word	0x20000400

08002824 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return uwTick;
 8002828:	4b02      	ldr	r3, [pc, #8]	; (8002834 <HAL_GetTick+0x10>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20000400 	.word	0x20000400

08002838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff fff0 	bl	8002824 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d005      	beq.n	800285e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_Delay+0x44>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800285e:	bf00      	nop
 8002860:	f7ff ffe0 	bl	8002824 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d8f7      	bhi.n	8002860 <HAL_Delay+0x28>
  {
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000010 	.word	0x20000010

08002880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800289c:	4013      	ands	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	f003 0307 	and.w	r3, r3, #7
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	db0b      	blt.n	800290e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	f003 021f 	and.w	r2, r3, #31
 80028fc:	4906      	ldr	r1, [pc, #24]	; (8002918 <__NVIC_EnableIRQ+0x34>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2001      	movs	r0, #1
 8002906:	fa00 f202 	lsl.w	r2, r0, r2
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100

0800291c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db0a      	blt.n	8002946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	490c      	ldr	r1, [pc, #48]	; (8002968 <__NVIC_SetPriority+0x4c>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	0112      	lsls	r2, r2, #4
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	440b      	add	r3, r1
 8002940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002944:	e00a      	b.n	800295c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <__NVIC_SetPriority+0x50>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	3b04      	subs	r3, #4
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	440b      	add	r3, r1
 800295a:	761a      	strb	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1c3 0307 	rsb	r3, r3, #7
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf28      	it	cs
 800298e:	2304      	movcs	r3, #4
 8002990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3304      	adds	r3, #4
 8002996:	2b06      	cmp	r3, #6
 8002998:	d902      	bls.n	80029a0 <NVIC_EncodePriority+0x30>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3b03      	subs	r3, #3
 800299e:	e000      	b.n	80029a2 <NVIC_EncodePriority+0x32>
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43d9      	mvns	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	4313      	orrs	r3, r2
         );
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7ff ff90 	bl	800291c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff2d 	bl	8002880 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff42 	bl	80028c8 <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff90 	bl	8002970 <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5f 	bl	800291c <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff35 	bl	80028e4 <__NVIC_EnableIRQ>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ffa2 	bl	80029d4 <SysTick_Config>
 8002a90:	4603      	mov	r3, r0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e043      	b.n	8002b3a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_DMA_Init+0xa8>)
 8002aba:	4413      	add	r3, r2
 8002abc:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_DMA_Init+0xac>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	009a      	lsls	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a1f      	ldr	r2, [pc, #124]	; (8002b4c <HAL_DMA_Init+0xb0>)
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ae6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002aea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	bffdfff8 	.word	0xbffdfff8
 8002b48:	cccccccd 	.word	0xcccccccd
 8002b4c:	40020000 	.word	0x40020000

08002b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_DMA_Start_IT+0x20>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e04b      	b.n	8002c08 <HAL_DMA_Start_IT+0xb8>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d13a      	bne.n	8002bfa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f937 	bl	8002e1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 020e 	orr.w	r2, r2, #14
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e00f      	b.n	8002be8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0204 	bic.w	r2, r2, #4
 8002bd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 020a 	orr.w	r2, r2, #10
 8002be6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	e005      	b.n	8002c06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
 8002c04:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d04f      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0xc8>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04a      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d107      	bne.n	8002c60 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0204 	bic.w	r2, r2, #4
 8002c5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a66      	ldr	r2, [pc, #408]	; (8002e00 <HAL_DMA_IRQHandler+0x1f0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d029      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xae>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_DMA_IRQHandler+0x1f4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d022      	beq.n	8002cba <HAL_DMA_IRQHandler+0xaa>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a63      	ldr	r2, [pc, #396]	; (8002e08 <HAL_DMA_IRQHandler+0x1f8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01a      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0xa4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a62      	ldr	r2, [pc, #392]	; (8002e0c <HAL_DMA_IRQHandler+0x1fc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d012      	beq.n	8002cae <HAL_DMA_IRQHandler+0x9e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a60      	ldr	r2, [pc, #384]	; (8002e10 <HAL_DMA_IRQHandler+0x200>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00a      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x98>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a5f      	ldr	r2, [pc, #380]	; (8002e14 <HAL_DMA_IRQHandler+0x204>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d102      	bne.n	8002ca2 <HAL_DMA_IRQHandler+0x92>
 8002c9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ca0:	e00e      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xb0>
 8002ca2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ca6:	e00b      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xb0>
 8002ca8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cac:	e008      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xb0>
 8002cae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cb2:	e005      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xb0>
 8002cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb8:	e002      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xb0>
 8002cba:	2340      	movs	r3, #64	; 0x40
 8002cbc:	e000      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xb0>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	4a55      	ldr	r2, [pc, #340]	; (8002e18 <HAL_DMA_IRQHandler+0x208>)
 8002cc2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8094 	beq.w	8002df6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cd6:	e08e      	b.n	8002df6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2202      	movs	r2, #2
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d056      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x186>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d051      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 020a 	bic.w	r2, r2, #10
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a38      	ldr	r2, [pc, #224]	; (8002e00 <HAL_DMA_IRQHandler+0x1f0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d029      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x166>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a37      	ldr	r2, [pc, #220]	; (8002e04 <HAL_DMA_IRQHandler+0x1f4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x162>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a35      	ldr	r2, [pc, #212]	; (8002e08 <HAL_DMA_IRQHandler+0x1f8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01a      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x15c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <HAL_DMA_IRQHandler+0x1fc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d012      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x156>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a32      	ldr	r2, [pc, #200]	; (8002e10 <HAL_DMA_IRQHandler+0x200>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00a      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x150>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a31      	ldr	r2, [pc, #196]	; (8002e14 <HAL_DMA_IRQHandler+0x204>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d102      	bne.n	8002d5a <HAL_DMA_IRQHandler+0x14a>
 8002d54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d58:	e00e      	b.n	8002d78 <HAL_DMA_IRQHandler+0x168>
 8002d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5e:	e00b      	b.n	8002d78 <HAL_DMA_IRQHandler+0x168>
 8002d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d64:	e008      	b.n	8002d78 <HAL_DMA_IRQHandler+0x168>
 8002d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d6a:	e005      	b.n	8002d78 <HAL_DMA_IRQHandler+0x168>
 8002d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d70:	e002      	b.n	8002d78 <HAL_DMA_IRQHandler+0x168>
 8002d72:	2320      	movs	r3, #32
 8002d74:	e000      	b.n	8002d78 <HAL_DMA_IRQHandler+0x168>
 8002d76:	2302      	movs	r3, #2
 8002d78:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <HAL_DMA_IRQHandler+0x208>)
 8002d7a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d034      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d94:	e02f      	b.n	8002df6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d028      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x1e8>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d023      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 020e 	bic.w	r2, r2, #14
 8002dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
    }
  }
  return;
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
}
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40020008 	.word	0x40020008
 8002e04:	4002001c 	.word	0x4002001c
 8002e08:	40020030 	.word	0x40020030
 8002e0c:	40020044 	.word	0x40020044
 8002e10:	40020058 	.word	0x40020058
 8002e14:	4002006c 	.word	0x4002006c
 8002e18:	40020000 	.word	0x40020000

08002e1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f202 	lsl.w	r2, r1, r2
 8002e38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d108      	bne.n	8002e5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e5a:	e007      	b.n	8002e6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	60da      	str	r2, [r3, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b08b      	sub	sp, #44	; 0x2c
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8a:	e169      	b.n	8003160 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	f040 8158 	bne.w	800315a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a9a      	ldr	r2, [pc, #616]	; (8003118 <HAL_GPIO_Init+0x2a0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d05e      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
 8002eb4:	4a98      	ldr	r2, [pc, #608]	; (8003118 <HAL_GPIO_Init+0x2a0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d875      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002eba:	4a98      	ldr	r2, [pc, #608]	; (800311c <HAL_GPIO_Init+0x2a4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d058      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
 8002ec0:	4a96      	ldr	r2, [pc, #600]	; (800311c <HAL_GPIO_Init+0x2a4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d86f      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002ec6:	4a96      	ldr	r2, [pc, #600]	; (8003120 <HAL_GPIO_Init+0x2a8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d052      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
 8002ecc:	4a94      	ldr	r2, [pc, #592]	; (8003120 <HAL_GPIO_Init+0x2a8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d869      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002ed2:	4a94      	ldr	r2, [pc, #592]	; (8003124 <HAL_GPIO_Init+0x2ac>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d04c      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
 8002ed8:	4a92      	ldr	r2, [pc, #584]	; (8003124 <HAL_GPIO_Init+0x2ac>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d863      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002ede:	4a92      	ldr	r2, [pc, #584]	; (8003128 <HAL_GPIO_Init+0x2b0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d046      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
 8002ee4:	4a90      	ldr	r2, [pc, #576]	; (8003128 <HAL_GPIO_Init+0x2b0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d85d      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002eea:	2b12      	cmp	r3, #18
 8002eec:	d82a      	bhi.n	8002f44 <HAL_GPIO_Init+0xcc>
 8002eee:	2b12      	cmp	r3, #18
 8002ef0:	d859      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002ef2:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <HAL_GPIO_Init+0x80>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f73 	.word	0x08002f73
 8002efc:	08002f4d 	.word	0x08002f4d
 8002f00:	08002f5f 	.word	0x08002f5f
 8002f04:	08002fa1 	.word	0x08002fa1
 8002f08:	08002fa7 	.word	0x08002fa7
 8002f0c:	08002fa7 	.word	0x08002fa7
 8002f10:	08002fa7 	.word	0x08002fa7
 8002f14:	08002fa7 	.word	0x08002fa7
 8002f18:	08002fa7 	.word	0x08002fa7
 8002f1c:	08002fa7 	.word	0x08002fa7
 8002f20:	08002fa7 	.word	0x08002fa7
 8002f24:	08002fa7 	.word	0x08002fa7
 8002f28:	08002fa7 	.word	0x08002fa7
 8002f2c:	08002fa7 	.word	0x08002fa7
 8002f30:	08002fa7 	.word	0x08002fa7
 8002f34:	08002fa7 	.word	0x08002fa7
 8002f38:	08002fa7 	.word	0x08002fa7
 8002f3c:	08002f55 	.word	0x08002f55
 8002f40:	08002f69 	.word	0x08002f69
 8002f44:	4a79      	ldr	r2, [pc, #484]	; (800312c <HAL_GPIO_Init+0x2b4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f4a:	e02c      	b.n	8002fa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	623b      	str	r3, [r7, #32]
          break;
 8002f52:	e029      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	623b      	str	r3, [r7, #32]
          break;
 8002f5c:	e024      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	3308      	adds	r3, #8
 8002f64:	623b      	str	r3, [r7, #32]
          break;
 8002f66:	e01f      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	623b      	str	r3, [r7, #32]
          break;
 8002f70:	e01a      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	623b      	str	r3, [r7, #32]
          break;
 8002f7e:	e013      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f88:	2308      	movs	r3, #8
 8002f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	611a      	str	r2, [r3, #16]
          break;
 8002f92:	e009      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f94:	2308      	movs	r3, #8
 8002f96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	615a      	str	r2, [r3, #20]
          break;
 8002f9e:	e003      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	623b      	str	r3, [r7, #32]
          break;
 8002fa4:	e000      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          break;
 8002fa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2bff      	cmp	r3, #255	; 0xff
 8002fac:	d801      	bhi.n	8002fb2 <HAL_GPIO_Init+0x13a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	e001      	b.n	8002fb6 <HAL_GPIO_Init+0x13e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2bff      	cmp	r3, #255	; 0xff
 8002fbc:	d802      	bhi.n	8002fc4 <HAL_GPIO_Init+0x14c>
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	e002      	b.n	8002fca <HAL_GPIO_Init+0x152>
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	3b08      	subs	r3, #8
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	210f      	movs	r1, #15
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	401a      	ands	r2, r3
 8002fdc:	6a39      	ldr	r1, [r7, #32]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80b1 	beq.w	800315a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ff8:	4b4d      	ldr	r3, [pc, #308]	; (8003130 <HAL_GPIO_Init+0x2b8>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	4a4c      	ldr	r2, [pc, #304]	; (8003130 <HAL_GPIO_Init+0x2b8>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6193      	str	r3, [r2, #24]
 8003004:	4b4a      	ldr	r3, [pc, #296]	; (8003130 <HAL_GPIO_Init+0x2b8>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003010:	4a48      	ldr	r2, [pc, #288]	; (8003134 <HAL_GPIO_Init+0x2bc>)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	3302      	adds	r3, #2
 8003018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a40      	ldr	r2, [pc, #256]	; (8003138 <HAL_GPIO_Init+0x2c0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_GPIO_Init+0x1ec>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a3f      	ldr	r2, [pc, #252]	; (800313c <HAL_GPIO_Init+0x2c4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00d      	beq.n	8003060 <HAL_GPIO_Init+0x1e8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a3e      	ldr	r2, [pc, #248]	; (8003140 <HAL_GPIO_Init+0x2c8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d007      	beq.n	800305c <HAL_GPIO_Init+0x1e4>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <HAL_GPIO_Init+0x2cc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d101      	bne.n	8003058 <HAL_GPIO_Init+0x1e0>
 8003054:	2303      	movs	r3, #3
 8003056:	e006      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 8003058:	2304      	movs	r3, #4
 800305a:	e004      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 800305c:	2302      	movs	r3, #2
 800305e:	e002      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 8003064:	2300      	movs	r3, #0
 8003066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003068:	f002 0203 	and.w	r2, r2, #3
 800306c:	0092      	lsls	r2, r2, #2
 800306e:	4093      	lsls	r3, r2
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003076:	492f      	ldr	r1, [pc, #188]	; (8003134 <HAL_GPIO_Init+0x2bc>)
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003090:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	492c      	ldr	r1, [pc, #176]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	608b      	str	r3, [r1, #8]
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800309e:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	4928      	ldr	r1, [pc, #160]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d006      	beq.n	80030c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030b8:	4b23      	ldr	r3, [pc, #140]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	4922      	ldr	r1, [pc, #136]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60cb      	str	r3, [r1, #12]
 80030c4:	e006      	b.n	80030d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	491e      	ldr	r1, [pc, #120]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4918      	ldr	r1, [pc, #96]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
 80030ec:	e006      	b.n	80030fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	4914      	ldr	r1, [pc, #80]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d021      	beq.n	800314c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	490e      	ldr	r1, [pc, #56]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]
 8003114:	e021      	b.n	800315a <HAL_GPIO_Init+0x2e2>
 8003116:	bf00      	nop
 8003118:	10320000 	.word	0x10320000
 800311c:	10310000 	.word	0x10310000
 8003120:	10220000 	.word	0x10220000
 8003124:	10210000 	.word	0x10210000
 8003128:	10120000 	.word	0x10120000
 800312c:	10110000 	.word	0x10110000
 8003130:	40021000 	.word	0x40021000
 8003134:	40010000 	.word	0x40010000
 8003138:	40010800 	.word	0x40010800
 800313c:	40010c00 	.word	0x40010c00
 8003140:	40011000 	.word	0x40011000
 8003144:	40011400 	.word	0x40011400
 8003148:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_GPIO_Init+0x304>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	43db      	mvns	r3, r3
 8003154:	4909      	ldr	r1, [pc, #36]	; (800317c <HAL_GPIO_Init+0x304>)
 8003156:	4013      	ands	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	3301      	adds	r3, #1
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	fa22 f303 	lsr.w	r3, r2, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	f47f ae8e 	bne.w	8002e8c <HAL_GPIO_Init+0x14>
  }
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	372c      	adds	r7, #44	; 0x2c
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40010400 	.word	0x40010400

08003180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	e001      	b.n	80031a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800319e:	2300      	movs	r3, #0
 80031a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	807b      	strh	r3, [r7, #2]
 80031ba:	4613      	mov	r3, r2
 80031bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031be:	787b      	ldrb	r3, [r7, #1]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031c4:	887a      	ldrh	r2, [r7, #2]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031ca:	e003      	b.n	80031d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	041a      	lsls	r2, r3, #16
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	611a      	str	r2, [r3, #16]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e12b      	b.n	800344a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff f870 	bl	80022ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2224      	movs	r2, #36	; 0x24
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003242:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003244:	f001 fbf0 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 8003248:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4a81      	ldr	r2, [pc, #516]	; (8003454 <HAL_I2C_Init+0x274>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d807      	bhi.n	8003264 <HAL_I2C_Init+0x84>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a80      	ldr	r2, [pc, #512]	; (8003458 <HAL_I2C_Init+0x278>)
 8003258:	4293      	cmp	r3, r2
 800325a:	bf94      	ite	ls
 800325c:	2301      	movls	r3, #1
 800325e:	2300      	movhi	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e006      	b.n	8003272 <HAL_I2C_Init+0x92>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a7d      	ldr	r2, [pc, #500]	; (800345c <HAL_I2C_Init+0x27c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	bf94      	ite	ls
 800326c:	2301      	movls	r3, #1
 800326e:	2300      	movhi	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0e7      	b.n	800344a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a78      	ldr	r2, [pc, #480]	; (8003460 <HAL_I2C_Init+0x280>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	0c9b      	lsrs	r3, r3, #18
 8003284:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4a6a      	ldr	r2, [pc, #424]	; (8003454 <HAL_I2C_Init+0x274>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d802      	bhi.n	80032b4 <HAL_I2C_Init+0xd4>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	3301      	adds	r3, #1
 80032b2:	e009      	b.n	80032c8 <HAL_I2C_Init+0xe8>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	4a69      	ldr	r2, [pc, #420]	; (8003464 <HAL_I2C_Init+0x284>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	3301      	adds	r3, #1
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	495c      	ldr	r1, [pc, #368]	; (8003454 <HAL_I2C_Init+0x274>)
 80032e4:	428b      	cmp	r3, r1
 80032e6:	d819      	bhi.n	800331c <HAL_I2C_Init+0x13c>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e59      	subs	r1, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f6:	1c59      	adds	r1, r3, #1
 80032f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032fc:	400b      	ands	r3, r1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_I2C_Init+0x138>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1e59      	subs	r1, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003310:	3301      	adds	r3, #1
 8003312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003316:	e051      	b.n	80033bc <HAL_I2C_Init+0x1dc>
 8003318:	2304      	movs	r3, #4
 800331a:	e04f      	b.n	80033bc <HAL_I2C_Init+0x1dc>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d111      	bne.n	8003348 <HAL_I2C_Init+0x168>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1e58      	subs	r0, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	440b      	add	r3, r1
 8003332:	fbb0 f3f3 	udiv	r3, r0, r3
 8003336:	3301      	adds	r3, #1
 8003338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	e012      	b.n	800336e <HAL_I2C_Init+0x18e>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e58      	subs	r0, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	0099      	lsls	r1, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	fbb0 f3f3 	udiv	r3, r0, r3
 800335e:	3301      	adds	r3, #1
 8003360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Init+0x196>
 8003372:	2301      	movs	r3, #1
 8003374:	e022      	b.n	80033bc <HAL_I2C_Init+0x1dc>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10e      	bne.n	800339c <HAL_I2C_Init+0x1bc>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1e58      	subs	r0, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	440b      	add	r3, r1
 800338c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003390:	3301      	adds	r3, #1
 8003392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339a:	e00f      	b.n	80033bc <HAL_I2C_Init+0x1dc>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e58      	subs	r0, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	0099      	lsls	r1, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	6809      	ldr	r1, [r1, #0]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6911      	ldr	r1, [r2, #16]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68d2      	ldr	r2, [r2, #12]
 80033f6:	4311      	orrs	r1, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	000186a0 	.word	0x000186a0
 8003458:	001e847f 	.word	0x001e847f
 800345c:	003d08ff 	.word	0x003d08ff
 8003460:	431bde83 	.word	0x431bde83
 8003464:	10624dd3 	.word	0x10624dd3

08003468 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4603      	mov	r3, r0
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	460b      	mov	r3, r1
 800347c:	813b      	strh	r3, [r7, #8]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003482:	f7ff f9cf 	bl	8002824 <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b20      	cmp	r3, #32
 8003492:	f040 80d9 	bne.w	8003648 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	2319      	movs	r3, #25
 800349c:	2201      	movs	r2, #1
 800349e:	496d      	ldr	r1, [pc, #436]	; (8003654 <HAL_I2C_Mem_Write+0x1ec>)
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fcc1 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0cc      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_I2C_Mem_Write+0x56>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e0c5      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d007      	beq.n	80034e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2221      	movs	r2, #33	; 0x21
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2240      	movs	r2, #64	; 0x40
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a4d      	ldr	r2, [pc, #308]	; (8003658 <HAL_I2C_Mem_Write+0x1f0>)
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003526:	88f8      	ldrh	r0, [r7, #6]
 8003528:	893a      	ldrh	r2, [r7, #8]
 800352a:	8979      	ldrh	r1, [r7, #10]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	4603      	mov	r3, r0
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 faf8 	bl	8003b2c <I2C_RequestMemoryWrite>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d052      	beq.n	80035e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e081      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fd86 	bl	800405c <I2C_WaitOnTXEFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b04      	cmp	r3, #4
 800355c:	d107      	bne.n	800356e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06b      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d11b      	bne.n	80035e8 <HAL_I2C_Mem_Write+0x180>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d017      	beq.n	80035e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1aa      	bne.n	8003546 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fd79 	bl	80040ec <I2C_WaitOnBTFFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	2b04      	cmp	r3, #4
 8003606:	d107      	bne.n	8003618 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003616:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e016      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e000      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	00100002 	.word	0x00100002
 8003658:	ffff0000 	.word	0xffff0000

0800365c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08c      	sub	sp, #48	; 0x30
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	817b      	strh	r3, [r7, #10]
 800366e:	460b      	mov	r3, r1
 8003670:	813b      	strh	r3, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800367a:	f7ff f8d3 	bl	8002824 <HAL_GetTick>
 800367e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b20      	cmp	r3, #32
 800368a:	f040 8244 	bne.w	8003b16 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	2319      	movs	r3, #25
 8003694:	2201      	movs	r2, #1
 8003696:	4982      	ldr	r1, [pc, #520]	; (80038a0 <HAL_I2C_Mem_Read+0x244>)
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fbc5 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
 80036a6:	e237      	b.n	8003b18 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_I2C_Mem_Read+0x5a>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e230      	b.n	8003b18 <HAL_I2C_Mem_Read+0x4bc>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d007      	beq.n	80036dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2222      	movs	r2, #34	; 0x22
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800370c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a62      	ldr	r2, [pc, #392]	; (80038a4 <HAL_I2C_Mem_Read+0x248>)
 800371c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800371e:	88f8      	ldrh	r0, [r7, #6]
 8003720:	893a      	ldrh	r2, [r7, #8]
 8003722:	8979      	ldrh	r1, [r7, #10]
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4603      	mov	r3, r0
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa92 	bl	8003c58 <I2C_RequestMemoryRead>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e1ec      	b.n	8003b18 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	d113      	bne.n	800376e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e1c0      	b.n	8003af0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	2b01      	cmp	r3, #1
 8003774:	d11e      	bne.n	80037b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003786:	b672      	cpsid	i
}
 8003788:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037b0:	b662      	cpsie	i
}
 80037b2:	e035      	b.n	8003820 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d11e      	bne.n	80037fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037cc:	b672      	cpsid	i
}
 80037ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037f6:	b662      	cpsie	i
}
 80037f8:	e012      	b.n	8003820 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003808:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003820:	e166      	b.n	8003af0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	2b03      	cmp	r3, #3
 8003828:	f200 811f 	bhi.w	8003a6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003830:	2b01      	cmp	r3, #1
 8003832:	d123      	bne.n	800387c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fc9f 	bl	800417c <I2C_WaitOnRXNEFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e167      	b.n	8003b18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a
 800387a:	e139      	b.n	8003af0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003880:	2b02      	cmp	r3, #2
 8003882:	d152      	bne.n	800392a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	2200      	movs	r2, #0
 800388c:	4906      	ldr	r1, [pc, #24]	; (80038a8 <HAL_I2C_Mem_Read+0x24c>)
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 faca 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e13c      	b.n	8003b18 <HAL_I2C_Mem_Read+0x4bc>
 800389e:	bf00      	nop
 80038a0:	00100002 	.word	0x00100002
 80038a4:	ffff0000 	.word	0xffff0000
 80038a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038ac:	b672      	cpsid	i
}
 80038ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038f2:	b662      	cpsie	i
}
 80038f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003928:	e0e2      	b.n	8003af0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	2200      	movs	r2, #0
 8003932:	497b      	ldr	r1, [pc, #492]	; (8003b20 <HAL_I2C_Mem_Read+0x4c4>)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fa77 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0e9      	b.n	8003b18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003952:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003954:	b672      	cpsid	i
}
 8003956:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800398a:	4b66      	ldr	r3, [pc, #408]	; (8003b24 <HAL_I2C_Mem_Read+0x4c8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	08db      	lsrs	r3, r3, #3
 8003990:	4a65      	ldr	r2, [pc, #404]	; (8003b28 <HAL_I2C_Mem_Read+0x4cc>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0a1a      	lsrs	r2, r3, #8
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	00da      	lsls	r2, r3, #3
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d118      	bne.n	80039e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80039d2:	b662      	cpsie	i
}
 80039d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e09a      	b.n	8003b18 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d1d9      	bne.n	80039a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a32:	b662      	cpsie	i
}
 8003a34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a68:	e042      	b.n	8003af0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fb84 	bl	800417c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e04c      	b.n	8003b18 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d118      	bne.n	8003af0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f47f ae94 	bne.w	8003822 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e000      	b.n	8003b18 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3728      	adds	r7, #40	; 0x28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	00010004 	.word	0x00010004
 8003b24:	20000008 	.word	0x20000008
 8003b28:	14f8b589 	.word	0x14f8b589

08003b2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	4608      	mov	r0, r1
 8003b36:	4611      	mov	r1, r2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	817b      	strh	r3, [r7, #10]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	813b      	strh	r3, [r7, #8]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f960 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00d      	beq.n	8003b8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7c:	d103      	bne.n	8003b86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e05f      	b.n	8003c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b8a:	897b      	ldrh	r3, [r7, #10]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	492d      	ldr	r1, [pc, #180]	; (8003c54 <I2C_RequestMemoryWrite+0x128>)
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f9bb 	bl	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e04c      	b.n	8003c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc8:	6a39      	ldr	r1, [r7, #32]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fa46 	bl	800405c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d107      	bne.n	8003bee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e02b      	b.n	8003c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bf8:	893b      	ldrh	r3, [r7, #8]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	611a      	str	r2, [r3, #16]
 8003c02:	e021      	b.n	8003c48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c04:	893b      	ldrh	r3, [r7, #8]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	6a39      	ldr	r1, [r7, #32]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fa20 	bl	800405c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d107      	bne.n	8003c3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e005      	b.n	8003c4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c3e:	893b      	ldrh	r3, [r7, #8]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	00010002 	.word	0x00010002

08003c58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	817b      	strh	r3, [r7, #10]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	813b      	strh	r3, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f8c2 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb8:	d103      	bne.n	8003cc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0aa      	b.n	8003e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cc6:	897b      	ldrh	r3, [r7, #10]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	4952      	ldr	r1, [pc, #328]	; (8003e24 <I2C_RequestMemoryRead+0x1cc>)
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f91d 	bl	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e097      	b.n	8003e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d04:	6a39      	ldr	r1, [r7, #32]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f9a8 	bl	800405c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d107      	bne.n	8003d2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e076      	b.n	8003e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d105      	bne.n	8003d40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d34:	893b      	ldrh	r3, [r7, #8]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	611a      	str	r2, [r3, #16]
 8003d3e:	e021      	b.n	8003d84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d40:	893b      	ldrh	r3, [r7, #8]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f982 	bl	800405c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e050      	b.n	8003e1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7a:	893b      	ldrh	r3, [r7, #8]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d86:	6a39      	ldr	r1, [r7, #32]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f967 	bl	800405c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d107      	bne.n	8003dac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e035      	b.n	8003e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f82b 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00d      	beq.n	8003df4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de6:	d103      	bne.n	8003df0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e013      	b.n	8003e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003df4:	897b      	ldrh	r3, [r7, #10]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	6a3a      	ldr	r2, [r7, #32]
 8003e08:	4906      	ldr	r1, [pc, #24]	; (8003e24 <I2C_RequestMemoryRead+0x1cc>)
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f886 	bl	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	00010002 	.word	0x00010002

08003e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e38:	e048      	b.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d044      	beq.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe fcef 	bl	8002824 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d139      	bne.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	0c1b      	lsrs	r3, r3, #16
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d10d      	bne.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	43da      	mvns	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	e00c      	b.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	43da      	mvns	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d116      	bne.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e023      	b.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d10d      	bne.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	43da      	mvns	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	e00c      	b.n	8003f0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4013      	ands	r3, r2
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d093      	beq.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2a:	e071      	b.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3a:	d123      	bne.n	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f043 0204 	orr.w	r2, r3, #4
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e067      	b.n	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d041      	beq.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8c:	f7fe fc4a 	bl	8002824 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d136      	bne.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10c      	bne.n	8003fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf14      	ite	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	2300      	moveq	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	e00b      	b.n	8003fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d016      	beq.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	f043 0220 	orr.w	r2, r3, #32
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e021      	b.n	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d10c      	bne.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	43da      	mvns	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4013      	ands	r3, r2
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e00b      	b.n	800404c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	43da      	mvns	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf14      	ite	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2300      	moveq	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	f47f af6d 	bne.w	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004068:	e034      	b.n	80040d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f8e3 	bl	8004236 <I2C_IsAcknowledgeFailed>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e034      	b.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d028      	beq.n	80040d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004082:	f7fe fbcf 	bl	8002824 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11d      	bne.n	80040d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	d016      	beq.n	80040d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e007      	b.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b80      	cmp	r3, #128	; 0x80
 80040e0:	d1c3      	bne.n	800406a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040f8:	e034      	b.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f89b 	bl	8004236 <I2C_IsAcknowledgeFailed>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e034      	b.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d028      	beq.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004112:	f7fe fb87 	bl	8002824 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	429a      	cmp	r2, r3
 8004120:	d302      	bcc.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11d      	bne.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d016      	beq.n	8004164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e007      	b.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b04      	cmp	r3, #4
 8004170:	d1c3      	bne.n	80040fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004188:	e049      	b.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b10      	cmp	r3, #16
 8004196:	d119      	bne.n	80041cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0210 	mvn.w	r2, #16
 80041a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e030      	b.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041cc:	f7fe fb2a 	bl	8002824 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d302      	bcc.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11d      	bne.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d016      	beq.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e007      	b.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d1ae      	bne.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424c:	d11b      	bne.n	8004286 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004256:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f043 0204 	orr.w	r2, r3, #4
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
	...

08004294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e272      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8087 	beq.w	80043c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042b4:	4b92      	ldr	r3, [pc, #584]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d00c      	beq.n	80042da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042c0:	4b8f      	ldr	r3, [pc, #572]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d112      	bne.n	80042f2 <HAL_RCC_OscConfig+0x5e>
 80042cc:	4b8c      	ldr	r3, [pc, #560]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d8:	d10b      	bne.n	80042f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042da:	4b89      	ldr	r3, [pc, #548]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d06c      	beq.n	80043c0 <HAL_RCC_OscConfig+0x12c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d168      	bne.n	80043c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e24c      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fa:	d106      	bne.n	800430a <HAL_RCC_OscConfig+0x76>
 80042fc:	4b80      	ldr	r3, [pc, #512]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a7f      	ldr	r2, [pc, #508]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	e02e      	b.n	8004368 <HAL_RCC_OscConfig+0xd4>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x98>
 8004312:	4b7b      	ldr	r3, [pc, #492]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a7a      	ldr	r2, [pc, #488]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	4b78      	ldr	r3, [pc, #480]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a77      	ldr	r2, [pc, #476]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e01d      	b.n	8004368 <HAL_RCC_OscConfig+0xd4>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0xbc>
 8004336:	4b72      	ldr	r3, [pc, #456]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a71      	ldr	r2, [pc, #452]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 800433c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	4b6f      	ldr	r3, [pc, #444]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6e      	ldr	r2, [pc, #440]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e00b      	b.n	8004368 <HAL_RCC_OscConfig+0xd4>
 8004350:	4b6b      	ldr	r3, [pc, #428]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a6a      	ldr	r2, [pc, #424]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	4b68      	ldr	r3, [pc, #416]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a67      	ldr	r2, [pc, #412]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004366:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d013      	beq.n	8004398 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fe fa58 	bl	8002824 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004378:	f7fe fa54 	bl	8002824 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e200      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	4b5d      	ldr	r3, [pc, #372]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0xe4>
 8004396:	e014      	b.n	80043c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fe fa44 	bl	8002824 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fe fa40 	bl	8002824 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e1ec      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b2:	4b53      	ldr	r3, [pc, #332]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x10c>
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d063      	beq.n	8004496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ce:	4b4c      	ldr	r3, [pc, #304]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00b      	beq.n	80043f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043da:	4b49      	ldr	r3, [pc, #292]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d11c      	bne.n	8004420 <HAL_RCC_OscConfig+0x18c>
 80043e6:	4b46      	ldr	r3, [pc, #280]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f2:	4b43      	ldr	r3, [pc, #268]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_RCC_OscConfig+0x176>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e1c0      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4939      	ldr	r1, [pc, #228]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441e:	e03a      	b.n	8004496 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d020      	beq.n	800446a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004428:	4b36      	ldr	r3, [pc, #216]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442e:	f7fe f9f9 	bl	8002824 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004436:	f7fe f9f5 	bl	8002824 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e1a1      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004448:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004454:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4927      	ldr	r1, [pc, #156]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]
 8004468:	e015      	b.n	8004496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fe f9d8 	bl	8002824 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004478:	f7fe f9d4 	bl	8002824 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e180      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448a:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d03a      	beq.n	8004518 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d019      	beq.n	80044de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044aa:	4b17      	ldr	r3, [pc, #92]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b0:	f7fe f9b8 	bl	8002824 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b8:	f7fe f9b4 	bl	8002824 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e160      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044d6:	2001      	movs	r0, #1
 80044d8:	f000 faba 	bl	8004a50 <RCC_Delay>
 80044dc:	e01c      	b.n	8004518 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044de:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e4:	f7fe f99e 	bl	8002824 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ea:	e00f      	b.n	800450c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ec:	f7fe f99a 	bl	8002824 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d908      	bls.n	800450c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e146      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
 80044fe:	bf00      	nop
 8004500:	40021000 	.word	0x40021000
 8004504:	42420000 	.word	0x42420000
 8004508:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	4b92      	ldr	r3, [pc, #584]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e9      	bne.n	80044ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80a6 	beq.w	8004672 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452a:	4b8b      	ldr	r3, [pc, #556]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10d      	bne.n	8004552 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	4a87      	ldr	r2, [pc, #540]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	61d3      	str	r3, [r2, #28]
 8004542:	4b85      	ldr	r3, [pc, #532]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b82      	ldr	r3, [pc, #520]	; (800475c <HAL_RCC_OscConfig+0x4c8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d118      	bne.n	8004590 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b7f      	ldr	r3, [pc, #508]	; (800475c <HAL_RCC_OscConfig+0x4c8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a7e      	ldr	r2, [pc, #504]	; (800475c <HAL_RCC_OscConfig+0x4c8>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456a:	f7fe f95b 	bl	8002824 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004572:	f7fe f957 	bl	8002824 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b64      	cmp	r3, #100	; 0x64
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e103      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	4b75      	ldr	r3, [pc, #468]	; (800475c <HAL_RCC_OscConfig+0x4c8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x312>
 8004598:	4b6f      	ldr	r3, [pc, #444]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	4a6e      	ldr	r2, [pc, #440]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6213      	str	r3, [r2, #32]
 80045a4:	e02d      	b.n	8004602 <HAL_RCC_OscConfig+0x36e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x334>
 80045ae:	4b6a      	ldr	r3, [pc, #424]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	4a69      	ldr	r2, [pc, #420]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	6213      	str	r3, [r2, #32]
 80045ba:	4b67      	ldr	r3, [pc, #412]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	4a66      	ldr	r2, [pc, #408]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	f023 0304 	bic.w	r3, r3, #4
 80045c4:	6213      	str	r3, [r2, #32]
 80045c6:	e01c      	b.n	8004602 <HAL_RCC_OscConfig+0x36e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	d10c      	bne.n	80045ea <HAL_RCC_OscConfig+0x356>
 80045d0:	4b61      	ldr	r3, [pc, #388]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	4a60      	ldr	r2, [pc, #384]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	6213      	str	r3, [r2, #32]
 80045dc:	4b5e      	ldr	r3, [pc, #376]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4a5d      	ldr	r2, [pc, #372]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6213      	str	r3, [r2, #32]
 80045e8:	e00b      	b.n	8004602 <HAL_RCC_OscConfig+0x36e>
 80045ea:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	4a5a      	ldr	r2, [pc, #360]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	6213      	str	r3, [r2, #32]
 80045f6:	4b58      	ldr	r3, [pc, #352]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a57      	ldr	r2, [pc, #348]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d015      	beq.n	8004636 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460a:	f7fe f90b 	bl	8002824 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fe f907 	bl	8002824 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e0b1      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004628:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ee      	beq.n	8004612 <HAL_RCC_OscConfig+0x37e>
 8004634:	e014      	b.n	8004660 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004636:	f7fe f8f5 	bl	8002824 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463c:	e00a      	b.n	8004654 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463e:	f7fe f8f1 	bl	8002824 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f241 3288 	movw	r2, #5000	; 0x1388
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e09b      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004654:	4b40      	ldr	r3, [pc, #256]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ee      	bne.n	800463e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004666:	4b3c      	ldr	r3, [pc, #240]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	4a3b      	ldr	r2, [pc, #236]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004670:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8087 	beq.w	800478a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800467c:	4b36      	ldr	r3, [pc, #216]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 030c 	and.w	r3, r3, #12
 8004684:	2b08      	cmp	r3, #8
 8004686:	d061      	beq.n	800474c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d146      	bne.n	800471e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004690:	4b33      	ldr	r3, [pc, #204]	; (8004760 <HAL_RCC_OscConfig+0x4cc>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fe f8c5 	bl	8002824 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469e:	f7fe f8c1 	bl	8002824 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e06d      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b0:	4b29      	ldr	r3, [pc, #164]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d108      	bne.n	80046d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	4921      	ldr	r1, [pc, #132]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046d8:	4b1f      	ldr	r3, [pc, #124]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a19      	ldr	r1, [r3, #32]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	430b      	orrs	r3, r1
 80046ea:	491b      	ldr	r1, [pc, #108]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f0:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_RCC_OscConfig+0x4cc>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f6:	f7fe f895 	bl	8002824 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fe f891 	bl	8002824 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e03d      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x46a>
 800471c:	e035      	b.n	800478a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471e:	4b10      	ldr	r3, [pc, #64]	; (8004760 <HAL_RCC_OscConfig+0x4cc>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fe f87e 	bl	8002824 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7fe f87a 	bl	8002824 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e026      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800473e:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCC_OscConfig+0x4c4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x498>
 800474a:	e01e      	b.n	800478a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d107      	bne.n	8004764 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e019      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
 8004758:	40021000 	.word	0x40021000
 800475c:	40007000 	.word	0x40007000
 8004760:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004764:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_RCC_OscConfig+0x500>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	429a      	cmp	r2, r3
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d001      	beq.n	800478a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000

08004798 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0d0      	b.n	800494e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b6a      	ldr	r3, [pc, #424]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d910      	bls.n	80047dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b67      	ldr	r3, [pc, #412]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 0207 	bic.w	r2, r3, #7
 80047c2:	4965      	ldr	r1, [pc, #404]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b63      	ldr	r3, [pc, #396]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0b8      	b.n	800494e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f4:	4b59      	ldr	r3, [pc, #356]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4a58      	ldr	r2, [pc, #352]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800480c:	4b53      	ldr	r3, [pc, #332]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a52      	ldr	r2, [pc, #328]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004816:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004818:	4b50      	ldr	r3, [pc, #320]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	494d      	ldr	r1, [pc, #308]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d040      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	4b47      	ldr	r3, [pc, #284]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d115      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e07f      	b.n	800494e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b41      	ldr	r3, [pc, #260]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e073      	b.n	800494e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3d      	ldr	r3, [pc, #244]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e06b      	b.n	800494e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b39      	ldr	r3, [pc, #228]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4936      	ldr	r1, [pc, #216]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004888:	f7fd ffcc 	bl	8002824 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fd ffc8 	bl	8002824 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e053      	b.n	800494e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2d      	ldr	r3, [pc, #180]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b27      	ldr	r3, [pc, #156]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d210      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 0207 	bic.w	r2, r3, #7
 80048ce:	4922      	ldr	r1, [pc, #136]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b20      	ldr	r3, [pc, #128]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e032      	b.n	800494e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f4:	4b19      	ldr	r3, [pc, #100]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4916      	ldr	r1, [pc, #88]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	490e      	ldr	r1, [pc, #56]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	4313      	orrs	r3, r2
 8004924:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004926:	f000 f821 	bl	800496c <HAL_RCC_GetSysClockFreq>
 800492a:	4602      	mov	r2, r0
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	490a      	ldr	r1, [pc, #40]	; (8004960 <HAL_RCC_ClockConfig+0x1c8>)
 8004938:	5ccb      	ldrb	r3, [r1, r3]
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	4a09      	ldr	r2, [pc, #36]	; (8004964 <HAL_RCC_ClockConfig+0x1cc>)
 8004940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004942:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_RCC_ClockConfig+0x1d0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fd ff2a 	bl	80027a0 <HAL_InitTick>

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40022000 	.word	0x40022000
 800495c:	40021000 	.word	0x40021000
 8004960:	0800bb10 	.word	0x0800bb10
 8004964:	20000008 	.word	0x20000008
 8004968:	2000000c 	.word	0x2000000c

0800496c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004986:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x94>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	2b04      	cmp	r3, #4
 8004994:	d002      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x30>
 8004996:	2b08      	cmp	r3, #8
 8004998:	d003      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x36>
 800499a:	e027      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x98>)
 800499e:	613b      	str	r3, [r7, #16]
      break;
 80049a0:	e027      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	0c9b      	lsrs	r3, r3, #18
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049ac:	5cd3      	ldrb	r3, [r2, r3]
 80049ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d010      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x94>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	0c5b      	lsrs	r3, r3, #17
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	4a11      	ldr	r2, [pc, #68]	; (8004a0c <HAL_RCC_GetSysClockFreq+0xa0>)
 80049c6:	5cd3      	ldrb	r3, [r2, r3]
 80049c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ce:	fb03 f202 	mul.w	r2, r3, r2
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e004      	b.n	80049e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	613b      	str	r3, [r7, #16]
      break;
 80049ea:	e002      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ee:	613b      	str	r3, [r7, #16]
      break;
 80049f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f2:	693b      	ldr	r3, [r7, #16]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000
 8004a04:	007a1200 	.word	0x007a1200
 8004a08:	0800bb28 	.word	0x0800bb28
 8004a0c:	0800bb38 	.word	0x0800bb38
 8004a10:	003d0900 	.word	0x003d0900

08004a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a18:	4b02      	ldr	r3, [pc, #8]	; (8004a24 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr
 8004a24:	20000008 	.word	0x20000008

08004a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a2c:	f7ff fff2 	bl	8004a14 <HAL_RCC_GetHCLKFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4903      	ldr	r1, [pc, #12]	; (8004a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	0800bb20 	.word	0x0800bb20

08004a50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <RCC_Delay+0x34>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <RCC_Delay+0x38>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	0a5b      	lsrs	r3, r3, #9
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a6c:	bf00      	nop
  }
  while (Delay --);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1e5a      	subs	r2, r3, #1
 8004a72:	60fa      	str	r2, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f9      	bne.n	8004a6c <RCC_Delay+0x1c>
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	20000008 	.word	0x20000008
 8004a88:	10624dd3 	.word	0x10624dd3

08004a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e076      	b.n	8004b8c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d108      	bne.n	8004ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aae:	d009      	beq.n	8004ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	61da      	str	r2, [r3, #28]
 8004ab6:	e005      	b.n	8004ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fd fc42 	bl	8002368 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004afa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b48:	ea42 0103 	orr.w	r1, r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	0c1a      	lsrs	r2, r3, #16
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f002 0204 	and.w	r2, r2, #4
 8004b6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_SPI_Transmit+0x22>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e12d      	b.n	8004e12 <HAL_SPI_Transmit+0x27e>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bbe:	f7fd fe31 	bl	8002824 <HAL_GetTick>
 8004bc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d002      	beq.n	8004bda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bd8:	e116      	b.n	8004e08 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_SPI_Transmit+0x52>
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d102      	bne.n	8004bec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bea:	e10d      	b.n	8004e08 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2203      	movs	r2, #3
 8004bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	88fa      	ldrh	r2, [r7, #6]
 8004c0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c32:	d10f      	bne.n	8004c54 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d007      	beq.n	8004c72 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7a:	d14f      	bne.n	8004d1c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_SPI_Transmit+0xf6>
 8004c84:	8afb      	ldrh	r3, [r7, #22]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d142      	bne.n	8004d10 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	1c9a      	adds	r2, r3, #2
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cae:	e02f      	b.n	8004d10 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d112      	bne.n	8004ce4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ce2:	e015      	b.n	8004d10 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ce4:	f7fd fd9e 	bl	8002824 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d803      	bhi.n	8004cfc <HAL_SPI_Transmit+0x168>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d102      	bne.n	8004d02 <HAL_SPI_Transmit+0x16e>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d0e:	e07b      	b.n	8004e08 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ca      	bne.n	8004cb0 <HAL_SPI_Transmit+0x11c>
 8004d1a:	e050      	b.n	8004dbe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_SPI_Transmit+0x196>
 8004d24:	8afb      	ldrh	r3, [r7, #22]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d144      	bne.n	8004db4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d50:	e030      	b.n	8004db4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d113      	bne.n	8004d88 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	7812      	ldrb	r2, [r2, #0]
 8004d6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d86:	e015      	b.n	8004db4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d88:	f7fd fd4c 	bl	8002824 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d803      	bhi.n	8004da0 <HAL_SPI_Transmit+0x20c>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9e:	d102      	bne.n	8004da6 <HAL_SPI_Transmit+0x212>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004db2:	e029      	b.n	8004e08 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1c9      	bne.n	8004d52 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f9f8 	bl	80051b8 <SPI_EndRxTxTransaction>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e003      	b.n	8004e08 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e10:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3720      	adds	r7, #32
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	4613      	mov	r3, r2
 8004e28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_SPI_Transmit_DMA+0x20>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e097      	b.n	8004f6c <HAL_SPI_Transmit_DMA+0x150>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d002      	beq.n	8004e56 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
 8004e52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e54:	e085      	b.n	8004f62 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_SPI_Transmit_DMA+0x46>
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e66:	e07c      	b.n	8004f62 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2203      	movs	r2, #3
 8004e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eae:	d10f      	bne.n	8004ed0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ebe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ece:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed4:	4a27      	ldr	r2, [pc, #156]	; (8004f74 <HAL_SPI_Transmit_DMA+0x158>)
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004edc:	4a26      	ldr	r2, [pc, #152]	; (8004f78 <HAL_SPI_Transmit_DMA+0x15c>)
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee4:	4a25      	ldr	r2, [pc, #148]	; (8004f7c <HAL_SPI_Transmit_DMA+0x160>)
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eec:	2200      	movs	r2, #0
 8004eee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	4619      	mov	r1, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f08:	f7fd fe22 	bl	8002b50 <HAL_DMA_Start_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d008      	beq.n	8004f24 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f043 0210 	orr.w	r2, r3, #16
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004f22:	e01e      	b.n	8004f62 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d007      	beq.n	8004f42 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f40:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0220 	orr.w	r2, r2, #32
 8004f50:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0202 	orr.w	r2, r2, #2
 8004f60:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	0800504b 	.word	0x0800504b
 8004f78:	08004fa5 	.word	0x08004fa5
 8004f7c:	08005067 	.word	0x08005067

08004f80 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb2:	f7fd fc37 	bl	8002824 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d03b      	beq.n	800503e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0220 	bic.w	r2, r2, #32
 8004fd4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0202 	bic.w	r2, r2, #2
 8004fe4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	2164      	movs	r1, #100	; 0x64
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	f000 f8e4 	bl	80051b8 <SPI_EndRxTxTransaction>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f043 0220 	orr.w	r2, r3, #32
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10a      	bne.n	8005020 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2200      	movs	r2, #0
 8005024:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005036:	6978      	ldr	r0, [r7, #20]
 8005038:	f7ff ffab 	bl	8004f92 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800503c:	e002      	b.n	8005044 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7fc f892 	bl	8001168 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff ff91 	bl	8004f80 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0203 	bic.w	r2, r2, #3
 8005082:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	f043 0210 	orr.w	r2, r3, #16
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff ff7a 	bl	8004f92 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050b8:	f7fd fbb4 	bl	8002824 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	4413      	add	r3, r2
 80050c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050c8:	f7fd fbac 	bl	8002824 <HAL_GetTick>
 80050cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050ce:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	015b      	lsls	r3, r3, #5
 80050d4:	0d1b      	lsrs	r3, r3, #20
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	fb02 f303 	mul.w	r3, r2, r3
 80050dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050de:	e054      	b.n	800518a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d050      	beq.n	800518a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050e8:	f7fd fb9c 	bl	8002824 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d902      	bls.n	80050fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d13d      	bne.n	800517a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800510c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005116:	d111      	bne.n	800513c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005120:	d004      	beq.n	800512c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512a:	d107      	bne.n	800513c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800513a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005144:	d10f      	bne.n	8005166 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005164:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e017      	b.n	80051aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	3b01      	subs	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4013      	ands	r3, r2
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d19b      	bne.n	80050e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000008 	.word	0x20000008

080051b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2200      	movs	r2, #0
 80051cc:	2180      	movs	r1, #128	; 0x80
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff ff6a 	bl	80050a8 <SPI_WaitFlagStateUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e000      	b.n	80051ec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e041      	b.n	800528a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fd f90c 	bl	8002438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f000 fbee 	bl	8005a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d001      	beq.n	80052ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e032      	b.n	8005312 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a18      	ldr	r2, [pc, #96]	; (800531c <HAL_TIM_Base_Start+0x88>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <HAL_TIM_Base_Start+0x48>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	d009      	beq.n	80052dc <HAL_TIM_Base_Start+0x48>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a14      	ldr	r2, [pc, #80]	; (8005320 <HAL_TIM_Base_Start+0x8c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <HAL_TIM_Base_Start+0x48>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a13      	ldr	r2, [pc, #76]	; (8005324 <HAL_TIM_Base_Start+0x90>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d111      	bne.n	8005300 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d010      	beq.n	8005310 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fe:	e007      	b.n	8005310 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	40012c00 	.word	0x40012c00
 8005320:	40000400 	.word	0x40000400
 8005324:	40000800 	.word	0x40000800

08005328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d001      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e03a      	b.n	80053b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a18      	ldr	r2, [pc, #96]	; (80053c0 <HAL_TIM_Base_Start_IT+0x98>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00e      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x58>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536a:	d009      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x58>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a14      	ldr	r2, [pc, #80]	; (80053c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x58>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a13      	ldr	r2, [pc, #76]	; (80053c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d111      	bne.n	80053a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b06      	cmp	r3, #6
 8005390:	d010      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0201 	orr.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a2:	e007      	b.n	80053b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800

080053cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e093      	b.n	8005508 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7fd f859 	bl	80024ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005410:	f023 0307 	bic.w	r3, r3, #7
 8005414:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f000 faf7 	bl	8005a14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544e:	f023 0303 	bic.w	r3, r3, #3
 8005452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	4313      	orrs	r3, r2
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800546c:	f023 030c 	bic.w	r3, r3, #12
 8005470:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005478:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800547c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	4313      	orrs	r3, r2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	011a      	lsls	r2, r3, #4
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	031b      	lsls	r3, r3, #12
 800549c:	4313      	orrs	r3, r2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	4313      	orrs	r3, r2
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005520:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005528:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005530:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005538:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d110      	bne.n	8005562 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d102      	bne.n	800554c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005546:	7b7b      	ldrb	r3, [r7, #13]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d001      	beq.n	8005550 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e069      	b.n	8005624 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005560:	e031      	b.n	80055c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d110      	bne.n	800558a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005568:	7bbb      	ldrb	r3, [r7, #14]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d102      	bne.n	8005574 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800556e:	7b3b      	ldrb	r3, [r7, #12]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d001      	beq.n	8005578 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e055      	b.n	8005624 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005588:	e01d      	b.n	80055c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d108      	bne.n	80055a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005590:	7bbb      	ldrb	r3, [r7, #14]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005596:	7b7b      	ldrb	r3, [r7, #13]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d102      	bne.n	80055a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800559c:	7b3b      	ldrb	r3, [r7, #12]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d001      	beq.n	80055a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e03e      	b.n	8005624 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2202      	movs	r2, #2
 80055aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2202      	movs	r2, #2
 80055b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_TIM_Encoder_Start+0xc4>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d008      	beq.n	80055e4 <HAL_TIM_Encoder_Start+0xd4>
 80055d2:	e00f      	b.n	80055f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2201      	movs	r2, #1
 80055da:	2100      	movs	r1, #0
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fb11 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 80055e2:	e016      	b.n	8005612 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2201      	movs	r2, #1
 80055ea:	2104      	movs	r1, #4
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fb09 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 80055f2:	e00e      	b.n	8005612 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2201      	movs	r2, #1
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fb01 	bl	8005c04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2201      	movs	r2, #1
 8005608:	2104      	movs	r1, #4
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fafa 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 8005610:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b02      	cmp	r3, #2
 8005640:	d122      	bne.n	8005688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b02      	cmp	r3, #2
 800564e:	d11b      	bne.n	8005688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0202 	mvn.w	r2, #2
 8005658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9b4 	bl	80059dc <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9a7 	bl	80059ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f9b6 	bl	80059ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b04      	cmp	r3, #4
 8005694:	d122      	bne.n	80056dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d11b      	bne.n	80056dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0204 	mvn.w	r2, #4
 80056ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f98a 	bl	80059dc <HAL_TIM_IC_CaptureCallback>
 80056c8:	e005      	b.n	80056d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f97d 	bl	80059ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f98c 	bl	80059ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d122      	bne.n	8005730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d11b      	bne.n	8005730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0208 	mvn.w	r2, #8
 8005700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2204      	movs	r2, #4
 8005706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f960 	bl	80059dc <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f953 	bl	80059ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f962 	bl	80059ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b10      	cmp	r3, #16
 800573c:	d122      	bne.n	8005784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b10      	cmp	r3, #16
 800574a:	d11b      	bne.n	8005784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0210 	mvn.w	r2, #16
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2208      	movs	r2, #8
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f936 	bl	80059dc <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f929 	bl	80059ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f938 	bl	80059ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b01      	cmp	r3, #1
 8005790:	d10e      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b01      	cmp	r3, #1
 800579e:	d107      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0201 	mvn.w	r2, #1
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fc fad6 	bl	8001d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b80      	cmp	r3, #128	; 0x80
 80057bc:	d10e      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d107      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa9f 	bl	8005d1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d10e      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d107      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f8fc 	bl	8005a00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b20      	cmp	r3, #32
 8005814:	d10e      	bne.n	8005834 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b20      	cmp	r3, #32
 8005822:	d107      	bne.n	8005834 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0220 	mvn.w	r2, #32
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa6a 	bl	8005d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_TIM_ConfigClockSource+0x1c>
 8005854:	2302      	movs	r3, #2
 8005856:	e0b4      	b.n	80059c2 <HAL_TIM_ConfigClockSource+0x186>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005890:	d03e      	beq.n	8005910 <HAL_TIM_ConfigClockSource+0xd4>
 8005892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005896:	f200 8087 	bhi.w	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 800589a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589e:	f000 8086 	beq.w	80059ae <HAL_TIM_ConfigClockSource+0x172>
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a6:	d87f      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b70      	cmp	r3, #112	; 0x70
 80058aa:	d01a      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0xa6>
 80058ac:	2b70      	cmp	r3, #112	; 0x70
 80058ae:	d87b      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b60      	cmp	r3, #96	; 0x60
 80058b2:	d050      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x11a>
 80058b4:	2b60      	cmp	r3, #96	; 0x60
 80058b6:	d877      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b50      	cmp	r3, #80	; 0x50
 80058ba:	d03c      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0xfa>
 80058bc:	2b50      	cmp	r3, #80	; 0x50
 80058be:	d873      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d058      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x13a>
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d86f      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b30      	cmp	r3, #48	; 0x30
 80058ca:	d064      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x15a>
 80058cc:	2b30      	cmp	r3, #48	; 0x30
 80058ce:	d86b      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d060      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x15a>
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d867      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d05c      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x15a>
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d05a      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x15a>
 80058e0:	e062      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058f2:	f000 f968 	bl	8005bc6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	609a      	str	r2, [r3, #8]
      break;
 800590e:	e04f      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005920:	f000 f951 	bl	8005bc6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005932:	609a      	str	r2, [r3, #8]
      break;
 8005934:	e03c      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005942:	461a      	mov	r2, r3
 8005944:	f000 f8c8 	bl	8005ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2150      	movs	r1, #80	; 0x50
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f91f 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 8005954:	e02c      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005962:	461a      	mov	r2, r3
 8005964:	f000 f8e6 	bl	8005b34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2160      	movs	r1, #96	; 0x60
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f90f 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 8005974:	e01c      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005982:	461a      	mov	r2, r3
 8005984:	f000 f8a8 	bl	8005ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2140      	movs	r1, #64	; 0x40
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f8ff 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 8005994:	e00c      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f000 f8f6 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 80059a6:	e003      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
      break;
 80059ac:	e000      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr

080059ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr
	...

08005a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a29      	ldr	r2, [pc, #164]	; (8005acc <TIM_Base_SetConfig+0xb8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <TIM_Base_SetConfig+0x30>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d007      	beq.n	8005a44 <TIM_Base_SetConfig+0x30>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a26      	ldr	r2, [pc, #152]	; (8005ad0 <TIM_Base_SetConfig+0xbc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_Base_SetConfig+0x30>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a25      	ldr	r2, [pc, #148]	; (8005ad4 <TIM_Base_SetConfig+0xc0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d108      	bne.n	8005a56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <TIM_Base_SetConfig+0xb8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00b      	beq.n	8005a76 <TIM_Base_SetConfig+0x62>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a64:	d007      	beq.n	8005a76 <TIM_Base_SetConfig+0x62>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a19      	ldr	r2, [pc, #100]	; (8005ad0 <TIM_Base_SetConfig+0xbc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <TIM_Base_SetConfig+0x62>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <TIM_Base_SetConfig+0xc0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d108      	bne.n	8005a88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a07      	ldr	r2, [pc, #28]	; (8005acc <TIM_Base_SetConfig+0xb8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d103      	bne.n	8005abc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	615a      	str	r2, [r3, #20]
}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800

08005ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f023 0201 	bic.w	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f023 030a 	bic.w	r3, r3, #10
 8005b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0210 	bic.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	031b      	lsls	r3, r3, #12
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	621a      	str	r2, [r3, #32]
}
 8005b88:	bf00      	nop
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr

08005b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f043 0307 	orr.w	r3, r3, #7
 8005bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	609a      	str	r2, [r3, #8]
}
 8005bbc:	bf00      	nop
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr

08005bc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b087      	sub	sp, #28
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005be0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	021a      	lsls	r2, r3, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	609a      	str	r2, [r3, #8]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	2201      	movs	r2, #1
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	43db      	mvns	r3, r3
 8005c26:	401a      	ands	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e046      	b.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a16      	ldr	r2, [pc, #88]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb0:	d009      	beq.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a12      	ldr	r2, [pc, #72]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d004      	beq.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800

08005d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bc80      	pop	{r7}
 8005d18:	4770      	bx	lr

08005d1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr

08005d2c <__cvt>:
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d32:	461f      	mov	r7, r3
 8005d34:	bfbb      	ittet	lt
 8005d36:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005d3a:	461f      	movlt	r7, r3
 8005d3c:	2300      	movge	r3, #0
 8005d3e:	232d      	movlt	r3, #45	; 0x2d
 8005d40:	b088      	sub	sp, #32
 8005d42:	4614      	mov	r4, r2
 8005d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d46:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d48:	7013      	strb	r3, [r2, #0]
 8005d4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d4c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005d50:	f023 0820 	bic.w	r8, r3, #32
 8005d54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d58:	d005      	beq.n	8005d66 <__cvt+0x3a>
 8005d5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d5e:	d100      	bne.n	8005d62 <__cvt+0x36>
 8005d60:	3501      	adds	r5, #1
 8005d62:	2302      	movs	r3, #2
 8005d64:	e000      	b.n	8005d68 <__cvt+0x3c>
 8005d66:	2303      	movs	r3, #3
 8005d68:	aa07      	add	r2, sp, #28
 8005d6a:	9204      	str	r2, [sp, #16]
 8005d6c:	aa06      	add	r2, sp, #24
 8005d6e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d72:	e9cd 3500 	strd	r3, r5, [sp]
 8005d76:	4622      	mov	r2, r4
 8005d78:	463b      	mov	r3, r7
 8005d7a:	f000 fe71 	bl	8006a60 <_dtoa_r>
 8005d7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d82:	4606      	mov	r6, r0
 8005d84:	d102      	bne.n	8005d8c <__cvt+0x60>
 8005d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d88:	07db      	lsls	r3, r3, #31
 8005d8a:	d522      	bpl.n	8005dd2 <__cvt+0xa6>
 8005d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d90:	eb06 0905 	add.w	r9, r6, r5
 8005d94:	d110      	bne.n	8005db8 <__cvt+0x8c>
 8005d96:	7833      	ldrb	r3, [r6, #0]
 8005d98:	2b30      	cmp	r3, #48	; 0x30
 8005d9a:	d10a      	bne.n	8005db2 <__cvt+0x86>
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2300      	movs	r3, #0
 8005da0:	4620      	mov	r0, r4
 8005da2:	4639      	mov	r1, r7
 8005da4:	f7fa fe00 	bl	80009a8 <__aeabi_dcmpeq>
 8005da8:	b918      	cbnz	r0, 8005db2 <__cvt+0x86>
 8005daa:	f1c5 0501 	rsb	r5, r5, #1
 8005dae:	f8ca 5000 	str.w	r5, [sl]
 8005db2:	f8da 3000 	ldr.w	r3, [sl]
 8005db6:	4499      	add	r9, r3
 8005db8:	2200      	movs	r2, #0
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	f7fa fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8005dc4:	b108      	cbz	r0, 8005dca <__cvt+0x9e>
 8005dc6:	f8cd 901c 	str.w	r9, [sp, #28]
 8005dca:	2230      	movs	r2, #48	; 0x30
 8005dcc:	9b07      	ldr	r3, [sp, #28]
 8005dce:	454b      	cmp	r3, r9
 8005dd0:	d307      	bcc.n	8005de2 <__cvt+0xb6>
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	9b07      	ldr	r3, [sp, #28]
 8005dd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005dd8:	1b9b      	subs	r3, r3, r6
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	b008      	add	sp, #32
 8005dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	9107      	str	r1, [sp, #28]
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e7f0      	b.n	8005dcc <__cvt+0xa0>

08005dea <__exponent>:
 8005dea:	4603      	mov	r3, r0
 8005dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dee:	2900      	cmp	r1, #0
 8005df0:	f803 2b02 	strb.w	r2, [r3], #2
 8005df4:	bfb6      	itet	lt
 8005df6:	222d      	movlt	r2, #45	; 0x2d
 8005df8:	222b      	movge	r2, #43	; 0x2b
 8005dfa:	4249      	neglt	r1, r1
 8005dfc:	2909      	cmp	r1, #9
 8005dfe:	7042      	strb	r2, [r0, #1]
 8005e00:	dd2a      	ble.n	8005e58 <__exponent+0x6e>
 8005e02:	f10d 0207 	add.w	r2, sp, #7
 8005e06:	4617      	mov	r7, r2
 8005e08:	260a      	movs	r6, #10
 8005e0a:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e0e:	4694      	mov	ip, r2
 8005e10:	fb06 1415 	mls	r4, r6, r5, r1
 8005e14:	3430      	adds	r4, #48	; 0x30
 8005e16:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	2c63      	cmp	r4, #99	; 0x63
 8005e1e:	4629      	mov	r1, r5
 8005e20:	f102 32ff 	add.w	r2, r2, #4294967295
 8005e24:	dcf1      	bgt.n	8005e0a <__exponent+0x20>
 8005e26:	3130      	adds	r1, #48	; 0x30
 8005e28:	f1ac 0402 	sub.w	r4, ip, #2
 8005e2c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e30:	4622      	mov	r2, r4
 8005e32:	1c41      	adds	r1, r0, #1
 8005e34:	42ba      	cmp	r2, r7
 8005e36:	d30a      	bcc.n	8005e4e <__exponent+0x64>
 8005e38:	f10d 0209 	add.w	r2, sp, #9
 8005e3c:	eba2 020c 	sub.w	r2, r2, ip
 8005e40:	42bc      	cmp	r4, r7
 8005e42:	bf88      	it	hi
 8005e44:	2200      	movhi	r2, #0
 8005e46:	4413      	add	r3, r2
 8005e48:	1a18      	subs	r0, r3, r0
 8005e4a:	b003      	add	sp, #12
 8005e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e4e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e52:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005e56:	e7ed      	b.n	8005e34 <__exponent+0x4a>
 8005e58:	2330      	movs	r3, #48	; 0x30
 8005e5a:	3130      	adds	r1, #48	; 0x30
 8005e5c:	7083      	strb	r3, [r0, #2]
 8005e5e:	70c1      	strb	r1, [r0, #3]
 8005e60:	1d03      	adds	r3, r0, #4
 8005e62:	e7f1      	b.n	8005e48 <__exponent+0x5e>

08005e64 <_printf_float>:
 8005e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	b091      	sub	sp, #68	; 0x44
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005e70:	4616      	mov	r6, r2
 8005e72:	461f      	mov	r7, r3
 8005e74:	4605      	mov	r5, r0
 8005e76:	f000 fce5 	bl	8006844 <_localeconv_r>
 8005e7a:	6803      	ldr	r3, [r0, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e80:	f7fa f966 	bl	8000150 <strlen>
 8005e84:	2300      	movs	r3, #0
 8005e86:	930e      	str	r3, [sp, #56]	; 0x38
 8005e88:	f8d8 3000 	ldr.w	r3, [r8]
 8005e8c:	900a      	str	r0, [sp, #40]	; 0x28
 8005e8e:	3307      	adds	r3, #7
 8005e90:	f023 0307 	bic.w	r3, r3, #7
 8005e94:	f103 0208 	add.w	r2, r3, #8
 8005e98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e9c:	f8d4 b000 	ldr.w	fp, [r4]
 8005ea0:	f8c8 2000 	str.w	r2, [r8]
 8005ea4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	4643      	mov	r3, r8
 8005eac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005eb0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005eb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eba:	4650      	mov	r0, sl
 8005ebc:	4b9c      	ldr	r3, [pc, #624]	; (8006130 <_printf_float+0x2cc>)
 8005ebe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ec0:	f7fa fda4 	bl	8000a0c <__aeabi_dcmpun>
 8005ec4:	bb70      	cbnz	r0, 8005f24 <_printf_float+0xc0>
 8005ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eca:	4650      	mov	r0, sl
 8005ecc:	4b98      	ldr	r3, [pc, #608]	; (8006130 <_printf_float+0x2cc>)
 8005ece:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ed0:	f7fa fd7e 	bl	80009d0 <__aeabi_dcmple>
 8005ed4:	bb30      	cbnz	r0, 8005f24 <_printf_float+0xc0>
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4650      	mov	r0, sl
 8005edc:	4641      	mov	r1, r8
 8005ede:	f7fa fd6d 	bl	80009bc <__aeabi_dcmplt>
 8005ee2:	b110      	cbz	r0, 8005eea <_printf_float+0x86>
 8005ee4:	232d      	movs	r3, #45	; 0x2d
 8005ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eea:	4a92      	ldr	r2, [pc, #584]	; (8006134 <_printf_float+0x2d0>)
 8005eec:	4b92      	ldr	r3, [pc, #584]	; (8006138 <_printf_float+0x2d4>)
 8005eee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005ef2:	bf94      	ite	ls
 8005ef4:	4690      	movls	r8, r2
 8005ef6:	4698      	movhi	r8, r3
 8005ef8:	2303      	movs	r3, #3
 8005efa:	f04f 0a00 	mov.w	sl, #0
 8005efe:	6123      	str	r3, [r4, #16]
 8005f00:	f02b 0304 	bic.w	r3, fp, #4
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	4633      	mov	r3, r6
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	9700      	str	r7, [sp, #0]
 8005f0e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005f10:	f000 f9d6 	bl	80062c0 <_printf_common>
 8005f14:	3001      	adds	r0, #1
 8005f16:	f040 8090 	bne.w	800603a <_printf_float+0x1d6>
 8005f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1e:	b011      	add	sp, #68	; 0x44
 8005f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f24:	4652      	mov	r2, sl
 8005f26:	4643      	mov	r3, r8
 8005f28:	4650      	mov	r0, sl
 8005f2a:	4641      	mov	r1, r8
 8005f2c:	f7fa fd6e 	bl	8000a0c <__aeabi_dcmpun>
 8005f30:	b148      	cbz	r0, 8005f46 <_printf_float+0xe2>
 8005f32:	f1b8 0f00 	cmp.w	r8, #0
 8005f36:	bfb8      	it	lt
 8005f38:	232d      	movlt	r3, #45	; 0x2d
 8005f3a:	4a80      	ldr	r2, [pc, #512]	; (800613c <_printf_float+0x2d8>)
 8005f3c:	bfb8      	it	lt
 8005f3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f42:	4b7f      	ldr	r3, [pc, #508]	; (8006140 <_printf_float+0x2dc>)
 8005f44:	e7d3      	b.n	8005eee <_printf_float+0x8a>
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	d142      	bne.n	8005fd6 <_printf_float+0x172>
 8005f50:	2306      	movs	r3, #6
 8005f52:	6063      	str	r3, [r4, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	9206      	str	r2, [sp, #24]
 8005f58:	aa0e      	add	r2, sp, #56	; 0x38
 8005f5a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005f5e:	aa0d      	add	r2, sp, #52	; 0x34
 8005f60:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005f64:	9203      	str	r2, [sp, #12]
 8005f66:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005f6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	6863      	ldr	r3, [r4, #4]
 8005f72:	4652      	mov	r2, sl
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4628      	mov	r0, r5
 8005f78:	4643      	mov	r3, r8
 8005f7a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005f7c:	f7ff fed6 	bl	8005d2c <__cvt>
 8005f80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f82:	4680      	mov	r8, r0
 8005f84:	2947      	cmp	r1, #71	; 0x47
 8005f86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f88:	d108      	bne.n	8005f9c <_printf_float+0x138>
 8005f8a:	1cc8      	adds	r0, r1, #3
 8005f8c:	db02      	blt.n	8005f94 <_printf_float+0x130>
 8005f8e:	6863      	ldr	r3, [r4, #4]
 8005f90:	4299      	cmp	r1, r3
 8005f92:	dd40      	ble.n	8006016 <_printf_float+0x1b2>
 8005f94:	f1a9 0902 	sub.w	r9, r9, #2
 8005f98:	fa5f f989 	uxtb.w	r9, r9
 8005f9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005fa0:	d81f      	bhi.n	8005fe2 <_printf_float+0x17e>
 8005fa2:	464a      	mov	r2, r9
 8005fa4:	3901      	subs	r1, #1
 8005fa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005faa:	910d      	str	r1, [sp, #52]	; 0x34
 8005fac:	f7ff ff1d 	bl	8005dea <__exponent>
 8005fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fb2:	4682      	mov	sl, r0
 8005fb4:	1813      	adds	r3, r2, r0
 8005fb6:	2a01      	cmp	r2, #1
 8005fb8:	6123      	str	r3, [r4, #16]
 8005fba:	dc02      	bgt.n	8005fc2 <_printf_float+0x15e>
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	07d2      	lsls	r2, r2, #31
 8005fc0:	d501      	bpl.n	8005fc6 <_printf_float+0x162>
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	6123      	str	r3, [r4, #16]
 8005fc6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d09b      	beq.n	8005f06 <_printf_float+0xa2>
 8005fce:	232d      	movs	r3, #45	; 0x2d
 8005fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd4:	e797      	b.n	8005f06 <_printf_float+0xa2>
 8005fd6:	2947      	cmp	r1, #71	; 0x47
 8005fd8:	d1bc      	bne.n	8005f54 <_printf_float+0xf0>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1ba      	bne.n	8005f54 <_printf_float+0xf0>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e7b7      	b.n	8005f52 <_printf_float+0xee>
 8005fe2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005fe6:	d118      	bne.n	800601a <_printf_float+0x1b6>
 8005fe8:	2900      	cmp	r1, #0
 8005fea:	6863      	ldr	r3, [r4, #4]
 8005fec:	dd0b      	ble.n	8006006 <_printf_float+0x1a2>
 8005fee:	6121      	str	r1, [r4, #16]
 8005ff0:	b913      	cbnz	r3, 8005ff8 <_printf_float+0x194>
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	07d0      	lsls	r0, r2, #31
 8005ff6:	d502      	bpl.n	8005ffe <_printf_float+0x19a>
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	440b      	add	r3, r1
 8005ffc:	6123      	str	r3, [r4, #16]
 8005ffe:	f04f 0a00 	mov.w	sl, #0
 8006002:	65a1      	str	r1, [r4, #88]	; 0x58
 8006004:	e7df      	b.n	8005fc6 <_printf_float+0x162>
 8006006:	b913      	cbnz	r3, 800600e <_printf_float+0x1aa>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	07d2      	lsls	r2, r2, #31
 800600c:	d501      	bpl.n	8006012 <_printf_float+0x1ae>
 800600e:	3302      	adds	r3, #2
 8006010:	e7f4      	b.n	8005ffc <_printf_float+0x198>
 8006012:	2301      	movs	r3, #1
 8006014:	e7f2      	b.n	8005ffc <_printf_float+0x198>
 8006016:	f04f 0967 	mov.w	r9, #103	; 0x67
 800601a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800601c:	4299      	cmp	r1, r3
 800601e:	db05      	blt.n	800602c <_printf_float+0x1c8>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	6121      	str	r1, [r4, #16]
 8006024:	07d8      	lsls	r0, r3, #31
 8006026:	d5ea      	bpl.n	8005ffe <_printf_float+0x19a>
 8006028:	1c4b      	adds	r3, r1, #1
 800602a:	e7e7      	b.n	8005ffc <_printf_float+0x198>
 800602c:	2900      	cmp	r1, #0
 800602e:	bfcc      	ite	gt
 8006030:	2201      	movgt	r2, #1
 8006032:	f1c1 0202 	rsble	r2, r1, #2
 8006036:	4413      	add	r3, r2
 8006038:	e7e0      	b.n	8005ffc <_printf_float+0x198>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	055a      	lsls	r2, r3, #21
 800603e:	d407      	bmi.n	8006050 <_printf_float+0x1ec>
 8006040:	6923      	ldr	r3, [r4, #16]
 8006042:	4642      	mov	r2, r8
 8006044:	4631      	mov	r1, r6
 8006046:	4628      	mov	r0, r5
 8006048:	47b8      	blx	r7
 800604a:	3001      	adds	r0, #1
 800604c:	d12b      	bne.n	80060a6 <_printf_float+0x242>
 800604e:	e764      	b.n	8005f1a <_printf_float+0xb6>
 8006050:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006054:	f240 80dd 	bls.w	8006212 <_printf_float+0x3ae>
 8006058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800605c:	2200      	movs	r2, #0
 800605e:	2300      	movs	r3, #0
 8006060:	f7fa fca2 	bl	80009a8 <__aeabi_dcmpeq>
 8006064:	2800      	cmp	r0, #0
 8006066:	d033      	beq.n	80060d0 <_printf_float+0x26c>
 8006068:	2301      	movs	r3, #1
 800606a:	4631      	mov	r1, r6
 800606c:	4628      	mov	r0, r5
 800606e:	4a35      	ldr	r2, [pc, #212]	; (8006144 <_printf_float+0x2e0>)
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	f43f af51 	beq.w	8005f1a <_printf_float+0xb6>
 8006078:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800607c:	429a      	cmp	r2, r3
 800607e:	db02      	blt.n	8006086 <_printf_float+0x222>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	07d8      	lsls	r0, r3, #31
 8006084:	d50f      	bpl.n	80060a6 <_printf_float+0x242>
 8006086:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800608a:	4631      	mov	r1, r6
 800608c:	4628      	mov	r0, r5
 800608e:	47b8      	blx	r7
 8006090:	3001      	adds	r0, #1
 8006092:	f43f af42 	beq.w	8005f1a <_printf_float+0xb6>
 8006096:	f04f 0800 	mov.w	r8, #0
 800609a:	f104 091a 	add.w	r9, r4, #26
 800609e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a0:	3b01      	subs	r3, #1
 80060a2:	4543      	cmp	r3, r8
 80060a4:	dc09      	bgt.n	80060ba <_printf_float+0x256>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	079b      	lsls	r3, r3, #30
 80060aa:	f100 8104 	bmi.w	80062b6 <_printf_float+0x452>
 80060ae:	68e0      	ldr	r0, [r4, #12]
 80060b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060b2:	4298      	cmp	r0, r3
 80060b4:	bfb8      	it	lt
 80060b6:	4618      	movlt	r0, r3
 80060b8:	e731      	b.n	8005f1e <_printf_float+0xba>
 80060ba:	2301      	movs	r3, #1
 80060bc:	464a      	mov	r2, r9
 80060be:	4631      	mov	r1, r6
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b8      	blx	r7
 80060c4:	3001      	adds	r0, #1
 80060c6:	f43f af28 	beq.w	8005f1a <_printf_float+0xb6>
 80060ca:	f108 0801 	add.w	r8, r8, #1
 80060ce:	e7e6      	b.n	800609e <_printf_float+0x23a>
 80060d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	dc38      	bgt.n	8006148 <_printf_float+0x2e4>
 80060d6:	2301      	movs	r3, #1
 80060d8:	4631      	mov	r1, r6
 80060da:	4628      	mov	r0, r5
 80060dc:	4a19      	ldr	r2, [pc, #100]	; (8006144 <_printf_float+0x2e0>)
 80060de:	47b8      	blx	r7
 80060e0:	3001      	adds	r0, #1
 80060e2:	f43f af1a 	beq.w	8005f1a <_printf_float+0xb6>
 80060e6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80060ea:	4313      	orrs	r3, r2
 80060ec:	d102      	bne.n	80060f4 <_printf_float+0x290>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	07d9      	lsls	r1, r3, #31
 80060f2:	d5d8      	bpl.n	80060a6 <_printf_float+0x242>
 80060f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060f8:	4631      	mov	r1, r6
 80060fa:	4628      	mov	r0, r5
 80060fc:	47b8      	blx	r7
 80060fe:	3001      	adds	r0, #1
 8006100:	f43f af0b 	beq.w	8005f1a <_printf_float+0xb6>
 8006104:	f04f 0900 	mov.w	r9, #0
 8006108:	f104 0a1a 	add.w	sl, r4, #26
 800610c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800610e:	425b      	negs	r3, r3
 8006110:	454b      	cmp	r3, r9
 8006112:	dc01      	bgt.n	8006118 <_printf_float+0x2b4>
 8006114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006116:	e794      	b.n	8006042 <_printf_float+0x1de>
 8006118:	2301      	movs	r3, #1
 800611a:	4652      	mov	r2, sl
 800611c:	4631      	mov	r1, r6
 800611e:	4628      	mov	r0, r5
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	f43f aef9 	beq.w	8005f1a <_printf_float+0xb6>
 8006128:	f109 0901 	add.w	r9, r9, #1
 800612c:	e7ee      	b.n	800610c <_printf_float+0x2a8>
 800612e:	bf00      	nop
 8006130:	7fefffff 	.word	0x7fefffff
 8006134:	0800bb3a 	.word	0x0800bb3a
 8006138:	0800bb3e 	.word	0x0800bb3e
 800613c:	0800bb42 	.word	0x0800bb42
 8006140:	0800bb46 	.word	0x0800bb46
 8006144:	0800bb4a 	.word	0x0800bb4a
 8006148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800614a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800614c:	429a      	cmp	r2, r3
 800614e:	bfa8      	it	ge
 8006150:	461a      	movge	r2, r3
 8006152:	2a00      	cmp	r2, #0
 8006154:	4691      	mov	r9, r2
 8006156:	dc37      	bgt.n	80061c8 <_printf_float+0x364>
 8006158:	f04f 0b00 	mov.w	fp, #0
 800615c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006160:	f104 021a 	add.w	r2, r4, #26
 8006164:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006168:	ebaa 0309 	sub.w	r3, sl, r9
 800616c:	455b      	cmp	r3, fp
 800616e:	dc33      	bgt.n	80061d8 <_printf_float+0x374>
 8006170:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006174:	429a      	cmp	r2, r3
 8006176:	db3b      	blt.n	80061f0 <_printf_float+0x38c>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	07da      	lsls	r2, r3, #31
 800617c:	d438      	bmi.n	80061f0 <_printf_float+0x38c>
 800617e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006182:	eba2 0903 	sub.w	r9, r2, r3
 8006186:	eba2 020a 	sub.w	r2, r2, sl
 800618a:	4591      	cmp	r9, r2
 800618c:	bfa8      	it	ge
 800618e:	4691      	movge	r9, r2
 8006190:	f1b9 0f00 	cmp.w	r9, #0
 8006194:	dc34      	bgt.n	8006200 <_printf_float+0x39c>
 8006196:	f04f 0800 	mov.w	r8, #0
 800619a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800619e:	f104 0a1a 	add.w	sl, r4, #26
 80061a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	eba3 0309 	sub.w	r3, r3, r9
 80061ac:	4543      	cmp	r3, r8
 80061ae:	f77f af7a 	ble.w	80060a6 <_printf_float+0x242>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4652      	mov	r2, sl
 80061b6:	4631      	mov	r1, r6
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b8      	blx	r7
 80061bc:	3001      	adds	r0, #1
 80061be:	f43f aeac 	beq.w	8005f1a <_printf_float+0xb6>
 80061c2:	f108 0801 	add.w	r8, r8, #1
 80061c6:	e7ec      	b.n	80061a2 <_printf_float+0x33e>
 80061c8:	4613      	mov	r3, r2
 80061ca:	4631      	mov	r1, r6
 80061cc:	4642      	mov	r2, r8
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	d1c0      	bne.n	8006158 <_printf_float+0x2f4>
 80061d6:	e6a0      	b.n	8005f1a <_printf_float+0xb6>
 80061d8:	2301      	movs	r3, #1
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	920b      	str	r2, [sp, #44]	; 0x2c
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	f43f ae99 	beq.w	8005f1a <_printf_float+0xb6>
 80061e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061ea:	f10b 0b01 	add.w	fp, fp, #1
 80061ee:	e7b9      	b.n	8006164 <_printf_float+0x300>
 80061f0:	4631      	mov	r1, r6
 80061f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b8      	blx	r7
 80061fa:	3001      	adds	r0, #1
 80061fc:	d1bf      	bne.n	800617e <_printf_float+0x31a>
 80061fe:	e68c      	b.n	8005f1a <_printf_float+0xb6>
 8006200:	464b      	mov	r3, r9
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	eb08 020a 	add.w	r2, r8, sl
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	d1c2      	bne.n	8006196 <_printf_float+0x332>
 8006210:	e683      	b.n	8005f1a <_printf_float+0xb6>
 8006212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006214:	2a01      	cmp	r2, #1
 8006216:	dc01      	bgt.n	800621c <_printf_float+0x3b8>
 8006218:	07db      	lsls	r3, r3, #31
 800621a:	d539      	bpl.n	8006290 <_printf_float+0x42c>
 800621c:	2301      	movs	r3, #1
 800621e:	4642      	mov	r2, r8
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f ae77 	beq.w	8005f1a <_printf_float+0xb6>
 800622c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006230:	4631      	mov	r1, r6
 8006232:	4628      	mov	r0, r5
 8006234:	47b8      	blx	r7
 8006236:	3001      	adds	r0, #1
 8006238:	f43f ae6f 	beq.w	8005f1a <_printf_float+0xb6>
 800623c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006240:	2200      	movs	r2, #0
 8006242:	2300      	movs	r3, #0
 8006244:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006248:	f7fa fbae 	bl	80009a8 <__aeabi_dcmpeq>
 800624c:	b9d8      	cbnz	r0, 8006286 <_printf_float+0x422>
 800624e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006252:	f108 0201 	add.w	r2, r8, #1
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	d10e      	bne.n	800627e <_printf_float+0x41a>
 8006260:	e65b      	b.n	8005f1a <_printf_float+0xb6>
 8006262:	2301      	movs	r3, #1
 8006264:	464a      	mov	r2, r9
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f ae54 	beq.w	8005f1a <_printf_float+0xb6>
 8006272:	f108 0801 	add.w	r8, r8, #1
 8006276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006278:	3b01      	subs	r3, #1
 800627a:	4543      	cmp	r3, r8
 800627c:	dcf1      	bgt.n	8006262 <_printf_float+0x3fe>
 800627e:	4653      	mov	r3, sl
 8006280:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006284:	e6de      	b.n	8006044 <_printf_float+0x1e0>
 8006286:	f04f 0800 	mov.w	r8, #0
 800628a:	f104 091a 	add.w	r9, r4, #26
 800628e:	e7f2      	b.n	8006276 <_printf_float+0x412>
 8006290:	2301      	movs	r3, #1
 8006292:	4642      	mov	r2, r8
 8006294:	e7df      	b.n	8006256 <_printf_float+0x3f2>
 8006296:	2301      	movs	r3, #1
 8006298:	464a      	mov	r2, r9
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f ae3a 	beq.w	8005f1a <_printf_float+0xb6>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	68e3      	ldr	r3, [r4, #12]
 80062ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80062ae:	1a5b      	subs	r3, r3, r1
 80062b0:	4543      	cmp	r3, r8
 80062b2:	dcf0      	bgt.n	8006296 <_printf_float+0x432>
 80062b4:	e6fb      	b.n	80060ae <_printf_float+0x24a>
 80062b6:	f04f 0800 	mov.w	r8, #0
 80062ba:	f104 0919 	add.w	r9, r4, #25
 80062be:	e7f4      	b.n	80062aa <_printf_float+0x446>

080062c0 <_printf_common>:
 80062c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	4616      	mov	r6, r2
 80062c6:	4699      	mov	r9, r3
 80062c8:	688a      	ldr	r2, [r1, #8]
 80062ca:	690b      	ldr	r3, [r1, #16]
 80062cc:	4607      	mov	r7, r0
 80062ce:	4293      	cmp	r3, r2
 80062d0:	bfb8      	it	lt
 80062d2:	4613      	movlt	r3, r2
 80062d4:	6033      	str	r3, [r6, #0]
 80062d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062da:	460c      	mov	r4, r1
 80062dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062e0:	b10a      	cbz	r2, 80062e6 <_printf_common+0x26>
 80062e2:	3301      	adds	r3, #1
 80062e4:	6033      	str	r3, [r6, #0]
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	0699      	lsls	r1, r3, #26
 80062ea:	bf42      	ittt	mi
 80062ec:	6833      	ldrmi	r3, [r6, #0]
 80062ee:	3302      	addmi	r3, #2
 80062f0:	6033      	strmi	r3, [r6, #0]
 80062f2:	6825      	ldr	r5, [r4, #0]
 80062f4:	f015 0506 	ands.w	r5, r5, #6
 80062f8:	d106      	bne.n	8006308 <_printf_common+0x48>
 80062fa:	f104 0a19 	add.w	sl, r4, #25
 80062fe:	68e3      	ldr	r3, [r4, #12]
 8006300:	6832      	ldr	r2, [r6, #0]
 8006302:	1a9b      	subs	r3, r3, r2
 8006304:	42ab      	cmp	r3, r5
 8006306:	dc2b      	bgt.n	8006360 <_printf_common+0xa0>
 8006308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800630c:	1e13      	subs	r3, r2, #0
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	bf18      	it	ne
 8006312:	2301      	movne	r3, #1
 8006314:	0692      	lsls	r2, r2, #26
 8006316:	d430      	bmi.n	800637a <_printf_common+0xba>
 8006318:	4649      	mov	r1, r9
 800631a:	4638      	mov	r0, r7
 800631c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006320:	47c0      	blx	r8
 8006322:	3001      	adds	r0, #1
 8006324:	d023      	beq.n	800636e <_printf_common+0xae>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	6922      	ldr	r2, [r4, #16]
 800632a:	f003 0306 	and.w	r3, r3, #6
 800632e:	2b04      	cmp	r3, #4
 8006330:	bf14      	ite	ne
 8006332:	2500      	movne	r5, #0
 8006334:	6833      	ldreq	r3, [r6, #0]
 8006336:	f04f 0600 	mov.w	r6, #0
 800633a:	bf08      	it	eq
 800633c:	68e5      	ldreq	r5, [r4, #12]
 800633e:	f104 041a 	add.w	r4, r4, #26
 8006342:	bf08      	it	eq
 8006344:	1aed      	subeq	r5, r5, r3
 8006346:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800634a:	bf08      	it	eq
 800634c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006350:	4293      	cmp	r3, r2
 8006352:	bfc4      	itt	gt
 8006354:	1a9b      	subgt	r3, r3, r2
 8006356:	18ed      	addgt	r5, r5, r3
 8006358:	42b5      	cmp	r5, r6
 800635a:	d11a      	bne.n	8006392 <_printf_common+0xd2>
 800635c:	2000      	movs	r0, #0
 800635e:	e008      	b.n	8006372 <_printf_common+0xb2>
 8006360:	2301      	movs	r3, #1
 8006362:	4652      	mov	r2, sl
 8006364:	4649      	mov	r1, r9
 8006366:	4638      	mov	r0, r7
 8006368:	47c0      	blx	r8
 800636a:	3001      	adds	r0, #1
 800636c:	d103      	bne.n	8006376 <_printf_common+0xb6>
 800636e:	f04f 30ff 	mov.w	r0, #4294967295
 8006372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006376:	3501      	adds	r5, #1
 8006378:	e7c1      	b.n	80062fe <_printf_common+0x3e>
 800637a:	2030      	movs	r0, #48	; 0x30
 800637c:	18e1      	adds	r1, r4, r3
 800637e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006388:	4422      	add	r2, r4
 800638a:	3302      	adds	r3, #2
 800638c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006390:	e7c2      	b.n	8006318 <_printf_common+0x58>
 8006392:	2301      	movs	r3, #1
 8006394:	4622      	mov	r2, r4
 8006396:	4649      	mov	r1, r9
 8006398:	4638      	mov	r0, r7
 800639a:	47c0      	blx	r8
 800639c:	3001      	adds	r0, #1
 800639e:	d0e6      	beq.n	800636e <_printf_common+0xae>
 80063a0:	3601      	adds	r6, #1
 80063a2:	e7d9      	b.n	8006358 <_printf_common+0x98>

080063a4 <_printf_i>:
 80063a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	7e0f      	ldrb	r7, [r1, #24]
 80063aa:	4691      	mov	r9, r2
 80063ac:	2f78      	cmp	r7, #120	; 0x78
 80063ae:	4680      	mov	r8, r0
 80063b0:	460c      	mov	r4, r1
 80063b2:	469a      	mov	sl, r3
 80063b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063ba:	d807      	bhi.n	80063cc <_printf_i+0x28>
 80063bc:	2f62      	cmp	r7, #98	; 0x62
 80063be:	d80a      	bhi.n	80063d6 <_printf_i+0x32>
 80063c0:	2f00      	cmp	r7, #0
 80063c2:	f000 80d5 	beq.w	8006570 <_printf_i+0x1cc>
 80063c6:	2f58      	cmp	r7, #88	; 0x58
 80063c8:	f000 80c1 	beq.w	800654e <_printf_i+0x1aa>
 80063cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063d4:	e03a      	b.n	800644c <_printf_i+0xa8>
 80063d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063da:	2b15      	cmp	r3, #21
 80063dc:	d8f6      	bhi.n	80063cc <_printf_i+0x28>
 80063de:	a101      	add	r1, pc, #4	; (adr r1, 80063e4 <_printf_i+0x40>)
 80063e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063e4:	0800643d 	.word	0x0800643d
 80063e8:	08006451 	.word	0x08006451
 80063ec:	080063cd 	.word	0x080063cd
 80063f0:	080063cd 	.word	0x080063cd
 80063f4:	080063cd 	.word	0x080063cd
 80063f8:	080063cd 	.word	0x080063cd
 80063fc:	08006451 	.word	0x08006451
 8006400:	080063cd 	.word	0x080063cd
 8006404:	080063cd 	.word	0x080063cd
 8006408:	080063cd 	.word	0x080063cd
 800640c:	080063cd 	.word	0x080063cd
 8006410:	08006557 	.word	0x08006557
 8006414:	0800647d 	.word	0x0800647d
 8006418:	08006511 	.word	0x08006511
 800641c:	080063cd 	.word	0x080063cd
 8006420:	080063cd 	.word	0x080063cd
 8006424:	08006579 	.word	0x08006579
 8006428:	080063cd 	.word	0x080063cd
 800642c:	0800647d 	.word	0x0800647d
 8006430:	080063cd 	.word	0x080063cd
 8006434:	080063cd 	.word	0x080063cd
 8006438:	08006519 	.word	0x08006519
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	1d1a      	adds	r2, r3, #4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	602a      	str	r2, [r5, #0]
 8006444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800644c:	2301      	movs	r3, #1
 800644e:	e0a0      	b.n	8006592 <_printf_i+0x1ee>
 8006450:	6820      	ldr	r0, [r4, #0]
 8006452:	682b      	ldr	r3, [r5, #0]
 8006454:	0607      	lsls	r7, r0, #24
 8006456:	f103 0104 	add.w	r1, r3, #4
 800645a:	6029      	str	r1, [r5, #0]
 800645c:	d501      	bpl.n	8006462 <_printf_i+0xbe>
 800645e:	681e      	ldr	r6, [r3, #0]
 8006460:	e003      	b.n	800646a <_printf_i+0xc6>
 8006462:	0646      	lsls	r6, r0, #25
 8006464:	d5fb      	bpl.n	800645e <_printf_i+0xba>
 8006466:	f9b3 6000 	ldrsh.w	r6, [r3]
 800646a:	2e00      	cmp	r6, #0
 800646c:	da03      	bge.n	8006476 <_printf_i+0xd2>
 800646e:	232d      	movs	r3, #45	; 0x2d
 8006470:	4276      	negs	r6, r6
 8006472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006476:	230a      	movs	r3, #10
 8006478:	4859      	ldr	r0, [pc, #356]	; (80065e0 <_printf_i+0x23c>)
 800647a:	e012      	b.n	80064a2 <_printf_i+0xfe>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	1d19      	adds	r1, r3, #4
 8006482:	6029      	str	r1, [r5, #0]
 8006484:	0605      	lsls	r5, r0, #24
 8006486:	d501      	bpl.n	800648c <_printf_i+0xe8>
 8006488:	681e      	ldr	r6, [r3, #0]
 800648a:	e002      	b.n	8006492 <_printf_i+0xee>
 800648c:	0641      	lsls	r1, r0, #25
 800648e:	d5fb      	bpl.n	8006488 <_printf_i+0xe4>
 8006490:	881e      	ldrh	r6, [r3, #0]
 8006492:	2f6f      	cmp	r7, #111	; 0x6f
 8006494:	bf0c      	ite	eq
 8006496:	2308      	moveq	r3, #8
 8006498:	230a      	movne	r3, #10
 800649a:	4851      	ldr	r0, [pc, #324]	; (80065e0 <_printf_i+0x23c>)
 800649c:	2100      	movs	r1, #0
 800649e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064a2:	6865      	ldr	r5, [r4, #4]
 80064a4:	2d00      	cmp	r5, #0
 80064a6:	bfa8      	it	ge
 80064a8:	6821      	ldrge	r1, [r4, #0]
 80064aa:	60a5      	str	r5, [r4, #8]
 80064ac:	bfa4      	itt	ge
 80064ae:	f021 0104 	bicge.w	r1, r1, #4
 80064b2:	6021      	strge	r1, [r4, #0]
 80064b4:	b90e      	cbnz	r6, 80064ba <_printf_i+0x116>
 80064b6:	2d00      	cmp	r5, #0
 80064b8:	d04b      	beq.n	8006552 <_printf_i+0x1ae>
 80064ba:	4615      	mov	r5, r2
 80064bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80064c0:	fb03 6711 	mls	r7, r3, r1, r6
 80064c4:	5dc7      	ldrb	r7, [r0, r7]
 80064c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064ca:	4637      	mov	r7, r6
 80064cc:	42bb      	cmp	r3, r7
 80064ce:	460e      	mov	r6, r1
 80064d0:	d9f4      	bls.n	80064bc <_printf_i+0x118>
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d10b      	bne.n	80064ee <_printf_i+0x14a>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	07de      	lsls	r6, r3, #31
 80064da:	d508      	bpl.n	80064ee <_printf_i+0x14a>
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	6861      	ldr	r1, [r4, #4]
 80064e0:	4299      	cmp	r1, r3
 80064e2:	bfde      	ittt	le
 80064e4:	2330      	movle	r3, #48	; 0x30
 80064e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064ee:	1b52      	subs	r2, r2, r5
 80064f0:	6122      	str	r2, [r4, #16]
 80064f2:	464b      	mov	r3, r9
 80064f4:	4621      	mov	r1, r4
 80064f6:	4640      	mov	r0, r8
 80064f8:	f8cd a000 	str.w	sl, [sp]
 80064fc:	aa03      	add	r2, sp, #12
 80064fe:	f7ff fedf 	bl	80062c0 <_printf_common>
 8006502:	3001      	adds	r0, #1
 8006504:	d14a      	bne.n	800659c <_printf_i+0x1f8>
 8006506:	f04f 30ff 	mov.w	r0, #4294967295
 800650a:	b004      	add	sp, #16
 800650c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	f043 0320 	orr.w	r3, r3, #32
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	2778      	movs	r7, #120	; 0x78
 800651a:	4832      	ldr	r0, [pc, #200]	; (80065e4 <_printf_i+0x240>)
 800651c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	6829      	ldr	r1, [r5, #0]
 8006524:	061f      	lsls	r7, r3, #24
 8006526:	f851 6b04 	ldr.w	r6, [r1], #4
 800652a:	d402      	bmi.n	8006532 <_printf_i+0x18e>
 800652c:	065f      	lsls	r7, r3, #25
 800652e:	bf48      	it	mi
 8006530:	b2b6      	uxthmi	r6, r6
 8006532:	07df      	lsls	r7, r3, #31
 8006534:	bf48      	it	mi
 8006536:	f043 0320 	orrmi.w	r3, r3, #32
 800653a:	6029      	str	r1, [r5, #0]
 800653c:	bf48      	it	mi
 800653e:	6023      	strmi	r3, [r4, #0]
 8006540:	b91e      	cbnz	r6, 800654a <_printf_i+0x1a6>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	f023 0320 	bic.w	r3, r3, #32
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	2310      	movs	r3, #16
 800654c:	e7a6      	b.n	800649c <_printf_i+0xf8>
 800654e:	4824      	ldr	r0, [pc, #144]	; (80065e0 <_printf_i+0x23c>)
 8006550:	e7e4      	b.n	800651c <_printf_i+0x178>
 8006552:	4615      	mov	r5, r2
 8006554:	e7bd      	b.n	80064d2 <_printf_i+0x12e>
 8006556:	682b      	ldr	r3, [r5, #0]
 8006558:	6826      	ldr	r6, [r4, #0]
 800655a:	1d18      	adds	r0, r3, #4
 800655c:	6961      	ldr	r1, [r4, #20]
 800655e:	6028      	str	r0, [r5, #0]
 8006560:	0635      	lsls	r5, r6, #24
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	d501      	bpl.n	800656a <_printf_i+0x1c6>
 8006566:	6019      	str	r1, [r3, #0]
 8006568:	e002      	b.n	8006570 <_printf_i+0x1cc>
 800656a:	0670      	lsls	r0, r6, #25
 800656c:	d5fb      	bpl.n	8006566 <_printf_i+0x1c2>
 800656e:	8019      	strh	r1, [r3, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	4615      	mov	r5, r2
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	e7bc      	b.n	80064f2 <_printf_i+0x14e>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	2100      	movs	r1, #0
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	602a      	str	r2, [r5, #0]
 8006580:	681d      	ldr	r5, [r3, #0]
 8006582:	6862      	ldr	r2, [r4, #4]
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f9d4 	bl	8006932 <memchr>
 800658a:	b108      	cbz	r0, 8006590 <_printf_i+0x1ec>
 800658c:	1b40      	subs	r0, r0, r5
 800658e:	6060      	str	r0, [r4, #4]
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	2300      	movs	r3, #0
 8006596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800659a:	e7aa      	b.n	80064f2 <_printf_i+0x14e>
 800659c:	462a      	mov	r2, r5
 800659e:	4649      	mov	r1, r9
 80065a0:	4640      	mov	r0, r8
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	47d0      	blx	sl
 80065a6:	3001      	adds	r0, #1
 80065a8:	d0ad      	beq.n	8006506 <_printf_i+0x162>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	079b      	lsls	r3, r3, #30
 80065ae:	d413      	bmi.n	80065d8 <_printf_i+0x234>
 80065b0:	68e0      	ldr	r0, [r4, #12]
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	4298      	cmp	r0, r3
 80065b6:	bfb8      	it	lt
 80065b8:	4618      	movlt	r0, r3
 80065ba:	e7a6      	b.n	800650a <_printf_i+0x166>
 80065bc:	2301      	movs	r3, #1
 80065be:	4632      	mov	r2, r6
 80065c0:	4649      	mov	r1, r9
 80065c2:	4640      	mov	r0, r8
 80065c4:	47d0      	blx	sl
 80065c6:	3001      	adds	r0, #1
 80065c8:	d09d      	beq.n	8006506 <_printf_i+0x162>
 80065ca:	3501      	adds	r5, #1
 80065cc:	68e3      	ldr	r3, [r4, #12]
 80065ce:	9903      	ldr	r1, [sp, #12]
 80065d0:	1a5b      	subs	r3, r3, r1
 80065d2:	42ab      	cmp	r3, r5
 80065d4:	dcf2      	bgt.n	80065bc <_printf_i+0x218>
 80065d6:	e7eb      	b.n	80065b0 <_printf_i+0x20c>
 80065d8:	2500      	movs	r5, #0
 80065da:	f104 0619 	add.w	r6, r4, #25
 80065de:	e7f5      	b.n	80065cc <_printf_i+0x228>
 80065e0:	0800bb4c 	.word	0x0800bb4c
 80065e4:	0800bb5d 	.word	0x0800bb5d

080065e8 <std>:
 80065e8:	2300      	movs	r3, #0
 80065ea:	b510      	push	{r4, lr}
 80065ec:	4604      	mov	r4, r0
 80065ee:	e9c0 3300 	strd	r3, r3, [r0]
 80065f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065f6:	6083      	str	r3, [r0, #8]
 80065f8:	8181      	strh	r1, [r0, #12]
 80065fa:	6643      	str	r3, [r0, #100]	; 0x64
 80065fc:	81c2      	strh	r2, [r0, #14]
 80065fe:	6183      	str	r3, [r0, #24]
 8006600:	4619      	mov	r1, r3
 8006602:	2208      	movs	r2, #8
 8006604:	305c      	adds	r0, #92	; 0x5c
 8006606:	f000 f914 	bl	8006832 <memset>
 800660a:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <std+0x58>)
 800660c:	6224      	str	r4, [r4, #32]
 800660e:	6263      	str	r3, [r4, #36]	; 0x24
 8006610:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <std+0x5c>)
 8006612:	62a3      	str	r3, [r4, #40]	; 0x28
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <std+0x60>)
 8006616:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <std+0x64>)
 800661a:	6323      	str	r3, [r4, #48]	; 0x30
 800661c:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <std+0x68>)
 800661e:	429c      	cmp	r4, r3
 8006620:	d006      	beq.n	8006630 <std+0x48>
 8006622:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006626:	4294      	cmp	r4, r2
 8006628:	d002      	beq.n	8006630 <std+0x48>
 800662a:	33d0      	adds	r3, #208	; 0xd0
 800662c:	429c      	cmp	r4, r3
 800662e:	d105      	bne.n	800663c <std+0x54>
 8006630:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006638:	f000 b978 	b.w	800692c <__retarget_lock_init_recursive>
 800663c:	bd10      	pop	{r4, pc}
 800663e:	bf00      	nop
 8006640:	080067ad 	.word	0x080067ad
 8006644:	080067cf 	.word	0x080067cf
 8006648:	08006807 	.word	0x08006807
 800664c:	0800682b 	.word	0x0800682b
 8006650:	20000404 	.word	0x20000404

08006654 <stdio_exit_handler>:
 8006654:	4a02      	ldr	r2, [pc, #8]	; (8006660 <stdio_exit_handler+0xc>)
 8006656:	4903      	ldr	r1, [pc, #12]	; (8006664 <stdio_exit_handler+0x10>)
 8006658:	4803      	ldr	r0, [pc, #12]	; (8006668 <stdio_exit_handler+0x14>)
 800665a:	f000 b869 	b.w	8006730 <_fwalk_sglue>
 800665e:	bf00      	nop
 8006660:	20000014 	.word	0x20000014
 8006664:	080082c5 	.word	0x080082c5
 8006668:	20000020 	.word	0x20000020

0800666c <cleanup_stdio>:
 800666c:	6841      	ldr	r1, [r0, #4]
 800666e:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <cleanup_stdio+0x34>)
 8006670:	b510      	push	{r4, lr}
 8006672:	4299      	cmp	r1, r3
 8006674:	4604      	mov	r4, r0
 8006676:	d001      	beq.n	800667c <cleanup_stdio+0x10>
 8006678:	f001 fe24 	bl	80082c4 <_fflush_r>
 800667c:	68a1      	ldr	r1, [r4, #8]
 800667e:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <cleanup_stdio+0x38>)
 8006680:	4299      	cmp	r1, r3
 8006682:	d002      	beq.n	800668a <cleanup_stdio+0x1e>
 8006684:	4620      	mov	r0, r4
 8006686:	f001 fe1d 	bl	80082c4 <_fflush_r>
 800668a:	68e1      	ldr	r1, [r4, #12]
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <cleanup_stdio+0x3c>)
 800668e:	4299      	cmp	r1, r3
 8006690:	d004      	beq.n	800669c <cleanup_stdio+0x30>
 8006692:	4620      	mov	r0, r4
 8006694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006698:	f001 be14 	b.w	80082c4 <_fflush_r>
 800669c:	bd10      	pop	{r4, pc}
 800669e:	bf00      	nop
 80066a0:	20000404 	.word	0x20000404
 80066a4:	2000046c 	.word	0x2000046c
 80066a8:	200004d4 	.word	0x200004d4

080066ac <global_stdio_init.part.0>:
 80066ac:	b510      	push	{r4, lr}
 80066ae:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <global_stdio_init.part.0+0x30>)
 80066b0:	4c0b      	ldr	r4, [pc, #44]	; (80066e0 <global_stdio_init.part.0+0x34>)
 80066b2:	4a0c      	ldr	r2, [pc, #48]	; (80066e4 <global_stdio_init.part.0+0x38>)
 80066b4:	4620      	mov	r0, r4
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	2104      	movs	r1, #4
 80066ba:	2200      	movs	r2, #0
 80066bc:	f7ff ff94 	bl	80065e8 <std>
 80066c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80066c4:	2201      	movs	r2, #1
 80066c6:	2109      	movs	r1, #9
 80066c8:	f7ff ff8e 	bl	80065e8 <std>
 80066cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80066d0:	2202      	movs	r2, #2
 80066d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d6:	2112      	movs	r1, #18
 80066d8:	f7ff bf86 	b.w	80065e8 <std>
 80066dc:	2000053c 	.word	0x2000053c
 80066e0:	20000404 	.word	0x20000404
 80066e4:	08006655 	.word	0x08006655

080066e8 <__sfp_lock_acquire>:
 80066e8:	4801      	ldr	r0, [pc, #4]	; (80066f0 <__sfp_lock_acquire+0x8>)
 80066ea:	f000 b920 	b.w	800692e <__retarget_lock_acquire_recursive>
 80066ee:	bf00      	nop
 80066f0:	20000545 	.word	0x20000545

080066f4 <__sfp_lock_release>:
 80066f4:	4801      	ldr	r0, [pc, #4]	; (80066fc <__sfp_lock_release+0x8>)
 80066f6:	f000 b91b 	b.w	8006930 <__retarget_lock_release_recursive>
 80066fa:	bf00      	nop
 80066fc:	20000545 	.word	0x20000545

08006700 <__sinit>:
 8006700:	b510      	push	{r4, lr}
 8006702:	4604      	mov	r4, r0
 8006704:	f7ff fff0 	bl	80066e8 <__sfp_lock_acquire>
 8006708:	6a23      	ldr	r3, [r4, #32]
 800670a:	b11b      	cbz	r3, 8006714 <__sinit+0x14>
 800670c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006710:	f7ff bff0 	b.w	80066f4 <__sfp_lock_release>
 8006714:	4b04      	ldr	r3, [pc, #16]	; (8006728 <__sinit+0x28>)
 8006716:	6223      	str	r3, [r4, #32]
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <__sinit+0x2c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f5      	bne.n	800670c <__sinit+0xc>
 8006720:	f7ff ffc4 	bl	80066ac <global_stdio_init.part.0>
 8006724:	e7f2      	b.n	800670c <__sinit+0xc>
 8006726:	bf00      	nop
 8006728:	0800666d 	.word	0x0800666d
 800672c:	2000053c 	.word	0x2000053c

08006730 <_fwalk_sglue>:
 8006730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006734:	4607      	mov	r7, r0
 8006736:	4688      	mov	r8, r1
 8006738:	4614      	mov	r4, r2
 800673a:	2600      	movs	r6, #0
 800673c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006740:	f1b9 0901 	subs.w	r9, r9, #1
 8006744:	d505      	bpl.n	8006752 <_fwalk_sglue+0x22>
 8006746:	6824      	ldr	r4, [r4, #0]
 8006748:	2c00      	cmp	r4, #0
 800674a:	d1f7      	bne.n	800673c <_fwalk_sglue+0xc>
 800674c:	4630      	mov	r0, r6
 800674e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006752:	89ab      	ldrh	r3, [r5, #12]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d907      	bls.n	8006768 <_fwalk_sglue+0x38>
 8006758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800675c:	3301      	adds	r3, #1
 800675e:	d003      	beq.n	8006768 <_fwalk_sglue+0x38>
 8006760:	4629      	mov	r1, r5
 8006762:	4638      	mov	r0, r7
 8006764:	47c0      	blx	r8
 8006766:	4306      	orrs	r6, r0
 8006768:	3568      	adds	r5, #104	; 0x68
 800676a:	e7e9      	b.n	8006740 <_fwalk_sglue+0x10>

0800676c <siprintf>:
 800676c:	b40e      	push	{r1, r2, r3}
 800676e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006772:	b500      	push	{lr}
 8006774:	b09c      	sub	sp, #112	; 0x70
 8006776:	ab1d      	add	r3, sp, #116	; 0x74
 8006778:	9002      	str	r0, [sp, #8]
 800677a:	9006      	str	r0, [sp, #24]
 800677c:	9107      	str	r1, [sp, #28]
 800677e:	9104      	str	r1, [sp, #16]
 8006780:	4808      	ldr	r0, [pc, #32]	; (80067a4 <siprintf+0x38>)
 8006782:	4909      	ldr	r1, [pc, #36]	; (80067a8 <siprintf+0x3c>)
 8006784:	f853 2b04 	ldr.w	r2, [r3], #4
 8006788:	9105      	str	r1, [sp, #20]
 800678a:	6800      	ldr	r0, [r0, #0]
 800678c:	a902      	add	r1, sp, #8
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	f001 fc18 	bl	8007fc4 <_svfiprintf_r>
 8006794:	2200      	movs	r2, #0
 8006796:	9b02      	ldr	r3, [sp, #8]
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	b01c      	add	sp, #112	; 0x70
 800679c:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a0:	b003      	add	sp, #12
 80067a2:	4770      	bx	lr
 80067a4:	2000006c 	.word	0x2000006c
 80067a8:	ffff0208 	.word	0xffff0208

080067ac <__sread>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	460c      	mov	r4, r1
 80067b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b4:	f000 f86c 	bl	8006890 <_read_r>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	bfab      	itete	ge
 80067bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067be:	89a3      	ldrhlt	r3, [r4, #12]
 80067c0:	181b      	addge	r3, r3, r0
 80067c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067c6:	bfac      	ite	ge
 80067c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80067ca:	81a3      	strhlt	r3, [r4, #12]
 80067cc:	bd10      	pop	{r4, pc}

080067ce <__swrite>:
 80067ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d2:	461f      	mov	r7, r3
 80067d4:	898b      	ldrh	r3, [r1, #12]
 80067d6:	4605      	mov	r5, r0
 80067d8:	05db      	lsls	r3, r3, #23
 80067da:	460c      	mov	r4, r1
 80067dc:	4616      	mov	r6, r2
 80067de:	d505      	bpl.n	80067ec <__swrite+0x1e>
 80067e0:	2302      	movs	r3, #2
 80067e2:	2200      	movs	r2, #0
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	f000 f840 	bl	800686c <_lseek_r>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	4632      	mov	r2, r6
 80067f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067f4:	81a3      	strh	r3, [r4, #12]
 80067f6:	4628      	mov	r0, r5
 80067f8:	463b      	mov	r3, r7
 80067fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006802:	f000 b857 	b.w	80068b4 <_write_r>

08006806 <__sseek>:
 8006806:	b510      	push	{r4, lr}
 8006808:	460c      	mov	r4, r1
 800680a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680e:	f000 f82d 	bl	800686c <_lseek_r>
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	bf15      	itete	ne
 8006818:	6560      	strne	r0, [r4, #84]	; 0x54
 800681a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800681e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006822:	81a3      	strheq	r3, [r4, #12]
 8006824:	bf18      	it	ne
 8006826:	81a3      	strhne	r3, [r4, #12]
 8006828:	bd10      	pop	{r4, pc}

0800682a <__sclose>:
 800682a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682e:	f000 b80d 	b.w	800684c <_close_r>

08006832 <memset>:
 8006832:	4603      	mov	r3, r0
 8006834:	4402      	add	r2, r0
 8006836:	4293      	cmp	r3, r2
 8006838:	d100      	bne.n	800683c <memset+0xa>
 800683a:	4770      	bx	lr
 800683c:	f803 1b01 	strb.w	r1, [r3], #1
 8006840:	e7f9      	b.n	8006836 <memset+0x4>
	...

08006844 <_localeconv_r>:
 8006844:	4800      	ldr	r0, [pc, #0]	; (8006848 <_localeconv_r+0x4>)
 8006846:	4770      	bx	lr
 8006848:	20000160 	.word	0x20000160

0800684c <_close_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	2300      	movs	r3, #0
 8006850:	4d05      	ldr	r5, [pc, #20]	; (8006868 <_close_r+0x1c>)
 8006852:	4604      	mov	r4, r0
 8006854:	4608      	mov	r0, r1
 8006856:	602b      	str	r3, [r5, #0]
 8006858:	f7fb fefa 	bl	8002650 <_close>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_close_r+0x1a>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_close_r+0x1a>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	20000540 	.word	0x20000540

0800686c <_lseek_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	4604      	mov	r4, r0
 8006870:	4608      	mov	r0, r1
 8006872:	4611      	mov	r1, r2
 8006874:	2200      	movs	r2, #0
 8006876:	4d05      	ldr	r5, [pc, #20]	; (800688c <_lseek_r+0x20>)
 8006878:	602a      	str	r2, [r5, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	f7fb ff0c 	bl	8002698 <_lseek>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_lseek_r+0x1e>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_lseek_r+0x1e>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	20000540 	.word	0x20000540

08006890 <_read_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4604      	mov	r4, r0
 8006894:	4608      	mov	r0, r1
 8006896:	4611      	mov	r1, r2
 8006898:	2200      	movs	r2, #0
 800689a:	4d05      	ldr	r5, [pc, #20]	; (80068b0 <_read_r+0x20>)
 800689c:	602a      	str	r2, [r5, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	f7fb fe9d 	bl	80025de <_read>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d102      	bne.n	80068ae <_read_r+0x1e>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	b103      	cbz	r3, 80068ae <_read_r+0x1e>
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	20000540 	.word	0x20000540

080068b4 <_write_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4604      	mov	r4, r0
 80068b8:	4608      	mov	r0, r1
 80068ba:	4611      	mov	r1, r2
 80068bc:	2200      	movs	r2, #0
 80068be:	4d05      	ldr	r5, [pc, #20]	; (80068d4 <_write_r+0x20>)
 80068c0:	602a      	str	r2, [r5, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f7fb fea8 	bl	8002618 <_write>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_write_r+0x1e>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_write_r+0x1e>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	20000540 	.word	0x20000540

080068d8 <__errno>:
 80068d8:	4b01      	ldr	r3, [pc, #4]	; (80068e0 <__errno+0x8>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	2000006c 	.word	0x2000006c

080068e4 <__libc_init_array>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	2600      	movs	r6, #0
 80068e8:	4d0c      	ldr	r5, [pc, #48]	; (800691c <__libc_init_array+0x38>)
 80068ea:	4c0d      	ldr	r4, [pc, #52]	; (8006920 <__libc_init_array+0x3c>)
 80068ec:	1b64      	subs	r4, r4, r5
 80068ee:	10a4      	asrs	r4, r4, #2
 80068f0:	42a6      	cmp	r6, r4
 80068f2:	d109      	bne.n	8006908 <__libc_init_array+0x24>
 80068f4:	f002 f886 	bl	8008a04 <_init>
 80068f8:	2600      	movs	r6, #0
 80068fa:	4d0a      	ldr	r5, [pc, #40]	; (8006924 <__libc_init_array+0x40>)
 80068fc:	4c0a      	ldr	r4, [pc, #40]	; (8006928 <__libc_init_array+0x44>)
 80068fe:	1b64      	subs	r4, r4, r5
 8006900:	10a4      	asrs	r4, r4, #2
 8006902:	42a6      	cmp	r6, r4
 8006904:	d105      	bne.n	8006912 <__libc_init_array+0x2e>
 8006906:	bd70      	pop	{r4, r5, r6, pc}
 8006908:	f855 3b04 	ldr.w	r3, [r5], #4
 800690c:	4798      	blx	r3
 800690e:	3601      	adds	r6, #1
 8006910:	e7ee      	b.n	80068f0 <__libc_init_array+0xc>
 8006912:	f855 3b04 	ldr.w	r3, [r5], #4
 8006916:	4798      	blx	r3
 8006918:	3601      	adds	r6, #1
 800691a:	e7f2      	b.n	8006902 <__libc_init_array+0x1e>
 800691c:	0800beac 	.word	0x0800beac
 8006920:	0800beac 	.word	0x0800beac
 8006924:	0800beac 	.word	0x0800beac
 8006928:	0800beb0 	.word	0x0800beb0

0800692c <__retarget_lock_init_recursive>:
 800692c:	4770      	bx	lr

0800692e <__retarget_lock_acquire_recursive>:
 800692e:	4770      	bx	lr

08006930 <__retarget_lock_release_recursive>:
 8006930:	4770      	bx	lr

08006932 <memchr>:
 8006932:	4603      	mov	r3, r0
 8006934:	b510      	push	{r4, lr}
 8006936:	b2c9      	uxtb	r1, r1
 8006938:	4402      	add	r2, r0
 800693a:	4293      	cmp	r3, r2
 800693c:	4618      	mov	r0, r3
 800693e:	d101      	bne.n	8006944 <memchr+0x12>
 8006940:	2000      	movs	r0, #0
 8006942:	e003      	b.n	800694c <memchr+0x1a>
 8006944:	7804      	ldrb	r4, [r0, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	428c      	cmp	r4, r1
 800694a:	d1f6      	bne.n	800693a <memchr+0x8>
 800694c:	bd10      	pop	{r4, pc}

0800694e <quorem>:
 800694e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006952:	6903      	ldr	r3, [r0, #16]
 8006954:	690c      	ldr	r4, [r1, #16]
 8006956:	4607      	mov	r7, r0
 8006958:	42a3      	cmp	r3, r4
 800695a:	db7f      	blt.n	8006a5c <quorem+0x10e>
 800695c:	3c01      	subs	r4, #1
 800695e:	f100 0514 	add.w	r5, r0, #20
 8006962:	f101 0814 	add.w	r8, r1, #20
 8006966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800696a:	9301      	str	r3, [sp, #4]
 800696c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006974:	3301      	adds	r3, #1
 8006976:	429a      	cmp	r2, r3
 8006978:	fbb2 f6f3 	udiv	r6, r2, r3
 800697c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006980:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006984:	d331      	bcc.n	80069ea <quorem+0x9c>
 8006986:	f04f 0e00 	mov.w	lr, #0
 800698a:	4640      	mov	r0, r8
 800698c:	46ac      	mov	ip, r5
 800698e:	46f2      	mov	sl, lr
 8006990:	f850 2b04 	ldr.w	r2, [r0], #4
 8006994:	b293      	uxth	r3, r2
 8006996:	fb06 e303 	mla	r3, r6, r3, lr
 800699a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800699e:	0c1a      	lsrs	r2, r3, #16
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	fb06 220e 	mla	r2, r6, lr, r2
 80069a6:	ebaa 0303 	sub.w	r3, sl, r3
 80069aa:	f8dc a000 	ldr.w	sl, [ip]
 80069ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069b2:	fa1f fa8a 	uxth.w	sl, sl
 80069b6:	4453      	add	r3, sl
 80069b8:	f8dc a000 	ldr.w	sl, [ip]
 80069bc:	b292      	uxth	r2, r2
 80069be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80069c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069cc:	4581      	cmp	r9, r0
 80069ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069d2:	f84c 3b04 	str.w	r3, [ip], #4
 80069d6:	d2db      	bcs.n	8006990 <quorem+0x42>
 80069d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80069dc:	b92b      	cbnz	r3, 80069ea <quorem+0x9c>
 80069de:	9b01      	ldr	r3, [sp, #4]
 80069e0:	3b04      	subs	r3, #4
 80069e2:	429d      	cmp	r5, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	d32d      	bcc.n	8006a44 <quorem+0xf6>
 80069e8:	613c      	str	r4, [r7, #16]
 80069ea:	4638      	mov	r0, r7
 80069ec:	f001 f992 	bl	8007d14 <__mcmp>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	db23      	blt.n	8006a3c <quorem+0xee>
 80069f4:	4629      	mov	r1, r5
 80069f6:	2000      	movs	r0, #0
 80069f8:	3601      	adds	r6, #1
 80069fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80069fe:	f8d1 c000 	ldr.w	ip, [r1]
 8006a02:	b293      	uxth	r3, r2
 8006a04:	1ac3      	subs	r3, r0, r3
 8006a06:	0c12      	lsrs	r2, r2, #16
 8006a08:	fa1f f08c 	uxth.w	r0, ip
 8006a0c:	4403      	add	r3, r0
 8006a0e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006a12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a1c:	45c1      	cmp	r9, r8
 8006a1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a22:	f841 3b04 	str.w	r3, [r1], #4
 8006a26:	d2e8      	bcs.n	80069fa <quorem+0xac>
 8006a28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a30:	b922      	cbnz	r2, 8006a3c <quorem+0xee>
 8006a32:	3b04      	subs	r3, #4
 8006a34:	429d      	cmp	r5, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	d30a      	bcc.n	8006a50 <quorem+0x102>
 8006a3a:	613c      	str	r4, [r7, #16]
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	b003      	add	sp, #12
 8006a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	3b04      	subs	r3, #4
 8006a48:	2a00      	cmp	r2, #0
 8006a4a:	d1cd      	bne.n	80069e8 <quorem+0x9a>
 8006a4c:	3c01      	subs	r4, #1
 8006a4e:	e7c8      	b.n	80069e2 <quorem+0x94>
 8006a50:	6812      	ldr	r2, [r2, #0]
 8006a52:	3b04      	subs	r3, #4
 8006a54:	2a00      	cmp	r2, #0
 8006a56:	d1f0      	bne.n	8006a3a <quorem+0xec>
 8006a58:	3c01      	subs	r4, #1
 8006a5a:	e7eb      	b.n	8006a34 <quorem+0xe6>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e7ee      	b.n	8006a3e <quorem+0xf0>

08006a60 <_dtoa_r>:
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	4616      	mov	r6, r2
 8006a66:	461f      	mov	r7, r3
 8006a68:	69c4      	ldr	r4, [r0, #28]
 8006a6a:	b099      	sub	sp, #100	; 0x64
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006a72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006a76:	b974      	cbnz	r4, 8006a96 <_dtoa_r+0x36>
 8006a78:	2010      	movs	r0, #16
 8006a7a:	f000 fe1d 	bl	80076b8 <malloc>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	61e8      	str	r0, [r5, #28]
 8006a82:	b920      	cbnz	r0, 8006a8e <_dtoa_r+0x2e>
 8006a84:	21ef      	movs	r1, #239	; 0xef
 8006a86:	4bac      	ldr	r3, [pc, #688]	; (8006d38 <_dtoa_r+0x2d8>)
 8006a88:	48ac      	ldr	r0, [pc, #688]	; (8006d3c <_dtoa_r+0x2dc>)
 8006a8a:	f001 fc7b 	bl	8008384 <__assert_func>
 8006a8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a92:	6004      	str	r4, [r0, #0]
 8006a94:	60c4      	str	r4, [r0, #12]
 8006a96:	69eb      	ldr	r3, [r5, #28]
 8006a98:	6819      	ldr	r1, [r3, #0]
 8006a9a:	b151      	cbz	r1, 8006ab2 <_dtoa_r+0x52>
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4093      	lsls	r3, r2
 8006aa2:	604a      	str	r2, [r1, #4]
 8006aa4:	608b      	str	r3, [r1, #8]
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f000 fefa 	bl	80078a0 <_Bfree>
 8006aac:	2200      	movs	r2, #0
 8006aae:	69eb      	ldr	r3, [r5, #28]
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	1e3b      	subs	r3, r7, #0
 8006ab4:	bfaf      	iteee	ge
 8006ab6:	2300      	movge	r3, #0
 8006ab8:	2201      	movlt	r2, #1
 8006aba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006abe:	9305      	strlt	r3, [sp, #20]
 8006ac0:	bfa8      	it	ge
 8006ac2:	f8c8 3000 	strge.w	r3, [r8]
 8006ac6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006aca:	4b9d      	ldr	r3, [pc, #628]	; (8006d40 <_dtoa_r+0x2e0>)
 8006acc:	bfb8      	it	lt
 8006ace:	f8c8 2000 	strlt.w	r2, [r8]
 8006ad2:	ea33 0309 	bics.w	r3, r3, r9
 8006ad6:	d119      	bne.n	8006b0c <_dtoa_r+0xac>
 8006ad8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006adc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ae4:	4333      	orrs	r3, r6
 8006ae6:	f000 8589 	beq.w	80075fc <_dtoa_r+0xb9c>
 8006aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006aec:	b953      	cbnz	r3, 8006b04 <_dtoa_r+0xa4>
 8006aee:	4b95      	ldr	r3, [pc, #596]	; (8006d44 <_dtoa_r+0x2e4>)
 8006af0:	e023      	b.n	8006b3a <_dtoa_r+0xda>
 8006af2:	4b95      	ldr	r3, [pc, #596]	; (8006d48 <_dtoa_r+0x2e8>)
 8006af4:	9303      	str	r3, [sp, #12]
 8006af6:	3308      	adds	r3, #8
 8006af8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	9803      	ldr	r0, [sp, #12]
 8006afe:	b019      	add	sp, #100	; 0x64
 8006b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b04:	4b8f      	ldr	r3, [pc, #572]	; (8006d44 <_dtoa_r+0x2e4>)
 8006b06:	9303      	str	r3, [sp, #12]
 8006b08:	3303      	adds	r3, #3
 8006b0a:	e7f5      	b.n	8006af8 <_dtoa_r+0x98>
 8006b0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006b10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006b14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f7f9 ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8006b20:	4680      	mov	r8, r0
 8006b22:	b160      	cbz	r0, 8006b3e <_dtoa_r+0xde>
 8006b24:	2301      	movs	r3, #1
 8006b26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8562 	beq.w	80075f6 <_dtoa_r+0xb96>
 8006b32:	4b86      	ldr	r3, [pc, #536]	; (8006d4c <_dtoa_r+0x2ec>)
 8006b34:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	9303      	str	r3, [sp, #12]
 8006b3c:	e7de      	b.n	8006afc <_dtoa_r+0x9c>
 8006b3e:	ab16      	add	r3, sp, #88	; 0x58
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	ab17      	add	r3, sp, #92	; 0x5c
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	4628      	mov	r0, r5
 8006b48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b4c:	f001 f98a 	bl	8007e64 <__d2b>
 8006b50:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006b54:	4682      	mov	sl, r0
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	d07e      	beq.n	8006c58 <_dtoa_r+0x1f8>
 8006b5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b68:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b70:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006b74:	4619      	mov	r1, r3
 8006b76:	2200      	movs	r2, #0
 8006b78:	4b75      	ldr	r3, [pc, #468]	; (8006d50 <_dtoa_r+0x2f0>)
 8006b7a:	f7f9 faf5 	bl	8000168 <__aeabi_dsub>
 8006b7e:	a368      	add	r3, pc, #416	; (adr r3, 8006d20 <_dtoa_r+0x2c0>)
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f7f9 fca8 	bl	80004d8 <__aeabi_dmul>
 8006b88:	a367      	add	r3, pc, #412	; (adr r3, 8006d28 <_dtoa_r+0x2c8>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 faed 	bl	800016c <__adddf3>
 8006b92:	4606      	mov	r6, r0
 8006b94:	4620      	mov	r0, r4
 8006b96:	460f      	mov	r7, r1
 8006b98:	f7f9 fc34 	bl	8000404 <__aeabi_i2d>
 8006b9c:	a364      	add	r3, pc, #400	; (adr r3, 8006d30 <_dtoa_r+0x2d0>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f7f9 fc99 	bl	80004d8 <__aeabi_dmul>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4630      	mov	r0, r6
 8006bac:	4639      	mov	r1, r7
 8006bae:	f7f9 fadd 	bl	800016c <__adddf3>
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	f7f9 ff3f 	bl	8000a38 <__aeabi_d2iz>
 8006bba:	2200      	movs	r2, #0
 8006bbc:	4683      	mov	fp, r0
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	4639      	mov	r1, r7
 8006bc4:	f7f9 fefa 	bl	80009bc <__aeabi_dcmplt>
 8006bc8:	b148      	cbz	r0, 8006bde <_dtoa_r+0x17e>
 8006bca:	4658      	mov	r0, fp
 8006bcc:	f7f9 fc1a 	bl	8000404 <__aeabi_i2d>
 8006bd0:	4632      	mov	r2, r6
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	f7f9 fee8 	bl	80009a8 <__aeabi_dcmpeq>
 8006bd8:	b908      	cbnz	r0, 8006bde <_dtoa_r+0x17e>
 8006bda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bde:	f1bb 0f16 	cmp.w	fp, #22
 8006be2:	d857      	bhi.n	8006c94 <_dtoa_r+0x234>
 8006be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006be8:	4b5a      	ldr	r3, [pc, #360]	; (8006d54 <_dtoa_r+0x2f4>)
 8006bea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	f7f9 fee3 	bl	80009bc <__aeabi_dcmplt>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d04e      	beq.n	8006c98 <_dtoa_r+0x238>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c00:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c04:	1b1b      	subs	r3, r3, r4
 8006c06:	1e5a      	subs	r2, r3, #1
 8006c08:	bf46      	itte	mi
 8006c0a:	f1c3 0901 	rsbmi	r9, r3, #1
 8006c0e:	2300      	movmi	r3, #0
 8006c10:	f04f 0900 	movpl.w	r9, #0
 8006c14:	9209      	str	r2, [sp, #36]	; 0x24
 8006c16:	bf48      	it	mi
 8006c18:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006c1a:	f1bb 0f00 	cmp.w	fp, #0
 8006c1e:	db3d      	blt.n	8006c9c <_dtoa_r+0x23c>
 8006c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c22:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006c26:	445b      	add	r3, fp
 8006c28:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	930a      	str	r3, [sp, #40]	; 0x28
 8006c2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c30:	2b09      	cmp	r3, #9
 8006c32:	d867      	bhi.n	8006d04 <_dtoa_r+0x2a4>
 8006c34:	2b05      	cmp	r3, #5
 8006c36:	bfc4      	itt	gt
 8006c38:	3b04      	subgt	r3, #4
 8006c3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c3e:	bfc8      	it	gt
 8006c40:	2400      	movgt	r4, #0
 8006c42:	f1a3 0302 	sub.w	r3, r3, #2
 8006c46:	bfd8      	it	le
 8006c48:	2401      	movle	r4, #1
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	f200 8086 	bhi.w	8006d5c <_dtoa_r+0x2fc>
 8006c50:	e8df f003 	tbb	[pc, r3]
 8006c54:	5637392c 	.word	0x5637392c
 8006c58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006c5c:	441c      	add	r4, r3
 8006c5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	bfc1      	itttt	gt
 8006c66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c6a:	fa09 f903 	lslgt.w	r9, r9, r3
 8006c6e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006c72:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c76:	bfd6      	itet	le
 8006c78:	f1c3 0320 	rsble	r3, r3, #32
 8006c7c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006c80:	fa06 f003 	lslle.w	r0, r6, r3
 8006c84:	f7f9 fbae 	bl	80003e4 <__aeabi_ui2d>
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c8e:	3c01      	subs	r4, #1
 8006c90:	9213      	str	r2, [sp, #76]	; 0x4c
 8006c92:	e76f      	b.n	8006b74 <_dtoa_r+0x114>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e7b3      	b.n	8006c00 <_dtoa_r+0x1a0>
 8006c98:	900f      	str	r0, [sp, #60]	; 0x3c
 8006c9a:	e7b2      	b.n	8006c02 <_dtoa_r+0x1a2>
 8006c9c:	f1cb 0300 	rsb	r3, fp, #0
 8006ca0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	eba9 090b 	sub.w	r9, r9, fp
 8006ca8:	930e      	str	r3, [sp, #56]	; 0x38
 8006caa:	e7c0      	b.n	8006c2e <_dtoa_r+0x1ce>
 8006cac:	2300      	movs	r3, #0
 8006cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dc55      	bgt.n	8006d62 <_dtoa_r+0x302>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	461a      	mov	r2, r3
 8006cba:	9306      	str	r3, [sp, #24]
 8006cbc:	9308      	str	r3, [sp, #32]
 8006cbe:	9223      	str	r2, [sp, #140]	; 0x8c
 8006cc0:	e00b      	b.n	8006cda <_dtoa_r+0x27a>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e7f3      	b.n	8006cae <_dtoa_r+0x24e>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ccc:	445b      	add	r3, fp
 8006cce:	9306      	str	r3, [sp, #24]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	9308      	str	r3, [sp, #32]
 8006cd6:	bfb8      	it	lt
 8006cd8:	2301      	movlt	r3, #1
 8006cda:	2100      	movs	r1, #0
 8006cdc:	2204      	movs	r2, #4
 8006cde:	69e8      	ldr	r0, [r5, #28]
 8006ce0:	f102 0614 	add.w	r6, r2, #20
 8006ce4:	429e      	cmp	r6, r3
 8006ce6:	d940      	bls.n	8006d6a <_dtoa_r+0x30a>
 8006ce8:	6041      	str	r1, [r0, #4]
 8006cea:	4628      	mov	r0, r5
 8006cec:	f000 fd98 	bl	8007820 <_Balloc>
 8006cf0:	9003      	str	r0, [sp, #12]
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d13c      	bne.n	8006d70 <_dtoa_r+0x310>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	f240 11af 	movw	r1, #431	; 0x1af
 8006cfc:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <_dtoa_r+0x2f8>)
 8006cfe:	e6c3      	b.n	8006a88 <_dtoa_r+0x28>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e7e1      	b.n	8006cc8 <_dtoa_r+0x268>
 8006d04:	2401      	movs	r4, #1
 8006d06:	2300      	movs	r3, #0
 8006d08:	940b      	str	r4, [sp, #44]	; 0x2c
 8006d0a:	9322      	str	r3, [sp, #136]	; 0x88
 8006d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d10:	2200      	movs	r2, #0
 8006d12:	9306      	str	r3, [sp, #24]
 8006d14:	9308      	str	r3, [sp, #32]
 8006d16:	2312      	movs	r3, #18
 8006d18:	e7d1      	b.n	8006cbe <_dtoa_r+0x25e>
 8006d1a:	bf00      	nop
 8006d1c:	f3af 8000 	nop.w
 8006d20:	636f4361 	.word	0x636f4361
 8006d24:	3fd287a7 	.word	0x3fd287a7
 8006d28:	8b60c8b3 	.word	0x8b60c8b3
 8006d2c:	3fc68a28 	.word	0x3fc68a28
 8006d30:	509f79fb 	.word	0x509f79fb
 8006d34:	3fd34413 	.word	0x3fd34413
 8006d38:	0800bb7b 	.word	0x0800bb7b
 8006d3c:	0800bb92 	.word	0x0800bb92
 8006d40:	7ff00000 	.word	0x7ff00000
 8006d44:	0800bb77 	.word	0x0800bb77
 8006d48:	0800bb6e 	.word	0x0800bb6e
 8006d4c:	0800bb4b 	.word	0x0800bb4b
 8006d50:	3ff80000 	.word	0x3ff80000
 8006d54:	0800bc80 	.word	0x0800bc80
 8006d58:	0800bbea 	.word	0x0800bbea
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d60:	e7d4      	b.n	8006d0c <_dtoa_r+0x2ac>
 8006d62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d64:	9306      	str	r3, [sp, #24]
 8006d66:	9308      	str	r3, [sp, #32]
 8006d68:	e7b7      	b.n	8006cda <_dtoa_r+0x27a>
 8006d6a:	3101      	adds	r1, #1
 8006d6c:	0052      	lsls	r2, r2, #1
 8006d6e:	e7b7      	b.n	8006ce0 <_dtoa_r+0x280>
 8006d70:	69eb      	ldr	r3, [r5, #28]
 8006d72:	9a03      	ldr	r2, [sp, #12]
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	9b08      	ldr	r3, [sp, #32]
 8006d78:	2b0e      	cmp	r3, #14
 8006d7a:	f200 80a8 	bhi.w	8006ece <_dtoa_r+0x46e>
 8006d7e:	2c00      	cmp	r4, #0
 8006d80:	f000 80a5 	beq.w	8006ece <_dtoa_r+0x46e>
 8006d84:	f1bb 0f00 	cmp.w	fp, #0
 8006d88:	dd34      	ble.n	8006df4 <_dtoa_r+0x394>
 8006d8a:	4b9a      	ldr	r3, [pc, #616]	; (8006ff4 <_dtoa_r+0x594>)
 8006d8c:	f00b 020f 	and.w	r2, fp, #15
 8006d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006da0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006da4:	d016      	beq.n	8006dd4 <_dtoa_r+0x374>
 8006da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006daa:	4b93      	ldr	r3, [pc, #588]	; (8006ff8 <_dtoa_r+0x598>)
 8006dac:	2703      	movs	r7, #3
 8006dae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006db2:	f7f9 fcbb 	bl	800072c <__aeabi_ddiv>
 8006db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dba:	f004 040f 	and.w	r4, r4, #15
 8006dbe:	4e8e      	ldr	r6, [pc, #568]	; (8006ff8 <_dtoa_r+0x598>)
 8006dc0:	b954      	cbnz	r4, 8006dd8 <_dtoa_r+0x378>
 8006dc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dca:	f7f9 fcaf 	bl	800072c <__aeabi_ddiv>
 8006dce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dd2:	e029      	b.n	8006e28 <_dtoa_r+0x3c8>
 8006dd4:	2702      	movs	r7, #2
 8006dd6:	e7f2      	b.n	8006dbe <_dtoa_r+0x35e>
 8006dd8:	07e1      	lsls	r1, r4, #31
 8006dda:	d508      	bpl.n	8006dee <_dtoa_r+0x38e>
 8006ddc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006de0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006de4:	f7f9 fb78 	bl	80004d8 <__aeabi_dmul>
 8006de8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dec:	3701      	adds	r7, #1
 8006dee:	1064      	asrs	r4, r4, #1
 8006df0:	3608      	adds	r6, #8
 8006df2:	e7e5      	b.n	8006dc0 <_dtoa_r+0x360>
 8006df4:	f000 80a5 	beq.w	8006f42 <_dtoa_r+0x4e2>
 8006df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dfc:	f1cb 0400 	rsb	r4, fp, #0
 8006e00:	4b7c      	ldr	r3, [pc, #496]	; (8006ff4 <_dtoa_r+0x594>)
 8006e02:	f004 020f 	and.w	r2, r4, #15
 8006e06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fb63 	bl	80004d8 <__aeabi_dmul>
 8006e12:	2702      	movs	r7, #2
 8006e14:	2300      	movs	r3, #0
 8006e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e1a:	4e77      	ldr	r6, [pc, #476]	; (8006ff8 <_dtoa_r+0x598>)
 8006e1c:	1124      	asrs	r4, r4, #4
 8006e1e:	2c00      	cmp	r4, #0
 8006e20:	f040 8084 	bne.w	8006f2c <_dtoa_r+0x4cc>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1d2      	bne.n	8006dce <_dtoa_r+0x36e>
 8006e28:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006e30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 8087 	beq.w	8006f46 <_dtoa_r+0x4e6>
 8006e38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4b6f      	ldr	r3, [pc, #444]	; (8006ffc <_dtoa_r+0x59c>)
 8006e40:	f7f9 fdbc 	bl	80009bc <__aeabi_dcmplt>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d07e      	beq.n	8006f46 <_dtoa_r+0x4e6>
 8006e48:	9b08      	ldr	r3, [sp, #32]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d07b      	beq.n	8006f46 <_dtoa_r+0x4e6>
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	dd38      	ble.n	8006ec6 <_dtoa_r+0x466>
 8006e54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4b69      	ldr	r3, [pc, #420]	; (8007000 <_dtoa_r+0x5a0>)
 8006e5c:	f7f9 fb3c 	bl	80004d8 <__aeabi_dmul>
 8006e60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e64:	9c06      	ldr	r4, [sp, #24]
 8006e66:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006e6a:	3701      	adds	r7, #1
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	f7f9 fac9 	bl	8000404 <__aeabi_i2d>
 8006e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e76:	f7f9 fb2f 	bl	80004d8 <__aeabi_dmul>
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4b61      	ldr	r3, [pc, #388]	; (8007004 <_dtoa_r+0x5a4>)
 8006e7e:	f7f9 f975 	bl	800016c <__adddf3>
 8006e82:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006e86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e8a:	9611      	str	r6, [sp, #68]	; 0x44
 8006e8c:	2c00      	cmp	r4, #0
 8006e8e:	d15d      	bne.n	8006f4c <_dtoa_r+0x4ec>
 8006e90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e94:	2200      	movs	r2, #0
 8006e96:	4b5c      	ldr	r3, [pc, #368]	; (8007008 <_dtoa_r+0x5a8>)
 8006e98:	f7f9 f966 	bl	8000168 <__aeabi_dsub>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ea4:	4633      	mov	r3, r6
 8006ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ea8:	f7f9 fda6 	bl	80009f8 <__aeabi_dcmpgt>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	f040 8295 	bne.w	80073dc <_dtoa_r+0x97c>
 8006eb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006eb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006ebc:	f7f9 fd7e 	bl	80009bc <__aeabi_dcmplt>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f040 8289 	bne.w	80073d8 <_dtoa_r+0x978>
 8006ec6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006eca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ece:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f2c0 8151 	blt.w	8007178 <_dtoa_r+0x718>
 8006ed6:	f1bb 0f0e 	cmp.w	fp, #14
 8006eda:	f300 814d 	bgt.w	8007178 <_dtoa_r+0x718>
 8006ede:	4b45      	ldr	r3, [pc, #276]	; (8006ff4 <_dtoa_r+0x594>)
 8006ee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ee4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ee8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006eec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f280 80da 	bge.w	80070a8 <_dtoa_r+0x648>
 8006ef4:	9b08      	ldr	r3, [sp, #32]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f300 80d6 	bgt.w	80070a8 <_dtoa_r+0x648>
 8006efc:	f040 826b 	bne.w	80073d6 <_dtoa_r+0x976>
 8006f00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f04:	2200      	movs	r2, #0
 8006f06:	4b40      	ldr	r3, [pc, #256]	; (8007008 <_dtoa_r+0x5a8>)
 8006f08:	f7f9 fae6 	bl	80004d8 <__aeabi_dmul>
 8006f0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f10:	f7f9 fd68 	bl	80009e4 <__aeabi_dcmpge>
 8006f14:	9c08      	ldr	r4, [sp, #32]
 8006f16:	4626      	mov	r6, r4
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	f040 8241 	bne.w	80073a0 <_dtoa_r+0x940>
 8006f1e:	2331      	movs	r3, #49	; 0x31
 8006f20:	9f03      	ldr	r7, [sp, #12]
 8006f22:	f10b 0b01 	add.w	fp, fp, #1
 8006f26:	f807 3b01 	strb.w	r3, [r7], #1
 8006f2a:	e23d      	b.n	80073a8 <_dtoa_r+0x948>
 8006f2c:	07e2      	lsls	r2, r4, #31
 8006f2e:	d505      	bpl.n	8006f3c <_dtoa_r+0x4dc>
 8006f30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f34:	f7f9 fad0 	bl	80004d8 <__aeabi_dmul>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	3701      	adds	r7, #1
 8006f3c:	1064      	asrs	r4, r4, #1
 8006f3e:	3608      	adds	r6, #8
 8006f40:	e76d      	b.n	8006e1e <_dtoa_r+0x3be>
 8006f42:	2702      	movs	r7, #2
 8006f44:	e770      	b.n	8006e28 <_dtoa_r+0x3c8>
 8006f46:	46d8      	mov	r8, fp
 8006f48:	9c08      	ldr	r4, [sp, #32]
 8006f4a:	e78f      	b.n	8006e6c <_dtoa_r+0x40c>
 8006f4c:	9903      	ldr	r1, [sp, #12]
 8006f4e:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <_dtoa_r+0x594>)
 8006f50:	4421      	add	r1, r4
 8006f52:	9112      	str	r1, [sp, #72]	; 0x48
 8006f54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f5a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006f5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f62:	2900      	cmp	r1, #0
 8006f64:	d054      	beq.n	8007010 <_dtoa_r+0x5b0>
 8006f66:	2000      	movs	r0, #0
 8006f68:	4928      	ldr	r1, [pc, #160]	; (800700c <_dtoa_r+0x5ac>)
 8006f6a:	f7f9 fbdf 	bl	800072c <__aeabi_ddiv>
 8006f6e:	463b      	mov	r3, r7
 8006f70:	4632      	mov	r2, r6
 8006f72:	f7f9 f8f9 	bl	8000168 <__aeabi_dsub>
 8006f76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f7a:	9f03      	ldr	r7, [sp, #12]
 8006f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f80:	f7f9 fd5a 	bl	8000a38 <__aeabi_d2iz>
 8006f84:	4604      	mov	r4, r0
 8006f86:	f7f9 fa3d 	bl	8000404 <__aeabi_i2d>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f92:	f7f9 f8e9 	bl	8000168 <__aeabi_dsub>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	3430      	adds	r4, #48	; 0x30
 8006f9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fa4:	f807 4b01 	strb.w	r4, [r7], #1
 8006fa8:	f7f9 fd08 	bl	80009bc <__aeabi_dcmplt>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d173      	bne.n	8007098 <_dtoa_r+0x638>
 8006fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	4911      	ldr	r1, [pc, #68]	; (8006ffc <_dtoa_r+0x59c>)
 8006fb8:	f7f9 f8d6 	bl	8000168 <__aeabi_dsub>
 8006fbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fc0:	f7f9 fcfc 	bl	80009bc <__aeabi_dcmplt>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	f040 80b6 	bne.w	8007136 <_dtoa_r+0x6d6>
 8006fca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fcc:	429f      	cmp	r7, r3
 8006fce:	f43f af7a 	beq.w	8006ec6 <_dtoa_r+0x466>
 8006fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	4b09      	ldr	r3, [pc, #36]	; (8007000 <_dtoa_r+0x5a0>)
 8006fda:	f7f9 fa7d 	bl	80004d8 <__aeabi_dmul>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <_dtoa_r+0x5a0>)
 8006fea:	f7f9 fa75 	bl	80004d8 <__aeabi_dmul>
 8006fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff2:	e7c3      	b.n	8006f7c <_dtoa_r+0x51c>
 8006ff4:	0800bc80 	.word	0x0800bc80
 8006ff8:	0800bc58 	.word	0x0800bc58
 8006ffc:	3ff00000 	.word	0x3ff00000
 8007000:	40240000 	.word	0x40240000
 8007004:	401c0000 	.word	0x401c0000
 8007008:	40140000 	.word	0x40140000
 800700c:	3fe00000 	.word	0x3fe00000
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 fa60 	bl	80004d8 <__aeabi_dmul>
 8007018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800701a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800701e:	9c03      	ldr	r4, [sp, #12]
 8007020:	9314      	str	r3, [sp, #80]	; 0x50
 8007022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007026:	f7f9 fd07 	bl	8000a38 <__aeabi_d2iz>
 800702a:	9015      	str	r0, [sp, #84]	; 0x54
 800702c:	f7f9 f9ea 	bl	8000404 <__aeabi_i2d>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007038:	f7f9 f896 	bl	8000168 <__aeabi_dsub>
 800703c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800703e:	4606      	mov	r6, r0
 8007040:	3330      	adds	r3, #48	; 0x30
 8007042:	f804 3b01 	strb.w	r3, [r4], #1
 8007046:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007048:	460f      	mov	r7, r1
 800704a:	429c      	cmp	r4, r3
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	d124      	bne.n	800709c <_dtoa_r+0x63c>
 8007052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007056:	4baf      	ldr	r3, [pc, #700]	; (8007314 <_dtoa_r+0x8b4>)
 8007058:	f7f9 f888 	bl	800016c <__adddf3>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4630      	mov	r0, r6
 8007062:	4639      	mov	r1, r7
 8007064:	f7f9 fcc8 	bl	80009f8 <__aeabi_dcmpgt>
 8007068:	2800      	cmp	r0, #0
 800706a:	d163      	bne.n	8007134 <_dtoa_r+0x6d4>
 800706c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007070:	2000      	movs	r0, #0
 8007072:	49a8      	ldr	r1, [pc, #672]	; (8007314 <_dtoa_r+0x8b4>)
 8007074:	f7f9 f878 	bl	8000168 <__aeabi_dsub>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4630      	mov	r0, r6
 800707e:	4639      	mov	r1, r7
 8007080:	f7f9 fc9c 	bl	80009bc <__aeabi_dcmplt>
 8007084:	2800      	cmp	r0, #0
 8007086:	f43f af1e 	beq.w	8006ec6 <_dtoa_r+0x466>
 800708a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800708c:	1e7b      	subs	r3, r7, #1
 800708e:	9314      	str	r3, [sp, #80]	; 0x50
 8007090:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007094:	2b30      	cmp	r3, #48	; 0x30
 8007096:	d0f8      	beq.n	800708a <_dtoa_r+0x62a>
 8007098:	46c3      	mov	fp, r8
 800709a:	e03b      	b.n	8007114 <_dtoa_r+0x6b4>
 800709c:	4b9e      	ldr	r3, [pc, #632]	; (8007318 <_dtoa_r+0x8b8>)
 800709e:	f7f9 fa1b 	bl	80004d8 <__aeabi_dmul>
 80070a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070a6:	e7bc      	b.n	8007022 <_dtoa_r+0x5c2>
 80070a8:	9f03      	ldr	r7, [sp, #12]
 80070aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80070ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070b2:	4640      	mov	r0, r8
 80070b4:	4649      	mov	r1, r9
 80070b6:	f7f9 fb39 	bl	800072c <__aeabi_ddiv>
 80070ba:	f7f9 fcbd 	bl	8000a38 <__aeabi_d2iz>
 80070be:	4604      	mov	r4, r0
 80070c0:	f7f9 f9a0 	bl	8000404 <__aeabi_i2d>
 80070c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070c8:	f7f9 fa06 	bl	80004d8 <__aeabi_dmul>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4640      	mov	r0, r8
 80070d2:	4649      	mov	r1, r9
 80070d4:	f7f9 f848 	bl	8000168 <__aeabi_dsub>
 80070d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80070dc:	f807 6b01 	strb.w	r6, [r7], #1
 80070e0:	9e03      	ldr	r6, [sp, #12]
 80070e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80070e6:	1bbe      	subs	r6, r7, r6
 80070e8:	45b4      	cmp	ip, r6
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	d136      	bne.n	800715e <_dtoa_r+0x6fe>
 80070f0:	f7f9 f83c 	bl	800016c <__adddf3>
 80070f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070f8:	4680      	mov	r8, r0
 80070fa:	4689      	mov	r9, r1
 80070fc:	f7f9 fc7c 	bl	80009f8 <__aeabi_dcmpgt>
 8007100:	bb58      	cbnz	r0, 800715a <_dtoa_r+0x6fa>
 8007102:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007106:	4640      	mov	r0, r8
 8007108:	4649      	mov	r1, r9
 800710a:	f7f9 fc4d 	bl	80009a8 <__aeabi_dcmpeq>
 800710e:	b108      	cbz	r0, 8007114 <_dtoa_r+0x6b4>
 8007110:	07e3      	lsls	r3, r4, #31
 8007112:	d422      	bmi.n	800715a <_dtoa_r+0x6fa>
 8007114:	4651      	mov	r1, sl
 8007116:	4628      	mov	r0, r5
 8007118:	f000 fbc2 	bl	80078a0 <_Bfree>
 800711c:	2300      	movs	r3, #0
 800711e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007120:	703b      	strb	r3, [r7, #0]
 8007122:	f10b 0301 	add.w	r3, fp, #1
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800712a:	2b00      	cmp	r3, #0
 800712c:	f43f ace6 	beq.w	8006afc <_dtoa_r+0x9c>
 8007130:	601f      	str	r7, [r3, #0]
 8007132:	e4e3      	b.n	8006afc <_dtoa_r+0x9c>
 8007134:	4627      	mov	r7, r4
 8007136:	463b      	mov	r3, r7
 8007138:	461f      	mov	r7, r3
 800713a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800713e:	2a39      	cmp	r2, #57	; 0x39
 8007140:	d107      	bne.n	8007152 <_dtoa_r+0x6f2>
 8007142:	9a03      	ldr	r2, [sp, #12]
 8007144:	429a      	cmp	r2, r3
 8007146:	d1f7      	bne.n	8007138 <_dtoa_r+0x6d8>
 8007148:	2230      	movs	r2, #48	; 0x30
 800714a:	9903      	ldr	r1, [sp, #12]
 800714c:	f108 0801 	add.w	r8, r8, #1
 8007150:	700a      	strb	r2, [r1, #0]
 8007152:	781a      	ldrb	r2, [r3, #0]
 8007154:	3201      	adds	r2, #1
 8007156:	701a      	strb	r2, [r3, #0]
 8007158:	e79e      	b.n	8007098 <_dtoa_r+0x638>
 800715a:	46d8      	mov	r8, fp
 800715c:	e7eb      	b.n	8007136 <_dtoa_r+0x6d6>
 800715e:	2200      	movs	r2, #0
 8007160:	4b6d      	ldr	r3, [pc, #436]	; (8007318 <_dtoa_r+0x8b8>)
 8007162:	f7f9 f9b9 	bl	80004d8 <__aeabi_dmul>
 8007166:	2200      	movs	r2, #0
 8007168:	2300      	movs	r3, #0
 800716a:	4680      	mov	r8, r0
 800716c:	4689      	mov	r9, r1
 800716e:	f7f9 fc1b 	bl	80009a8 <__aeabi_dcmpeq>
 8007172:	2800      	cmp	r0, #0
 8007174:	d09b      	beq.n	80070ae <_dtoa_r+0x64e>
 8007176:	e7cd      	b.n	8007114 <_dtoa_r+0x6b4>
 8007178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800717a:	2a00      	cmp	r2, #0
 800717c:	f000 80c4 	beq.w	8007308 <_dtoa_r+0x8a8>
 8007180:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007182:	2a01      	cmp	r2, #1
 8007184:	f300 80a8 	bgt.w	80072d8 <_dtoa_r+0x878>
 8007188:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800718a:	2a00      	cmp	r2, #0
 800718c:	f000 80a0 	beq.w	80072d0 <_dtoa_r+0x870>
 8007190:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007194:	464f      	mov	r7, r9
 8007196:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800719a:	2101      	movs	r1, #1
 800719c:	441a      	add	r2, r3
 800719e:	4628      	mov	r0, r5
 80071a0:	4499      	add	r9, r3
 80071a2:	9209      	str	r2, [sp, #36]	; 0x24
 80071a4:	f000 fc32 	bl	8007a0c <__i2b>
 80071a8:	4606      	mov	r6, r0
 80071aa:	b15f      	cbz	r7, 80071c4 <_dtoa_r+0x764>
 80071ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	dd08      	ble.n	80071c4 <_dtoa_r+0x764>
 80071b2:	42bb      	cmp	r3, r7
 80071b4:	bfa8      	it	ge
 80071b6:	463b      	movge	r3, r7
 80071b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071ba:	eba9 0903 	sub.w	r9, r9, r3
 80071be:	1aff      	subs	r7, r7, r3
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	9309      	str	r3, [sp, #36]	; 0x24
 80071c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c6:	b1f3      	cbz	r3, 8007206 <_dtoa_r+0x7a6>
 80071c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80a0 	beq.w	8007310 <_dtoa_r+0x8b0>
 80071d0:	2c00      	cmp	r4, #0
 80071d2:	dd10      	ble.n	80071f6 <_dtoa_r+0x796>
 80071d4:	4631      	mov	r1, r6
 80071d6:	4622      	mov	r2, r4
 80071d8:	4628      	mov	r0, r5
 80071da:	f000 fcd5 	bl	8007b88 <__pow5mult>
 80071de:	4652      	mov	r2, sl
 80071e0:	4601      	mov	r1, r0
 80071e2:	4606      	mov	r6, r0
 80071e4:	4628      	mov	r0, r5
 80071e6:	f000 fc27 	bl	8007a38 <__multiply>
 80071ea:	4680      	mov	r8, r0
 80071ec:	4651      	mov	r1, sl
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 fb56 	bl	80078a0 <_Bfree>
 80071f4:	46c2      	mov	sl, r8
 80071f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f8:	1b1a      	subs	r2, r3, r4
 80071fa:	d004      	beq.n	8007206 <_dtoa_r+0x7a6>
 80071fc:	4651      	mov	r1, sl
 80071fe:	4628      	mov	r0, r5
 8007200:	f000 fcc2 	bl	8007b88 <__pow5mult>
 8007204:	4682      	mov	sl, r0
 8007206:	2101      	movs	r1, #1
 8007208:	4628      	mov	r0, r5
 800720a:	f000 fbff 	bl	8007a0c <__i2b>
 800720e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007210:	4604      	mov	r4, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	f340 8082 	ble.w	800731c <_dtoa_r+0x8bc>
 8007218:	461a      	mov	r2, r3
 800721a:	4601      	mov	r1, r0
 800721c:	4628      	mov	r0, r5
 800721e:	f000 fcb3 	bl	8007b88 <__pow5mult>
 8007222:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007224:	4604      	mov	r4, r0
 8007226:	2b01      	cmp	r3, #1
 8007228:	dd7b      	ble.n	8007322 <_dtoa_r+0x8c2>
 800722a:	f04f 0800 	mov.w	r8, #0
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007234:	6918      	ldr	r0, [r3, #16]
 8007236:	f000 fb9b 	bl	8007970 <__hi0bits>
 800723a:	f1c0 0020 	rsb	r0, r0, #32
 800723e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007240:	4418      	add	r0, r3
 8007242:	f010 001f 	ands.w	r0, r0, #31
 8007246:	f000 8092 	beq.w	800736e <_dtoa_r+0x90e>
 800724a:	f1c0 0320 	rsb	r3, r0, #32
 800724e:	2b04      	cmp	r3, #4
 8007250:	f340 8085 	ble.w	800735e <_dtoa_r+0x8fe>
 8007254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007256:	f1c0 001c 	rsb	r0, r0, #28
 800725a:	4403      	add	r3, r0
 800725c:	4481      	add	r9, r0
 800725e:	4407      	add	r7, r0
 8007260:	9309      	str	r3, [sp, #36]	; 0x24
 8007262:	f1b9 0f00 	cmp.w	r9, #0
 8007266:	dd05      	ble.n	8007274 <_dtoa_r+0x814>
 8007268:	4651      	mov	r1, sl
 800726a:	464a      	mov	r2, r9
 800726c:	4628      	mov	r0, r5
 800726e:	f000 fce5 	bl	8007c3c <__lshift>
 8007272:	4682      	mov	sl, r0
 8007274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007276:	2b00      	cmp	r3, #0
 8007278:	dd05      	ble.n	8007286 <_dtoa_r+0x826>
 800727a:	4621      	mov	r1, r4
 800727c:	461a      	mov	r2, r3
 800727e:	4628      	mov	r0, r5
 8007280:	f000 fcdc 	bl	8007c3c <__lshift>
 8007284:	4604      	mov	r4, r0
 8007286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d072      	beq.n	8007372 <_dtoa_r+0x912>
 800728c:	4621      	mov	r1, r4
 800728e:	4650      	mov	r0, sl
 8007290:	f000 fd40 	bl	8007d14 <__mcmp>
 8007294:	2800      	cmp	r0, #0
 8007296:	da6c      	bge.n	8007372 <_dtoa_r+0x912>
 8007298:	2300      	movs	r3, #0
 800729a:	4651      	mov	r1, sl
 800729c:	220a      	movs	r2, #10
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 fb20 	bl	80078e4 <__multadd>
 80072a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a6:	4682      	mov	sl, r0
 80072a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 81ac 	beq.w	800760a <_dtoa_r+0xbaa>
 80072b2:	2300      	movs	r3, #0
 80072b4:	4631      	mov	r1, r6
 80072b6:	220a      	movs	r2, #10
 80072b8:	4628      	mov	r0, r5
 80072ba:	f000 fb13 	bl	80078e4 <__multadd>
 80072be:	9b06      	ldr	r3, [sp, #24]
 80072c0:	4606      	mov	r6, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f300 8093 	bgt.w	80073ee <_dtoa_r+0x98e>
 80072c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	dc59      	bgt.n	8007382 <_dtoa_r+0x922>
 80072ce:	e08e      	b.n	80073ee <_dtoa_r+0x98e>
 80072d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80072d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072d6:	e75d      	b.n	8007194 <_dtoa_r+0x734>
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	1e5c      	subs	r4, r3, #1
 80072dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072de:	42a3      	cmp	r3, r4
 80072e0:	bfbf      	itttt	lt
 80072e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80072e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80072e6:	1ae3      	sublt	r3, r4, r3
 80072e8:	18d2      	addlt	r2, r2, r3
 80072ea:	bfa8      	it	ge
 80072ec:	1b1c      	subge	r4, r3, r4
 80072ee:	9b08      	ldr	r3, [sp, #32]
 80072f0:	bfbe      	ittt	lt
 80072f2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80072f4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80072f6:	2400      	movlt	r4, #0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bfb5      	itete	lt
 80072fc:	eba9 0703 	sublt.w	r7, r9, r3
 8007300:	464f      	movge	r7, r9
 8007302:	2300      	movlt	r3, #0
 8007304:	9b08      	ldrge	r3, [sp, #32]
 8007306:	e747      	b.n	8007198 <_dtoa_r+0x738>
 8007308:	464f      	mov	r7, r9
 800730a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800730c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800730e:	e74c      	b.n	80071aa <_dtoa_r+0x74a>
 8007310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007312:	e773      	b.n	80071fc <_dtoa_r+0x79c>
 8007314:	3fe00000 	.word	0x3fe00000
 8007318:	40240000 	.word	0x40240000
 800731c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800731e:	2b01      	cmp	r3, #1
 8007320:	dc18      	bgt.n	8007354 <_dtoa_r+0x8f4>
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	b9b3      	cbnz	r3, 8007354 <_dtoa_r+0x8f4>
 8007326:	9b05      	ldr	r3, [sp, #20]
 8007328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800732c:	b993      	cbnz	r3, 8007354 <_dtoa_r+0x8f4>
 800732e:	9b05      	ldr	r3, [sp, #20]
 8007330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007334:	0d1b      	lsrs	r3, r3, #20
 8007336:	051b      	lsls	r3, r3, #20
 8007338:	b17b      	cbz	r3, 800735a <_dtoa_r+0x8fa>
 800733a:	f04f 0801 	mov.w	r8, #1
 800733e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007340:	f109 0901 	add.w	r9, r9, #1
 8007344:	3301      	adds	r3, #1
 8007346:	9309      	str	r3, [sp, #36]	; 0x24
 8007348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800734a:	2b00      	cmp	r3, #0
 800734c:	f47f af6f 	bne.w	800722e <_dtoa_r+0x7ce>
 8007350:	2001      	movs	r0, #1
 8007352:	e774      	b.n	800723e <_dtoa_r+0x7de>
 8007354:	f04f 0800 	mov.w	r8, #0
 8007358:	e7f6      	b.n	8007348 <_dtoa_r+0x8e8>
 800735a:	4698      	mov	r8, r3
 800735c:	e7f4      	b.n	8007348 <_dtoa_r+0x8e8>
 800735e:	d080      	beq.n	8007262 <_dtoa_r+0x802>
 8007360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007362:	331c      	adds	r3, #28
 8007364:	441a      	add	r2, r3
 8007366:	4499      	add	r9, r3
 8007368:	441f      	add	r7, r3
 800736a:	9209      	str	r2, [sp, #36]	; 0x24
 800736c:	e779      	b.n	8007262 <_dtoa_r+0x802>
 800736e:	4603      	mov	r3, r0
 8007370:	e7f6      	b.n	8007360 <_dtoa_r+0x900>
 8007372:	9b08      	ldr	r3, [sp, #32]
 8007374:	2b00      	cmp	r3, #0
 8007376:	dc34      	bgt.n	80073e2 <_dtoa_r+0x982>
 8007378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800737a:	2b02      	cmp	r3, #2
 800737c:	dd31      	ble.n	80073e2 <_dtoa_r+0x982>
 800737e:	9b08      	ldr	r3, [sp, #32]
 8007380:	9306      	str	r3, [sp, #24]
 8007382:	9b06      	ldr	r3, [sp, #24]
 8007384:	b963      	cbnz	r3, 80073a0 <_dtoa_r+0x940>
 8007386:	4621      	mov	r1, r4
 8007388:	2205      	movs	r2, #5
 800738a:	4628      	mov	r0, r5
 800738c:	f000 faaa 	bl	80078e4 <__multadd>
 8007390:	4601      	mov	r1, r0
 8007392:	4604      	mov	r4, r0
 8007394:	4650      	mov	r0, sl
 8007396:	f000 fcbd 	bl	8007d14 <__mcmp>
 800739a:	2800      	cmp	r0, #0
 800739c:	f73f adbf 	bgt.w	8006f1e <_dtoa_r+0x4be>
 80073a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073a2:	9f03      	ldr	r7, [sp, #12]
 80073a4:	ea6f 0b03 	mvn.w	fp, r3
 80073a8:	f04f 0800 	mov.w	r8, #0
 80073ac:	4621      	mov	r1, r4
 80073ae:	4628      	mov	r0, r5
 80073b0:	f000 fa76 	bl	80078a0 <_Bfree>
 80073b4:	2e00      	cmp	r6, #0
 80073b6:	f43f aead 	beq.w	8007114 <_dtoa_r+0x6b4>
 80073ba:	f1b8 0f00 	cmp.w	r8, #0
 80073be:	d005      	beq.n	80073cc <_dtoa_r+0x96c>
 80073c0:	45b0      	cmp	r8, r6
 80073c2:	d003      	beq.n	80073cc <_dtoa_r+0x96c>
 80073c4:	4641      	mov	r1, r8
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 fa6a 	bl	80078a0 <_Bfree>
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 fa66 	bl	80078a0 <_Bfree>
 80073d4:	e69e      	b.n	8007114 <_dtoa_r+0x6b4>
 80073d6:	2400      	movs	r4, #0
 80073d8:	4626      	mov	r6, r4
 80073da:	e7e1      	b.n	80073a0 <_dtoa_r+0x940>
 80073dc:	46c3      	mov	fp, r8
 80073de:	4626      	mov	r6, r4
 80073e0:	e59d      	b.n	8006f1e <_dtoa_r+0x4be>
 80073e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 80c8 	beq.w	800757a <_dtoa_r+0xb1a>
 80073ea:	9b08      	ldr	r3, [sp, #32]
 80073ec:	9306      	str	r3, [sp, #24]
 80073ee:	2f00      	cmp	r7, #0
 80073f0:	dd05      	ble.n	80073fe <_dtoa_r+0x99e>
 80073f2:	4631      	mov	r1, r6
 80073f4:	463a      	mov	r2, r7
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 fc20 	bl	8007c3c <__lshift>
 80073fc:	4606      	mov	r6, r0
 80073fe:	f1b8 0f00 	cmp.w	r8, #0
 8007402:	d05b      	beq.n	80074bc <_dtoa_r+0xa5c>
 8007404:	4628      	mov	r0, r5
 8007406:	6871      	ldr	r1, [r6, #4]
 8007408:	f000 fa0a 	bl	8007820 <_Balloc>
 800740c:	4607      	mov	r7, r0
 800740e:	b928      	cbnz	r0, 800741c <_dtoa_r+0x9bc>
 8007410:	4602      	mov	r2, r0
 8007412:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007416:	4b81      	ldr	r3, [pc, #516]	; (800761c <_dtoa_r+0xbbc>)
 8007418:	f7ff bb36 	b.w	8006a88 <_dtoa_r+0x28>
 800741c:	6932      	ldr	r2, [r6, #16]
 800741e:	f106 010c 	add.w	r1, r6, #12
 8007422:	3202      	adds	r2, #2
 8007424:	0092      	lsls	r2, r2, #2
 8007426:	300c      	adds	r0, #12
 8007428:	f000 ff9e 	bl	8008368 <memcpy>
 800742c:	2201      	movs	r2, #1
 800742e:	4639      	mov	r1, r7
 8007430:	4628      	mov	r0, r5
 8007432:	f000 fc03 	bl	8007c3c <__lshift>
 8007436:	46b0      	mov	r8, r6
 8007438:	4606      	mov	r6, r0
 800743a:	9b03      	ldr	r3, [sp, #12]
 800743c:	9a03      	ldr	r2, [sp, #12]
 800743e:	3301      	adds	r3, #1
 8007440:	9308      	str	r3, [sp, #32]
 8007442:	9b06      	ldr	r3, [sp, #24]
 8007444:	4413      	add	r3, r2
 8007446:	930b      	str	r3, [sp, #44]	; 0x2c
 8007448:	9b04      	ldr	r3, [sp, #16]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	930a      	str	r3, [sp, #40]	; 0x28
 8007450:	9b08      	ldr	r3, [sp, #32]
 8007452:	4621      	mov	r1, r4
 8007454:	3b01      	subs	r3, #1
 8007456:	4650      	mov	r0, sl
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	f7ff fa78 	bl	800694e <quorem>
 800745e:	4641      	mov	r1, r8
 8007460:	9006      	str	r0, [sp, #24]
 8007462:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007466:	4650      	mov	r0, sl
 8007468:	f000 fc54 	bl	8007d14 <__mcmp>
 800746c:	4632      	mov	r2, r6
 800746e:	9009      	str	r0, [sp, #36]	; 0x24
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	f000 fc6a 	bl	8007d4c <__mdiff>
 8007478:	68c2      	ldr	r2, [r0, #12]
 800747a:	4607      	mov	r7, r0
 800747c:	bb02      	cbnz	r2, 80074c0 <_dtoa_r+0xa60>
 800747e:	4601      	mov	r1, r0
 8007480:	4650      	mov	r0, sl
 8007482:	f000 fc47 	bl	8007d14 <__mcmp>
 8007486:	4602      	mov	r2, r0
 8007488:	4639      	mov	r1, r7
 800748a:	4628      	mov	r0, r5
 800748c:	920c      	str	r2, [sp, #48]	; 0x30
 800748e:	f000 fa07 	bl	80078a0 <_Bfree>
 8007492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007496:	9f08      	ldr	r7, [sp, #32]
 8007498:	ea43 0102 	orr.w	r1, r3, r2
 800749c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800749e:	4319      	orrs	r1, r3
 80074a0:	d110      	bne.n	80074c4 <_dtoa_r+0xa64>
 80074a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074a6:	d029      	beq.n	80074fc <_dtoa_r+0xa9c>
 80074a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	dd02      	ble.n	80074b4 <_dtoa_r+0xa54>
 80074ae:	9b06      	ldr	r3, [sp, #24]
 80074b0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80074b4:	9b04      	ldr	r3, [sp, #16]
 80074b6:	f883 9000 	strb.w	r9, [r3]
 80074ba:	e777      	b.n	80073ac <_dtoa_r+0x94c>
 80074bc:	4630      	mov	r0, r6
 80074be:	e7ba      	b.n	8007436 <_dtoa_r+0x9d6>
 80074c0:	2201      	movs	r2, #1
 80074c2:	e7e1      	b.n	8007488 <_dtoa_r+0xa28>
 80074c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	db04      	blt.n	80074d4 <_dtoa_r+0xa74>
 80074ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80074cc:	430b      	orrs	r3, r1
 80074ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074d0:	430b      	orrs	r3, r1
 80074d2:	d120      	bne.n	8007516 <_dtoa_r+0xab6>
 80074d4:	2a00      	cmp	r2, #0
 80074d6:	dded      	ble.n	80074b4 <_dtoa_r+0xa54>
 80074d8:	4651      	mov	r1, sl
 80074da:	2201      	movs	r2, #1
 80074dc:	4628      	mov	r0, r5
 80074de:	f000 fbad 	bl	8007c3c <__lshift>
 80074e2:	4621      	mov	r1, r4
 80074e4:	4682      	mov	sl, r0
 80074e6:	f000 fc15 	bl	8007d14 <__mcmp>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	dc03      	bgt.n	80074f6 <_dtoa_r+0xa96>
 80074ee:	d1e1      	bne.n	80074b4 <_dtoa_r+0xa54>
 80074f0:	f019 0f01 	tst.w	r9, #1
 80074f4:	d0de      	beq.n	80074b4 <_dtoa_r+0xa54>
 80074f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074fa:	d1d8      	bne.n	80074ae <_dtoa_r+0xa4e>
 80074fc:	2339      	movs	r3, #57	; 0x39
 80074fe:	9a04      	ldr	r2, [sp, #16]
 8007500:	7013      	strb	r3, [r2, #0]
 8007502:	463b      	mov	r3, r7
 8007504:	461f      	mov	r7, r3
 8007506:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800750a:	3b01      	subs	r3, #1
 800750c:	2a39      	cmp	r2, #57	; 0x39
 800750e:	d06b      	beq.n	80075e8 <_dtoa_r+0xb88>
 8007510:	3201      	adds	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	e74a      	b.n	80073ac <_dtoa_r+0x94c>
 8007516:	2a00      	cmp	r2, #0
 8007518:	dd07      	ble.n	800752a <_dtoa_r+0xaca>
 800751a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800751e:	d0ed      	beq.n	80074fc <_dtoa_r+0xa9c>
 8007520:	9a04      	ldr	r2, [sp, #16]
 8007522:	f109 0301 	add.w	r3, r9, #1
 8007526:	7013      	strb	r3, [r2, #0]
 8007528:	e740      	b.n	80073ac <_dtoa_r+0x94c>
 800752a:	9b08      	ldr	r3, [sp, #32]
 800752c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800752e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007532:	4293      	cmp	r3, r2
 8007534:	d042      	beq.n	80075bc <_dtoa_r+0xb5c>
 8007536:	4651      	mov	r1, sl
 8007538:	2300      	movs	r3, #0
 800753a:	220a      	movs	r2, #10
 800753c:	4628      	mov	r0, r5
 800753e:	f000 f9d1 	bl	80078e4 <__multadd>
 8007542:	45b0      	cmp	r8, r6
 8007544:	4682      	mov	sl, r0
 8007546:	f04f 0300 	mov.w	r3, #0
 800754a:	f04f 020a 	mov.w	r2, #10
 800754e:	4641      	mov	r1, r8
 8007550:	4628      	mov	r0, r5
 8007552:	d107      	bne.n	8007564 <_dtoa_r+0xb04>
 8007554:	f000 f9c6 	bl	80078e4 <__multadd>
 8007558:	4680      	mov	r8, r0
 800755a:	4606      	mov	r6, r0
 800755c:	9b08      	ldr	r3, [sp, #32]
 800755e:	3301      	adds	r3, #1
 8007560:	9308      	str	r3, [sp, #32]
 8007562:	e775      	b.n	8007450 <_dtoa_r+0x9f0>
 8007564:	f000 f9be 	bl	80078e4 <__multadd>
 8007568:	4631      	mov	r1, r6
 800756a:	4680      	mov	r8, r0
 800756c:	2300      	movs	r3, #0
 800756e:	220a      	movs	r2, #10
 8007570:	4628      	mov	r0, r5
 8007572:	f000 f9b7 	bl	80078e4 <__multadd>
 8007576:	4606      	mov	r6, r0
 8007578:	e7f0      	b.n	800755c <_dtoa_r+0xafc>
 800757a:	9b08      	ldr	r3, [sp, #32]
 800757c:	9306      	str	r3, [sp, #24]
 800757e:	9f03      	ldr	r7, [sp, #12]
 8007580:	4621      	mov	r1, r4
 8007582:	4650      	mov	r0, sl
 8007584:	f7ff f9e3 	bl	800694e <quorem>
 8007588:	9b03      	ldr	r3, [sp, #12]
 800758a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800758e:	f807 9b01 	strb.w	r9, [r7], #1
 8007592:	1afa      	subs	r2, r7, r3
 8007594:	9b06      	ldr	r3, [sp, #24]
 8007596:	4293      	cmp	r3, r2
 8007598:	dd07      	ble.n	80075aa <_dtoa_r+0xb4a>
 800759a:	4651      	mov	r1, sl
 800759c:	2300      	movs	r3, #0
 800759e:	220a      	movs	r2, #10
 80075a0:	4628      	mov	r0, r5
 80075a2:	f000 f99f 	bl	80078e4 <__multadd>
 80075a6:	4682      	mov	sl, r0
 80075a8:	e7ea      	b.n	8007580 <_dtoa_r+0xb20>
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	f04f 0800 	mov.w	r8, #0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bfcc      	ite	gt
 80075b4:	461f      	movgt	r7, r3
 80075b6:	2701      	movle	r7, #1
 80075b8:	9b03      	ldr	r3, [sp, #12]
 80075ba:	441f      	add	r7, r3
 80075bc:	4651      	mov	r1, sl
 80075be:	2201      	movs	r2, #1
 80075c0:	4628      	mov	r0, r5
 80075c2:	f000 fb3b 	bl	8007c3c <__lshift>
 80075c6:	4621      	mov	r1, r4
 80075c8:	4682      	mov	sl, r0
 80075ca:	f000 fba3 	bl	8007d14 <__mcmp>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	dc97      	bgt.n	8007502 <_dtoa_r+0xaa2>
 80075d2:	d102      	bne.n	80075da <_dtoa_r+0xb7a>
 80075d4:	f019 0f01 	tst.w	r9, #1
 80075d8:	d193      	bne.n	8007502 <_dtoa_r+0xaa2>
 80075da:	463b      	mov	r3, r7
 80075dc:	461f      	mov	r7, r3
 80075de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075e2:	2a30      	cmp	r2, #48	; 0x30
 80075e4:	d0fa      	beq.n	80075dc <_dtoa_r+0xb7c>
 80075e6:	e6e1      	b.n	80073ac <_dtoa_r+0x94c>
 80075e8:	9a03      	ldr	r2, [sp, #12]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d18a      	bne.n	8007504 <_dtoa_r+0xaa4>
 80075ee:	2331      	movs	r3, #49	; 0x31
 80075f0:	f10b 0b01 	add.w	fp, fp, #1
 80075f4:	e797      	b.n	8007526 <_dtoa_r+0xac6>
 80075f6:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <_dtoa_r+0xbc0>)
 80075f8:	f7ff ba9f 	b.w	8006b3a <_dtoa_r+0xda>
 80075fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f47f aa77 	bne.w	8006af2 <_dtoa_r+0x92>
 8007604:	4b07      	ldr	r3, [pc, #28]	; (8007624 <_dtoa_r+0xbc4>)
 8007606:	f7ff ba98 	b.w	8006b3a <_dtoa_r+0xda>
 800760a:	9b06      	ldr	r3, [sp, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	dcb6      	bgt.n	800757e <_dtoa_r+0xb1e>
 8007610:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007612:	2b02      	cmp	r3, #2
 8007614:	f73f aeb5 	bgt.w	8007382 <_dtoa_r+0x922>
 8007618:	e7b1      	b.n	800757e <_dtoa_r+0xb1e>
 800761a:	bf00      	nop
 800761c:	0800bbea 	.word	0x0800bbea
 8007620:	0800bb4a 	.word	0x0800bb4a
 8007624:	0800bb6e 	.word	0x0800bb6e

08007628 <_free_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4605      	mov	r5, r0
 800762c:	2900      	cmp	r1, #0
 800762e:	d040      	beq.n	80076b2 <_free_r+0x8a>
 8007630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007634:	1f0c      	subs	r4, r1, #4
 8007636:	2b00      	cmp	r3, #0
 8007638:	bfb8      	it	lt
 800763a:	18e4      	addlt	r4, r4, r3
 800763c:	f000 f8e4 	bl	8007808 <__malloc_lock>
 8007640:	4a1c      	ldr	r2, [pc, #112]	; (80076b4 <_free_r+0x8c>)
 8007642:	6813      	ldr	r3, [r2, #0]
 8007644:	b933      	cbnz	r3, 8007654 <_free_r+0x2c>
 8007646:	6063      	str	r3, [r4, #4]
 8007648:	6014      	str	r4, [r2, #0]
 800764a:	4628      	mov	r0, r5
 800764c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007650:	f000 b8e0 	b.w	8007814 <__malloc_unlock>
 8007654:	42a3      	cmp	r3, r4
 8007656:	d908      	bls.n	800766a <_free_r+0x42>
 8007658:	6820      	ldr	r0, [r4, #0]
 800765a:	1821      	adds	r1, r4, r0
 800765c:	428b      	cmp	r3, r1
 800765e:	bf01      	itttt	eq
 8007660:	6819      	ldreq	r1, [r3, #0]
 8007662:	685b      	ldreq	r3, [r3, #4]
 8007664:	1809      	addeq	r1, r1, r0
 8007666:	6021      	streq	r1, [r4, #0]
 8007668:	e7ed      	b.n	8007646 <_free_r+0x1e>
 800766a:	461a      	mov	r2, r3
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	b10b      	cbz	r3, 8007674 <_free_r+0x4c>
 8007670:	42a3      	cmp	r3, r4
 8007672:	d9fa      	bls.n	800766a <_free_r+0x42>
 8007674:	6811      	ldr	r1, [r2, #0]
 8007676:	1850      	adds	r0, r2, r1
 8007678:	42a0      	cmp	r0, r4
 800767a:	d10b      	bne.n	8007694 <_free_r+0x6c>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	4401      	add	r1, r0
 8007680:	1850      	adds	r0, r2, r1
 8007682:	4283      	cmp	r3, r0
 8007684:	6011      	str	r1, [r2, #0]
 8007686:	d1e0      	bne.n	800764a <_free_r+0x22>
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	4408      	add	r0, r1
 800768e:	6010      	str	r0, [r2, #0]
 8007690:	6053      	str	r3, [r2, #4]
 8007692:	e7da      	b.n	800764a <_free_r+0x22>
 8007694:	d902      	bls.n	800769c <_free_r+0x74>
 8007696:	230c      	movs	r3, #12
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	e7d6      	b.n	800764a <_free_r+0x22>
 800769c:	6820      	ldr	r0, [r4, #0]
 800769e:	1821      	adds	r1, r4, r0
 80076a0:	428b      	cmp	r3, r1
 80076a2:	bf01      	itttt	eq
 80076a4:	6819      	ldreq	r1, [r3, #0]
 80076a6:	685b      	ldreq	r3, [r3, #4]
 80076a8:	1809      	addeq	r1, r1, r0
 80076aa:	6021      	streq	r1, [r4, #0]
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	6054      	str	r4, [r2, #4]
 80076b0:	e7cb      	b.n	800764a <_free_r+0x22>
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	20000548 	.word	0x20000548

080076b8 <malloc>:
 80076b8:	4b02      	ldr	r3, [pc, #8]	; (80076c4 <malloc+0xc>)
 80076ba:	4601      	mov	r1, r0
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	f000 b823 	b.w	8007708 <_malloc_r>
 80076c2:	bf00      	nop
 80076c4:	2000006c 	.word	0x2000006c

080076c8 <sbrk_aligned>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4e0e      	ldr	r6, [pc, #56]	; (8007704 <sbrk_aligned+0x3c>)
 80076cc:	460c      	mov	r4, r1
 80076ce:	6831      	ldr	r1, [r6, #0]
 80076d0:	4605      	mov	r5, r0
 80076d2:	b911      	cbnz	r1, 80076da <sbrk_aligned+0x12>
 80076d4:	f000 fe38 	bl	8008348 <_sbrk_r>
 80076d8:	6030      	str	r0, [r6, #0]
 80076da:	4621      	mov	r1, r4
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 fe33 	bl	8008348 <_sbrk_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d00a      	beq.n	80076fc <sbrk_aligned+0x34>
 80076e6:	1cc4      	adds	r4, r0, #3
 80076e8:	f024 0403 	bic.w	r4, r4, #3
 80076ec:	42a0      	cmp	r0, r4
 80076ee:	d007      	beq.n	8007700 <sbrk_aligned+0x38>
 80076f0:	1a21      	subs	r1, r4, r0
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 fe28 	bl	8008348 <_sbrk_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d101      	bne.n	8007700 <sbrk_aligned+0x38>
 80076fc:	f04f 34ff 	mov.w	r4, #4294967295
 8007700:	4620      	mov	r0, r4
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	2000054c 	.word	0x2000054c

08007708 <_malloc_r>:
 8007708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800770c:	1ccd      	adds	r5, r1, #3
 800770e:	f025 0503 	bic.w	r5, r5, #3
 8007712:	3508      	adds	r5, #8
 8007714:	2d0c      	cmp	r5, #12
 8007716:	bf38      	it	cc
 8007718:	250c      	movcc	r5, #12
 800771a:	2d00      	cmp	r5, #0
 800771c:	4607      	mov	r7, r0
 800771e:	db01      	blt.n	8007724 <_malloc_r+0x1c>
 8007720:	42a9      	cmp	r1, r5
 8007722:	d905      	bls.n	8007730 <_malloc_r+0x28>
 8007724:	230c      	movs	r3, #12
 8007726:	2600      	movs	r6, #0
 8007728:	603b      	str	r3, [r7, #0]
 800772a:	4630      	mov	r0, r6
 800772c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007730:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007804 <_malloc_r+0xfc>
 8007734:	f000 f868 	bl	8007808 <__malloc_lock>
 8007738:	f8d8 3000 	ldr.w	r3, [r8]
 800773c:	461c      	mov	r4, r3
 800773e:	bb5c      	cbnz	r4, 8007798 <_malloc_r+0x90>
 8007740:	4629      	mov	r1, r5
 8007742:	4638      	mov	r0, r7
 8007744:	f7ff ffc0 	bl	80076c8 <sbrk_aligned>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	4604      	mov	r4, r0
 800774c:	d155      	bne.n	80077fa <_malloc_r+0xf2>
 800774e:	f8d8 4000 	ldr.w	r4, [r8]
 8007752:	4626      	mov	r6, r4
 8007754:	2e00      	cmp	r6, #0
 8007756:	d145      	bne.n	80077e4 <_malloc_r+0xdc>
 8007758:	2c00      	cmp	r4, #0
 800775a:	d048      	beq.n	80077ee <_malloc_r+0xe6>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	4631      	mov	r1, r6
 8007760:	4638      	mov	r0, r7
 8007762:	eb04 0903 	add.w	r9, r4, r3
 8007766:	f000 fdef 	bl	8008348 <_sbrk_r>
 800776a:	4581      	cmp	r9, r0
 800776c:	d13f      	bne.n	80077ee <_malloc_r+0xe6>
 800776e:	6821      	ldr	r1, [r4, #0]
 8007770:	4638      	mov	r0, r7
 8007772:	1a6d      	subs	r5, r5, r1
 8007774:	4629      	mov	r1, r5
 8007776:	f7ff ffa7 	bl	80076c8 <sbrk_aligned>
 800777a:	3001      	adds	r0, #1
 800777c:	d037      	beq.n	80077ee <_malloc_r+0xe6>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	442b      	add	r3, r5
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	f8d8 3000 	ldr.w	r3, [r8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d038      	beq.n	80077fe <_malloc_r+0xf6>
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	42a2      	cmp	r2, r4
 8007790:	d12b      	bne.n	80077ea <_malloc_r+0xe2>
 8007792:	2200      	movs	r2, #0
 8007794:	605a      	str	r2, [r3, #4]
 8007796:	e00f      	b.n	80077b8 <_malloc_r+0xb0>
 8007798:	6822      	ldr	r2, [r4, #0]
 800779a:	1b52      	subs	r2, r2, r5
 800779c:	d41f      	bmi.n	80077de <_malloc_r+0xd6>
 800779e:	2a0b      	cmp	r2, #11
 80077a0:	d917      	bls.n	80077d2 <_malloc_r+0xca>
 80077a2:	1961      	adds	r1, r4, r5
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	6025      	str	r5, [r4, #0]
 80077a8:	bf18      	it	ne
 80077aa:	6059      	strne	r1, [r3, #4]
 80077ac:	6863      	ldr	r3, [r4, #4]
 80077ae:	bf08      	it	eq
 80077b0:	f8c8 1000 	streq.w	r1, [r8]
 80077b4:	5162      	str	r2, [r4, r5]
 80077b6:	604b      	str	r3, [r1, #4]
 80077b8:	4638      	mov	r0, r7
 80077ba:	f104 060b 	add.w	r6, r4, #11
 80077be:	f000 f829 	bl	8007814 <__malloc_unlock>
 80077c2:	f026 0607 	bic.w	r6, r6, #7
 80077c6:	1d23      	adds	r3, r4, #4
 80077c8:	1af2      	subs	r2, r6, r3
 80077ca:	d0ae      	beq.n	800772a <_malloc_r+0x22>
 80077cc:	1b9b      	subs	r3, r3, r6
 80077ce:	50a3      	str	r3, [r4, r2]
 80077d0:	e7ab      	b.n	800772a <_malloc_r+0x22>
 80077d2:	42a3      	cmp	r3, r4
 80077d4:	6862      	ldr	r2, [r4, #4]
 80077d6:	d1dd      	bne.n	8007794 <_malloc_r+0x8c>
 80077d8:	f8c8 2000 	str.w	r2, [r8]
 80077dc:	e7ec      	b.n	80077b8 <_malloc_r+0xb0>
 80077de:	4623      	mov	r3, r4
 80077e0:	6864      	ldr	r4, [r4, #4]
 80077e2:	e7ac      	b.n	800773e <_malloc_r+0x36>
 80077e4:	4634      	mov	r4, r6
 80077e6:	6876      	ldr	r6, [r6, #4]
 80077e8:	e7b4      	b.n	8007754 <_malloc_r+0x4c>
 80077ea:	4613      	mov	r3, r2
 80077ec:	e7cc      	b.n	8007788 <_malloc_r+0x80>
 80077ee:	230c      	movs	r3, #12
 80077f0:	4638      	mov	r0, r7
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	f000 f80e 	bl	8007814 <__malloc_unlock>
 80077f8:	e797      	b.n	800772a <_malloc_r+0x22>
 80077fa:	6025      	str	r5, [r4, #0]
 80077fc:	e7dc      	b.n	80077b8 <_malloc_r+0xb0>
 80077fe:	605b      	str	r3, [r3, #4]
 8007800:	deff      	udf	#255	; 0xff
 8007802:	bf00      	nop
 8007804:	20000548 	.word	0x20000548

08007808 <__malloc_lock>:
 8007808:	4801      	ldr	r0, [pc, #4]	; (8007810 <__malloc_lock+0x8>)
 800780a:	f7ff b890 	b.w	800692e <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	20000544 	.word	0x20000544

08007814 <__malloc_unlock>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__malloc_unlock+0x8>)
 8007816:	f7ff b88b 	b.w	8006930 <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	20000544 	.word	0x20000544

08007820 <_Balloc>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	69c6      	ldr	r6, [r0, #28]
 8007824:	4604      	mov	r4, r0
 8007826:	460d      	mov	r5, r1
 8007828:	b976      	cbnz	r6, 8007848 <_Balloc+0x28>
 800782a:	2010      	movs	r0, #16
 800782c:	f7ff ff44 	bl	80076b8 <malloc>
 8007830:	4602      	mov	r2, r0
 8007832:	61e0      	str	r0, [r4, #28]
 8007834:	b920      	cbnz	r0, 8007840 <_Balloc+0x20>
 8007836:	216b      	movs	r1, #107	; 0x6b
 8007838:	4b17      	ldr	r3, [pc, #92]	; (8007898 <_Balloc+0x78>)
 800783a:	4818      	ldr	r0, [pc, #96]	; (800789c <_Balloc+0x7c>)
 800783c:	f000 fda2 	bl	8008384 <__assert_func>
 8007840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007844:	6006      	str	r6, [r0, #0]
 8007846:	60c6      	str	r6, [r0, #12]
 8007848:	69e6      	ldr	r6, [r4, #28]
 800784a:	68f3      	ldr	r3, [r6, #12]
 800784c:	b183      	cbz	r3, 8007870 <_Balloc+0x50>
 800784e:	69e3      	ldr	r3, [r4, #28]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007856:	b9b8      	cbnz	r0, 8007888 <_Balloc+0x68>
 8007858:	2101      	movs	r1, #1
 800785a:	fa01 f605 	lsl.w	r6, r1, r5
 800785e:	1d72      	adds	r2, r6, #5
 8007860:	4620      	mov	r0, r4
 8007862:	0092      	lsls	r2, r2, #2
 8007864:	f000 fdac 	bl	80083c0 <_calloc_r>
 8007868:	b160      	cbz	r0, 8007884 <_Balloc+0x64>
 800786a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800786e:	e00e      	b.n	800788e <_Balloc+0x6e>
 8007870:	2221      	movs	r2, #33	; 0x21
 8007872:	2104      	movs	r1, #4
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fda3 	bl	80083c0 <_calloc_r>
 800787a:	69e3      	ldr	r3, [r4, #28]
 800787c:	60f0      	str	r0, [r6, #12]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e4      	bne.n	800784e <_Balloc+0x2e>
 8007884:	2000      	movs	r0, #0
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	6802      	ldr	r2, [r0, #0]
 800788a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800788e:	2300      	movs	r3, #0
 8007890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007894:	e7f7      	b.n	8007886 <_Balloc+0x66>
 8007896:	bf00      	nop
 8007898:	0800bb7b 	.word	0x0800bb7b
 800789c:	0800bbfb 	.word	0x0800bbfb

080078a0 <_Bfree>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	69c6      	ldr	r6, [r0, #28]
 80078a4:	4605      	mov	r5, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	b976      	cbnz	r6, 80078c8 <_Bfree+0x28>
 80078aa:	2010      	movs	r0, #16
 80078ac:	f7ff ff04 	bl	80076b8 <malloc>
 80078b0:	4602      	mov	r2, r0
 80078b2:	61e8      	str	r0, [r5, #28]
 80078b4:	b920      	cbnz	r0, 80078c0 <_Bfree+0x20>
 80078b6:	218f      	movs	r1, #143	; 0x8f
 80078b8:	4b08      	ldr	r3, [pc, #32]	; (80078dc <_Bfree+0x3c>)
 80078ba:	4809      	ldr	r0, [pc, #36]	; (80078e0 <_Bfree+0x40>)
 80078bc:	f000 fd62 	bl	8008384 <__assert_func>
 80078c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078c4:	6006      	str	r6, [r0, #0]
 80078c6:	60c6      	str	r6, [r0, #12]
 80078c8:	b13c      	cbz	r4, 80078da <_Bfree+0x3a>
 80078ca:	69eb      	ldr	r3, [r5, #28]
 80078cc:	6862      	ldr	r2, [r4, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078d4:	6021      	str	r1, [r4, #0]
 80078d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078da:	bd70      	pop	{r4, r5, r6, pc}
 80078dc:	0800bb7b 	.word	0x0800bb7b
 80078e0:	0800bbfb 	.word	0x0800bbfb

080078e4 <__multadd>:
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	4607      	mov	r7, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	461e      	mov	r6, r3
 80078ee:	2000      	movs	r0, #0
 80078f0:	690d      	ldr	r5, [r1, #16]
 80078f2:	f101 0c14 	add.w	ip, r1, #20
 80078f6:	f8dc 3000 	ldr.w	r3, [ip]
 80078fa:	3001      	adds	r0, #1
 80078fc:	b299      	uxth	r1, r3
 80078fe:	fb02 6101 	mla	r1, r2, r1, r6
 8007902:	0c1e      	lsrs	r6, r3, #16
 8007904:	0c0b      	lsrs	r3, r1, #16
 8007906:	fb02 3306 	mla	r3, r2, r6, r3
 800790a:	b289      	uxth	r1, r1
 800790c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007910:	4285      	cmp	r5, r0
 8007912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007916:	f84c 1b04 	str.w	r1, [ip], #4
 800791a:	dcec      	bgt.n	80078f6 <__multadd+0x12>
 800791c:	b30e      	cbz	r6, 8007962 <__multadd+0x7e>
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	42ab      	cmp	r3, r5
 8007922:	dc19      	bgt.n	8007958 <__multadd+0x74>
 8007924:	6861      	ldr	r1, [r4, #4]
 8007926:	4638      	mov	r0, r7
 8007928:	3101      	adds	r1, #1
 800792a:	f7ff ff79 	bl	8007820 <_Balloc>
 800792e:	4680      	mov	r8, r0
 8007930:	b928      	cbnz	r0, 800793e <__multadd+0x5a>
 8007932:	4602      	mov	r2, r0
 8007934:	21ba      	movs	r1, #186	; 0xba
 8007936:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <__multadd+0x84>)
 8007938:	480c      	ldr	r0, [pc, #48]	; (800796c <__multadd+0x88>)
 800793a:	f000 fd23 	bl	8008384 <__assert_func>
 800793e:	6922      	ldr	r2, [r4, #16]
 8007940:	f104 010c 	add.w	r1, r4, #12
 8007944:	3202      	adds	r2, #2
 8007946:	0092      	lsls	r2, r2, #2
 8007948:	300c      	adds	r0, #12
 800794a:	f000 fd0d 	bl	8008368 <memcpy>
 800794e:	4621      	mov	r1, r4
 8007950:	4638      	mov	r0, r7
 8007952:	f7ff ffa5 	bl	80078a0 <_Bfree>
 8007956:	4644      	mov	r4, r8
 8007958:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800795c:	3501      	adds	r5, #1
 800795e:	615e      	str	r6, [r3, #20]
 8007960:	6125      	str	r5, [r4, #16]
 8007962:	4620      	mov	r0, r4
 8007964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007968:	0800bbea 	.word	0x0800bbea
 800796c:	0800bbfb 	.word	0x0800bbfb

08007970 <__hi0bits>:
 8007970:	0c02      	lsrs	r2, r0, #16
 8007972:	0412      	lsls	r2, r2, #16
 8007974:	4603      	mov	r3, r0
 8007976:	b9ca      	cbnz	r2, 80079ac <__hi0bits+0x3c>
 8007978:	0403      	lsls	r3, r0, #16
 800797a:	2010      	movs	r0, #16
 800797c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007980:	bf04      	itt	eq
 8007982:	021b      	lsleq	r3, r3, #8
 8007984:	3008      	addeq	r0, #8
 8007986:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800798a:	bf04      	itt	eq
 800798c:	011b      	lsleq	r3, r3, #4
 800798e:	3004      	addeq	r0, #4
 8007990:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007994:	bf04      	itt	eq
 8007996:	009b      	lsleq	r3, r3, #2
 8007998:	3002      	addeq	r0, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	db05      	blt.n	80079aa <__hi0bits+0x3a>
 800799e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80079a2:	f100 0001 	add.w	r0, r0, #1
 80079a6:	bf08      	it	eq
 80079a8:	2020      	moveq	r0, #32
 80079aa:	4770      	bx	lr
 80079ac:	2000      	movs	r0, #0
 80079ae:	e7e5      	b.n	800797c <__hi0bits+0xc>

080079b0 <__lo0bits>:
 80079b0:	6803      	ldr	r3, [r0, #0]
 80079b2:	4602      	mov	r2, r0
 80079b4:	f013 0007 	ands.w	r0, r3, #7
 80079b8:	d00b      	beq.n	80079d2 <__lo0bits+0x22>
 80079ba:	07d9      	lsls	r1, r3, #31
 80079bc:	d421      	bmi.n	8007a02 <__lo0bits+0x52>
 80079be:	0798      	lsls	r0, r3, #30
 80079c0:	bf49      	itett	mi
 80079c2:	085b      	lsrmi	r3, r3, #1
 80079c4:	089b      	lsrpl	r3, r3, #2
 80079c6:	2001      	movmi	r0, #1
 80079c8:	6013      	strmi	r3, [r2, #0]
 80079ca:	bf5c      	itt	pl
 80079cc:	2002      	movpl	r0, #2
 80079ce:	6013      	strpl	r3, [r2, #0]
 80079d0:	4770      	bx	lr
 80079d2:	b299      	uxth	r1, r3
 80079d4:	b909      	cbnz	r1, 80079da <__lo0bits+0x2a>
 80079d6:	2010      	movs	r0, #16
 80079d8:	0c1b      	lsrs	r3, r3, #16
 80079da:	b2d9      	uxtb	r1, r3
 80079dc:	b909      	cbnz	r1, 80079e2 <__lo0bits+0x32>
 80079de:	3008      	adds	r0, #8
 80079e0:	0a1b      	lsrs	r3, r3, #8
 80079e2:	0719      	lsls	r1, r3, #28
 80079e4:	bf04      	itt	eq
 80079e6:	091b      	lsreq	r3, r3, #4
 80079e8:	3004      	addeq	r0, #4
 80079ea:	0799      	lsls	r1, r3, #30
 80079ec:	bf04      	itt	eq
 80079ee:	089b      	lsreq	r3, r3, #2
 80079f0:	3002      	addeq	r0, #2
 80079f2:	07d9      	lsls	r1, r3, #31
 80079f4:	d403      	bmi.n	80079fe <__lo0bits+0x4e>
 80079f6:	085b      	lsrs	r3, r3, #1
 80079f8:	f100 0001 	add.w	r0, r0, #1
 80079fc:	d003      	beq.n	8007a06 <__lo0bits+0x56>
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	4770      	bx	lr
 8007a02:	2000      	movs	r0, #0
 8007a04:	4770      	bx	lr
 8007a06:	2020      	movs	r0, #32
 8007a08:	4770      	bx	lr
	...

08007a0c <__i2b>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	460c      	mov	r4, r1
 8007a10:	2101      	movs	r1, #1
 8007a12:	f7ff ff05 	bl	8007820 <_Balloc>
 8007a16:	4602      	mov	r2, r0
 8007a18:	b928      	cbnz	r0, 8007a26 <__i2b+0x1a>
 8007a1a:	f240 1145 	movw	r1, #325	; 0x145
 8007a1e:	4b04      	ldr	r3, [pc, #16]	; (8007a30 <__i2b+0x24>)
 8007a20:	4804      	ldr	r0, [pc, #16]	; (8007a34 <__i2b+0x28>)
 8007a22:	f000 fcaf 	bl	8008384 <__assert_func>
 8007a26:	2301      	movs	r3, #1
 8007a28:	6144      	str	r4, [r0, #20]
 8007a2a:	6103      	str	r3, [r0, #16]
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	bf00      	nop
 8007a30:	0800bbea 	.word	0x0800bbea
 8007a34:	0800bbfb 	.word	0x0800bbfb

08007a38 <__multiply>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	4691      	mov	r9, r2
 8007a3e:	690a      	ldr	r2, [r1, #16]
 8007a40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a44:	460c      	mov	r4, r1
 8007a46:	429a      	cmp	r2, r3
 8007a48:	bfbe      	ittt	lt
 8007a4a:	460b      	movlt	r3, r1
 8007a4c:	464c      	movlt	r4, r9
 8007a4e:	4699      	movlt	r9, r3
 8007a50:	6927      	ldr	r7, [r4, #16]
 8007a52:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a56:	68a3      	ldr	r3, [r4, #8]
 8007a58:	6861      	ldr	r1, [r4, #4]
 8007a5a:	eb07 060a 	add.w	r6, r7, sl
 8007a5e:	42b3      	cmp	r3, r6
 8007a60:	b085      	sub	sp, #20
 8007a62:	bfb8      	it	lt
 8007a64:	3101      	addlt	r1, #1
 8007a66:	f7ff fedb 	bl	8007820 <_Balloc>
 8007a6a:	b930      	cbnz	r0, 8007a7a <__multiply+0x42>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a72:	4b43      	ldr	r3, [pc, #268]	; (8007b80 <__multiply+0x148>)
 8007a74:	4843      	ldr	r0, [pc, #268]	; (8007b84 <__multiply+0x14c>)
 8007a76:	f000 fc85 	bl	8008384 <__assert_func>
 8007a7a:	f100 0514 	add.w	r5, r0, #20
 8007a7e:	462b      	mov	r3, r5
 8007a80:	2200      	movs	r2, #0
 8007a82:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a86:	4543      	cmp	r3, r8
 8007a88:	d321      	bcc.n	8007ace <__multiply+0x96>
 8007a8a:	f104 0314 	add.w	r3, r4, #20
 8007a8e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a92:	f109 0314 	add.w	r3, r9, #20
 8007a96:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a9a:	9202      	str	r2, [sp, #8]
 8007a9c:	1b3a      	subs	r2, r7, r4
 8007a9e:	3a15      	subs	r2, #21
 8007aa0:	f022 0203 	bic.w	r2, r2, #3
 8007aa4:	3204      	adds	r2, #4
 8007aa6:	f104 0115 	add.w	r1, r4, #21
 8007aaa:	428f      	cmp	r7, r1
 8007aac:	bf38      	it	cc
 8007aae:	2204      	movcc	r2, #4
 8007ab0:	9201      	str	r2, [sp, #4]
 8007ab2:	9a02      	ldr	r2, [sp, #8]
 8007ab4:	9303      	str	r3, [sp, #12]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d80c      	bhi.n	8007ad4 <__multiply+0x9c>
 8007aba:	2e00      	cmp	r6, #0
 8007abc:	dd03      	ble.n	8007ac6 <__multiply+0x8e>
 8007abe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d05a      	beq.n	8007b7c <__multiply+0x144>
 8007ac6:	6106      	str	r6, [r0, #16]
 8007ac8:	b005      	add	sp, #20
 8007aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ace:	f843 2b04 	str.w	r2, [r3], #4
 8007ad2:	e7d8      	b.n	8007a86 <__multiply+0x4e>
 8007ad4:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ad8:	f1ba 0f00 	cmp.w	sl, #0
 8007adc:	d023      	beq.n	8007b26 <__multiply+0xee>
 8007ade:	46a9      	mov	r9, r5
 8007ae0:	f04f 0c00 	mov.w	ip, #0
 8007ae4:	f104 0e14 	add.w	lr, r4, #20
 8007ae8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007aec:	f8d9 1000 	ldr.w	r1, [r9]
 8007af0:	fa1f fb82 	uxth.w	fp, r2
 8007af4:	b289      	uxth	r1, r1
 8007af6:	fb0a 110b 	mla	r1, sl, fp, r1
 8007afa:	4461      	add	r1, ip
 8007afc:	f8d9 c000 	ldr.w	ip, [r9]
 8007b00:	0c12      	lsrs	r2, r2, #16
 8007b02:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007b06:	fb0a c202 	mla	r2, sl, r2, ip
 8007b0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b0e:	b289      	uxth	r1, r1
 8007b10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b14:	4577      	cmp	r7, lr
 8007b16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b1a:	f849 1b04 	str.w	r1, [r9], #4
 8007b1e:	d8e3      	bhi.n	8007ae8 <__multiply+0xb0>
 8007b20:	9a01      	ldr	r2, [sp, #4]
 8007b22:	f845 c002 	str.w	ip, [r5, r2]
 8007b26:	9a03      	ldr	r2, [sp, #12]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b2e:	f1b9 0f00 	cmp.w	r9, #0
 8007b32:	d021      	beq.n	8007b78 <__multiply+0x140>
 8007b34:	46ae      	mov	lr, r5
 8007b36:	f04f 0a00 	mov.w	sl, #0
 8007b3a:	6829      	ldr	r1, [r5, #0]
 8007b3c:	f104 0c14 	add.w	ip, r4, #20
 8007b40:	f8bc b000 	ldrh.w	fp, [ip]
 8007b44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b48:	b289      	uxth	r1, r1
 8007b4a:	fb09 220b 	mla	r2, r9, fp, r2
 8007b4e:	4452      	add	r2, sl
 8007b50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b54:	f84e 1b04 	str.w	r1, [lr], #4
 8007b58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b60:	f8be 1000 	ldrh.w	r1, [lr]
 8007b64:	4567      	cmp	r7, ip
 8007b66:	fb09 110a 	mla	r1, r9, sl, r1
 8007b6a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b72:	d8e5      	bhi.n	8007b40 <__multiply+0x108>
 8007b74:	9a01      	ldr	r2, [sp, #4]
 8007b76:	50a9      	str	r1, [r5, r2]
 8007b78:	3504      	adds	r5, #4
 8007b7a:	e79a      	b.n	8007ab2 <__multiply+0x7a>
 8007b7c:	3e01      	subs	r6, #1
 8007b7e:	e79c      	b.n	8007aba <__multiply+0x82>
 8007b80:	0800bbea 	.word	0x0800bbea
 8007b84:	0800bbfb 	.word	0x0800bbfb

08007b88 <__pow5mult>:
 8007b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	4615      	mov	r5, r2
 8007b8e:	f012 0203 	ands.w	r2, r2, #3
 8007b92:	4606      	mov	r6, r0
 8007b94:	460f      	mov	r7, r1
 8007b96:	d007      	beq.n	8007ba8 <__pow5mult+0x20>
 8007b98:	4c25      	ldr	r4, [pc, #148]	; (8007c30 <__pow5mult+0xa8>)
 8007b9a:	3a01      	subs	r2, #1
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ba2:	f7ff fe9f 	bl	80078e4 <__multadd>
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	10ad      	asrs	r5, r5, #2
 8007baa:	d03d      	beq.n	8007c28 <__pow5mult+0xa0>
 8007bac:	69f4      	ldr	r4, [r6, #28]
 8007bae:	b97c      	cbnz	r4, 8007bd0 <__pow5mult+0x48>
 8007bb0:	2010      	movs	r0, #16
 8007bb2:	f7ff fd81 	bl	80076b8 <malloc>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	61f0      	str	r0, [r6, #28]
 8007bba:	b928      	cbnz	r0, 8007bc8 <__pow5mult+0x40>
 8007bbc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007bc0:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <__pow5mult+0xac>)
 8007bc2:	481d      	ldr	r0, [pc, #116]	; (8007c38 <__pow5mult+0xb0>)
 8007bc4:	f000 fbde 	bl	8008384 <__assert_func>
 8007bc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bcc:	6004      	str	r4, [r0, #0]
 8007bce:	60c4      	str	r4, [r0, #12]
 8007bd0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007bd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bd8:	b94c      	cbnz	r4, 8007bee <__pow5mult+0x66>
 8007bda:	f240 2171 	movw	r1, #625	; 0x271
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7ff ff14 	bl	8007a0c <__i2b>
 8007be4:	2300      	movs	r3, #0
 8007be6:	4604      	mov	r4, r0
 8007be8:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bec:	6003      	str	r3, [r0, #0]
 8007bee:	f04f 0900 	mov.w	r9, #0
 8007bf2:	07eb      	lsls	r3, r5, #31
 8007bf4:	d50a      	bpl.n	8007c0c <__pow5mult+0x84>
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f7ff ff1c 	bl	8007a38 <__multiply>
 8007c00:	4680      	mov	r8, r0
 8007c02:	4639      	mov	r1, r7
 8007c04:	4630      	mov	r0, r6
 8007c06:	f7ff fe4b 	bl	80078a0 <_Bfree>
 8007c0a:	4647      	mov	r7, r8
 8007c0c:	106d      	asrs	r5, r5, #1
 8007c0e:	d00b      	beq.n	8007c28 <__pow5mult+0xa0>
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	b938      	cbnz	r0, 8007c24 <__pow5mult+0x9c>
 8007c14:	4622      	mov	r2, r4
 8007c16:	4621      	mov	r1, r4
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f7ff ff0d 	bl	8007a38 <__multiply>
 8007c1e:	6020      	str	r0, [r4, #0]
 8007c20:	f8c0 9000 	str.w	r9, [r0]
 8007c24:	4604      	mov	r4, r0
 8007c26:	e7e4      	b.n	8007bf2 <__pow5mult+0x6a>
 8007c28:	4638      	mov	r0, r7
 8007c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c2e:	bf00      	nop
 8007c30:	0800bd48 	.word	0x0800bd48
 8007c34:	0800bb7b 	.word	0x0800bb7b
 8007c38:	0800bbfb 	.word	0x0800bbfb

08007c3c <__lshift>:
 8007c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	460c      	mov	r4, r1
 8007c42:	4607      	mov	r7, r0
 8007c44:	4691      	mov	r9, r2
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	6849      	ldr	r1, [r1, #4]
 8007c4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c4e:	68a3      	ldr	r3, [r4, #8]
 8007c50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c54:	f108 0601 	add.w	r6, r8, #1
 8007c58:	42b3      	cmp	r3, r6
 8007c5a:	db0b      	blt.n	8007c74 <__lshift+0x38>
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7ff fddf 	bl	8007820 <_Balloc>
 8007c62:	4605      	mov	r5, r0
 8007c64:	b948      	cbnz	r0, 8007c7a <__lshift+0x3e>
 8007c66:	4602      	mov	r2, r0
 8007c68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c6c:	4b27      	ldr	r3, [pc, #156]	; (8007d0c <__lshift+0xd0>)
 8007c6e:	4828      	ldr	r0, [pc, #160]	; (8007d10 <__lshift+0xd4>)
 8007c70:	f000 fb88 	bl	8008384 <__assert_func>
 8007c74:	3101      	adds	r1, #1
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	e7ee      	b.n	8007c58 <__lshift+0x1c>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f100 0114 	add.w	r1, r0, #20
 8007c80:	f100 0210 	add.w	r2, r0, #16
 8007c84:	4618      	mov	r0, r3
 8007c86:	4553      	cmp	r3, sl
 8007c88:	db33      	blt.n	8007cf2 <__lshift+0xb6>
 8007c8a:	6920      	ldr	r0, [r4, #16]
 8007c8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c90:	f104 0314 	add.w	r3, r4, #20
 8007c94:	f019 091f 	ands.w	r9, r9, #31
 8007c98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ca0:	d02b      	beq.n	8007cfa <__lshift+0xbe>
 8007ca2:	468a      	mov	sl, r1
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f1c9 0e20 	rsb	lr, r9, #32
 8007caa:	6818      	ldr	r0, [r3, #0]
 8007cac:	fa00 f009 	lsl.w	r0, r0, r9
 8007cb0:	4310      	orrs	r0, r2
 8007cb2:	f84a 0b04 	str.w	r0, [sl], #4
 8007cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cba:	459c      	cmp	ip, r3
 8007cbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cc0:	d8f3      	bhi.n	8007caa <__lshift+0x6e>
 8007cc2:	ebac 0304 	sub.w	r3, ip, r4
 8007cc6:	3b15      	subs	r3, #21
 8007cc8:	f023 0303 	bic.w	r3, r3, #3
 8007ccc:	3304      	adds	r3, #4
 8007cce:	f104 0015 	add.w	r0, r4, #21
 8007cd2:	4584      	cmp	ip, r0
 8007cd4:	bf38      	it	cc
 8007cd6:	2304      	movcc	r3, #4
 8007cd8:	50ca      	str	r2, [r1, r3]
 8007cda:	b10a      	cbz	r2, 8007ce0 <__lshift+0xa4>
 8007cdc:	f108 0602 	add.w	r6, r8, #2
 8007ce0:	3e01      	subs	r6, #1
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	612e      	str	r6, [r5, #16]
 8007ce8:	f7ff fdda 	bl	80078a0 <_Bfree>
 8007cec:	4628      	mov	r0, r5
 8007cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	e7c5      	b.n	8007c86 <__lshift+0x4a>
 8007cfa:	3904      	subs	r1, #4
 8007cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d00:	459c      	cmp	ip, r3
 8007d02:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d06:	d8f9      	bhi.n	8007cfc <__lshift+0xc0>
 8007d08:	e7ea      	b.n	8007ce0 <__lshift+0xa4>
 8007d0a:	bf00      	nop
 8007d0c:	0800bbea 	.word	0x0800bbea
 8007d10:	0800bbfb 	.word	0x0800bbfb

08007d14 <__mcmp>:
 8007d14:	4603      	mov	r3, r0
 8007d16:	690a      	ldr	r2, [r1, #16]
 8007d18:	6900      	ldr	r0, [r0, #16]
 8007d1a:	b530      	push	{r4, r5, lr}
 8007d1c:	1a80      	subs	r0, r0, r2
 8007d1e:	d10d      	bne.n	8007d3c <__mcmp+0x28>
 8007d20:	3314      	adds	r3, #20
 8007d22:	3114      	adds	r1, #20
 8007d24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d34:	4295      	cmp	r5, r2
 8007d36:	d002      	beq.n	8007d3e <__mcmp+0x2a>
 8007d38:	d304      	bcc.n	8007d44 <__mcmp+0x30>
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	bd30      	pop	{r4, r5, pc}
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	d3f4      	bcc.n	8007d2c <__mcmp+0x18>
 8007d42:	e7fb      	b.n	8007d3c <__mcmp+0x28>
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	e7f8      	b.n	8007d3c <__mcmp+0x28>
	...

08007d4c <__mdiff>:
 8007d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	460d      	mov	r5, r1
 8007d52:	4607      	mov	r7, r0
 8007d54:	4611      	mov	r1, r2
 8007d56:	4628      	mov	r0, r5
 8007d58:	4614      	mov	r4, r2
 8007d5a:	f7ff ffdb 	bl	8007d14 <__mcmp>
 8007d5e:	1e06      	subs	r6, r0, #0
 8007d60:	d111      	bne.n	8007d86 <__mdiff+0x3a>
 8007d62:	4631      	mov	r1, r6
 8007d64:	4638      	mov	r0, r7
 8007d66:	f7ff fd5b 	bl	8007820 <_Balloc>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	b928      	cbnz	r0, 8007d7a <__mdiff+0x2e>
 8007d6e:	f240 2137 	movw	r1, #567	; 0x237
 8007d72:	4b3a      	ldr	r3, [pc, #232]	; (8007e5c <__mdiff+0x110>)
 8007d74:	483a      	ldr	r0, [pc, #232]	; (8007e60 <__mdiff+0x114>)
 8007d76:	f000 fb05 	bl	8008384 <__assert_func>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d80:	4610      	mov	r0, r2
 8007d82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d86:	bfa4      	itt	ge
 8007d88:	4623      	movge	r3, r4
 8007d8a:	462c      	movge	r4, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	6861      	ldr	r1, [r4, #4]
 8007d90:	bfa6      	itte	ge
 8007d92:	461d      	movge	r5, r3
 8007d94:	2600      	movge	r6, #0
 8007d96:	2601      	movlt	r6, #1
 8007d98:	f7ff fd42 	bl	8007820 <_Balloc>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	b918      	cbnz	r0, 8007da8 <__mdiff+0x5c>
 8007da0:	f240 2145 	movw	r1, #581	; 0x245
 8007da4:	4b2d      	ldr	r3, [pc, #180]	; (8007e5c <__mdiff+0x110>)
 8007da6:	e7e5      	b.n	8007d74 <__mdiff+0x28>
 8007da8:	f102 0814 	add.w	r8, r2, #20
 8007dac:	46c2      	mov	sl, r8
 8007dae:	f04f 0c00 	mov.w	ip, #0
 8007db2:	6927      	ldr	r7, [r4, #16]
 8007db4:	60c6      	str	r6, [r0, #12]
 8007db6:	692e      	ldr	r6, [r5, #16]
 8007db8:	f104 0014 	add.w	r0, r4, #20
 8007dbc:	f105 0914 	add.w	r9, r5, #20
 8007dc0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007dc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007dc8:	3410      	adds	r4, #16
 8007dca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007dce:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dd2:	fa1f f18b 	uxth.w	r1, fp
 8007dd6:	4461      	add	r1, ip
 8007dd8:	fa1f fc83 	uxth.w	ip, r3
 8007ddc:	0c1b      	lsrs	r3, r3, #16
 8007dde:	eba1 010c 	sub.w	r1, r1, ip
 8007de2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007de6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007dea:	b289      	uxth	r1, r1
 8007dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007df0:	454e      	cmp	r6, r9
 8007df2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007df6:	f84a 1b04 	str.w	r1, [sl], #4
 8007dfa:	d8e6      	bhi.n	8007dca <__mdiff+0x7e>
 8007dfc:	1b73      	subs	r3, r6, r5
 8007dfe:	3b15      	subs	r3, #21
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	3515      	adds	r5, #21
 8007e06:	3304      	adds	r3, #4
 8007e08:	42ae      	cmp	r6, r5
 8007e0a:	bf38      	it	cc
 8007e0c:	2304      	movcc	r3, #4
 8007e0e:	4418      	add	r0, r3
 8007e10:	4443      	add	r3, r8
 8007e12:	461e      	mov	r6, r3
 8007e14:	4605      	mov	r5, r0
 8007e16:	4575      	cmp	r5, lr
 8007e18:	d30e      	bcc.n	8007e38 <__mdiff+0xec>
 8007e1a:	f10e 0103 	add.w	r1, lr, #3
 8007e1e:	1a09      	subs	r1, r1, r0
 8007e20:	f021 0103 	bic.w	r1, r1, #3
 8007e24:	3803      	subs	r0, #3
 8007e26:	4586      	cmp	lr, r0
 8007e28:	bf38      	it	cc
 8007e2a:	2100      	movcc	r1, #0
 8007e2c:	440b      	add	r3, r1
 8007e2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e32:	b189      	cbz	r1, 8007e58 <__mdiff+0x10c>
 8007e34:	6117      	str	r7, [r2, #16]
 8007e36:	e7a3      	b.n	8007d80 <__mdiff+0x34>
 8007e38:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e3c:	fa1f f188 	uxth.w	r1, r8
 8007e40:	4461      	add	r1, ip
 8007e42:	140c      	asrs	r4, r1, #16
 8007e44:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e48:	b289      	uxth	r1, r1
 8007e4a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e4e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007e52:	f846 1b04 	str.w	r1, [r6], #4
 8007e56:	e7de      	b.n	8007e16 <__mdiff+0xca>
 8007e58:	3f01      	subs	r7, #1
 8007e5a:	e7e8      	b.n	8007e2e <__mdiff+0xe2>
 8007e5c:	0800bbea 	.word	0x0800bbea
 8007e60:	0800bbfb 	.word	0x0800bbfb

08007e64 <__d2b>:
 8007e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e66:	2101      	movs	r1, #1
 8007e68:	4617      	mov	r7, r2
 8007e6a:	461c      	mov	r4, r3
 8007e6c:	9e08      	ldr	r6, [sp, #32]
 8007e6e:	f7ff fcd7 	bl	8007820 <_Balloc>
 8007e72:	4605      	mov	r5, r0
 8007e74:	b930      	cbnz	r0, 8007e84 <__d2b+0x20>
 8007e76:	4602      	mov	r2, r0
 8007e78:	f240 310f 	movw	r1, #783	; 0x30f
 8007e7c:	4b22      	ldr	r3, [pc, #136]	; (8007f08 <__d2b+0xa4>)
 8007e7e:	4823      	ldr	r0, [pc, #140]	; (8007f0c <__d2b+0xa8>)
 8007e80:	f000 fa80 	bl	8008384 <__assert_func>
 8007e84:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007e88:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007e8c:	bb24      	cbnz	r4, 8007ed8 <__d2b+0x74>
 8007e8e:	2f00      	cmp	r7, #0
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	d026      	beq.n	8007ee2 <__d2b+0x7e>
 8007e94:	4668      	mov	r0, sp
 8007e96:	9700      	str	r7, [sp, #0]
 8007e98:	f7ff fd8a 	bl	80079b0 <__lo0bits>
 8007e9c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ea0:	b1e8      	cbz	r0, 8007ede <__d2b+0x7a>
 8007ea2:	f1c0 0320 	rsb	r3, r0, #32
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	40c2      	lsrs	r2, r0
 8007eae:	616b      	str	r3, [r5, #20]
 8007eb0:	9201      	str	r2, [sp, #4]
 8007eb2:	9b01      	ldr	r3, [sp, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bf14      	ite	ne
 8007eb8:	2102      	movne	r1, #2
 8007eba:	2101      	moveq	r1, #1
 8007ebc:	61ab      	str	r3, [r5, #24]
 8007ebe:	6129      	str	r1, [r5, #16]
 8007ec0:	b1bc      	cbz	r4, 8007ef2 <__d2b+0x8e>
 8007ec2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007ec6:	4404      	add	r4, r0
 8007ec8:	6034      	str	r4, [r6, #0]
 8007eca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed0:	6018      	str	r0, [r3, #0]
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	b003      	add	sp, #12
 8007ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007edc:	e7d7      	b.n	8007e8e <__d2b+0x2a>
 8007ede:	6169      	str	r1, [r5, #20]
 8007ee0:	e7e7      	b.n	8007eb2 <__d2b+0x4e>
 8007ee2:	a801      	add	r0, sp, #4
 8007ee4:	f7ff fd64 	bl	80079b0 <__lo0bits>
 8007ee8:	9b01      	ldr	r3, [sp, #4]
 8007eea:	2101      	movs	r1, #1
 8007eec:	616b      	str	r3, [r5, #20]
 8007eee:	3020      	adds	r0, #32
 8007ef0:	e7e5      	b.n	8007ebe <__d2b+0x5a>
 8007ef2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ef6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007efa:	6030      	str	r0, [r6, #0]
 8007efc:	6918      	ldr	r0, [r3, #16]
 8007efe:	f7ff fd37 	bl	8007970 <__hi0bits>
 8007f02:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f06:	e7e2      	b.n	8007ece <__d2b+0x6a>
 8007f08:	0800bbea 	.word	0x0800bbea
 8007f0c:	0800bbfb 	.word	0x0800bbfb

08007f10 <__ssputs_r>:
 8007f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f14:	461f      	mov	r7, r3
 8007f16:	688e      	ldr	r6, [r1, #8]
 8007f18:	4682      	mov	sl, r0
 8007f1a:	42be      	cmp	r6, r7
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	4690      	mov	r8, r2
 8007f20:	680b      	ldr	r3, [r1, #0]
 8007f22:	d82c      	bhi.n	8007f7e <__ssputs_r+0x6e>
 8007f24:	898a      	ldrh	r2, [r1, #12]
 8007f26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f2a:	d026      	beq.n	8007f7a <__ssputs_r+0x6a>
 8007f2c:	6965      	ldr	r5, [r4, #20]
 8007f2e:	6909      	ldr	r1, [r1, #16]
 8007f30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f34:	eba3 0901 	sub.w	r9, r3, r1
 8007f38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f3c:	1c7b      	adds	r3, r7, #1
 8007f3e:	444b      	add	r3, r9
 8007f40:	106d      	asrs	r5, r5, #1
 8007f42:	429d      	cmp	r5, r3
 8007f44:	bf38      	it	cc
 8007f46:	461d      	movcc	r5, r3
 8007f48:	0553      	lsls	r3, r2, #21
 8007f4a:	d527      	bpl.n	8007f9c <__ssputs_r+0x8c>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	f7ff fbdb 	bl	8007708 <_malloc_r>
 8007f52:	4606      	mov	r6, r0
 8007f54:	b360      	cbz	r0, 8007fb0 <__ssputs_r+0xa0>
 8007f56:	464a      	mov	r2, r9
 8007f58:	6921      	ldr	r1, [r4, #16]
 8007f5a:	f000 fa05 	bl	8008368 <memcpy>
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f68:	81a3      	strh	r3, [r4, #12]
 8007f6a:	6126      	str	r6, [r4, #16]
 8007f6c:	444e      	add	r6, r9
 8007f6e:	6026      	str	r6, [r4, #0]
 8007f70:	463e      	mov	r6, r7
 8007f72:	6165      	str	r5, [r4, #20]
 8007f74:	eba5 0509 	sub.w	r5, r5, r9
 8007f78:	60a5      	str	r5, [r4, #8]
 8007f7a:	42be      	cmp	r6, r7
 8007f7c:	d900      	bls.n	8007f80 <__ssputs_r+0x70>
 8007f7e:	463e      	mov	r6, r7
 8007f80:	4632      	mov	r2, r6
 8007f82:	4641      	mov	r1, r8
 8007f84:	6820      	ldr	r0, [r4, #0]
 8007f86:	f000 f9c5 	bl	8008314 <memmove>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	68a3      	ldr	r3, [r4, #8]
 8007f8e:	1b9b      	subs	r3, r3, r6
 8007f90:	60a3      	str	r3, [r4, #8]
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	4433      	add	r3, r6
 8007f96:	6023      	str	r3, [r4, #0]
 8007f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	f000 fa35 	bl	800840c <_realloc_r>
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d1e0      	bne.n	8007f6a <__ssputs_r+0x5a>
 8007fa8:	4650      	mov	r0, sl
 8007faa:	6921      	ldr	r1, [r4, #16]
 8007fac:	f7ff fb3c 	bl	8007628 <_free_r>
 8007fb0:	230c      	movs	r3, #12
 8007fb2:	f8ca 3000 	str.w	r3, [sl]
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	e7e9      	b.n	8007f98 <__ssputs_r+0x88>

08007fc4 <_svfiprintf_r>:
 8007fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	4698      	mov	r8, r3
 8007fca:	898b      	ldrh	r3, [r1, #12]
 8007fcc:	4607      	mov	r7, r0
 8007fce:	061b      	lsls	r3, r3, #24
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	4614      	mov	r4, r2
 8007fd4:	b09d      	sub	sp, #116	; 0x74
 8007fd6:	d50e      	bpl.n	8007ff6 <_svfiprintf_r+0x32>
 8007fd8:	690b      	ldr	r3, [r1, #16]
 8007fda:	b963      	cbnz	r3, 8007ff6 <_svfiprintf_r+0x32>
 8007fdc:	2140      	movs	r1, #64	; 0x40
 8007fde:	f7ff fb93 	bl	8007708 <_malloc_r>
 8007fe2:	6028      	str	r0, [r5, #0]
 8007fe4:	6128      	str	r0, [r5, #16]
 8007fe6:	b920      	cbnz	r0, 8007ff2 <_svfiprintf_r+0x2e>
 8007fe8:	230c      	movs	r3, #12
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff0:	e0d0      	b.n	8008194 <_svfiprintf_r+0x1d0>
 8007ff2:	2340      	movs	r3, #64	; 0x40
 8007ff4:	616b      	str	r3, [r5, #20]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8007ffa:	2320      	movs	r3, #32
 8007ffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008000:	2330      	movs	r3, #48	; 0x30
 8008002:	f04f 0901 	mov.w	r9, #1
 8008006:	f8cd 800c 	str.w	r8, [sp, #12]
 800800a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80081ac <_svfiprintf_r+0x1e8>
 800800e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008012:	4623      	mov	r3, r4
 8008014:	469a      	mov	sl, r3
 8008016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800801a:	b10a      	cbz	r2, 8008020 <_svfiprintf_r+0x5c>
 800801c:	2a25      	cmp	r2, #37	; 0x25
 800801e:	d1f9      	bne.n	8008014 <_svfiprintf_r+0x50>
 8008020:	ebba 0b04 	subs.w	fp, sl, r4
 8008024:	d00b      	beq.n	800803e <_svfiprintf_r+0x7a>
 8008026:	465b      	mov	r3, fp
 8008028:	4622      	mov	r2, r4
 800802a:	4629      	mov	r1, r5
 800802c:	4638      	mov	r0, r7
 800802e:	f7ff ff6f 	bl	8007f10 <__ssputs_r>
 8008032:	3001      	adds	r0, #1
 8008034:	f000 80a9 	beq.w	800818a <_svfiprintf_r+0x1c6>
 8008038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800803a:	445a      	add	r2, fp
 800803c:	9209      	str	r2, [sp, #36]	; 0x24
 800803e:	f89a 3000 	ldrb.w	r3, [sl]
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 80a1 	beq.w	800818a <_svfiprintf_r+0x1c6>
 8008048:	2300      	movs	r3, #0
 800804a:	f04f 32ff 	mov.w	r2, #4294967295
 800804e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008052:	f10a 0a01 	add.w	sl, sl, #1
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	9307      	str	r3, [sp, #28]
 800805a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800805e:	931a      	str	r3, [sp, #104]	; 0x68
 8008060:	4654      	mov	r4, sl
 8008062:	2205      	movs	r2, #5
 8008064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008068:	4850      	ldr	r0, [pc, #320]	; (80081ac <_svfiprintf_r+0x1e8>)
 800806a:	f7fe fc62 	bl	8006932 <memchr>
 800806e:	9a04      	ldr	r2, [sp, #16]
 8008070:	b9d8      	cbnz	r0, 80080aa <_svfiprintf_r+0xe6>
 8008072:	06d0      	lsls	r0, r2, #27
 8008074:	bf44      	itt	mi
 8008076:	2320      	movmi	r3, #32
 8008078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800807c:	0711      	lsls	r1, r2, #28
 800807e:	bf44      	itt	mi
 8008080:	232b      	movmi	r3, #43	; 0x2b
 8008082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008086:	f89a 3000 	ldrb.w	r3, [sl]
 800808a:	2b2a      	cmp	r3, #42	; 0x2a
 800808c:	d015      	beq.n	80080ba <_svfiprintf_r+0xf6>
 800808e:	4654      	mov	r4, sl
 8008090:	2000      	movs	r0, #0
 8008092:	f04f 0c0a 	mov.w	ip, #10
 8008096:	9a07      	ldr	r2, [sp, #28]
 8008098:	4621      	mov	r1, r4
 800809a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800809e:	3b30      	subs	r3, #48	; 0x30
 80080a0:	2b09      	cmp	r3, #9
 80080a2:	d94d      	bls.n	8008140 <_svfiprintf_r+0x17c>
 80080a4:	b1b0      	cbz	r0, 80080d4 <_svfiprintf_r+0x110>
 80080a6:	9207      	str	r2, [sp, #28]
 80080a8:	e014      	b.n	80080d4 <_svfiprintf_r+0x110>
 80080aa:	eba0 0308 	sub.w	r3, r0, r8
 80080ae:	fa09 f303 	lsl.w	r3, r9, r3
 80080b2:	4313      	orrs	r3, r2
 80080b4:	46a2      	mov	sl, r4
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	e7d2      	b.n	8008060 <_svfiprintf_r+0x9c>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	1d19      	adds	r1, r3, #4
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	9103      	str	r1, [sp, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	bfbb      	ittet	lt
 80080c6:	425b      	neglt	r3, r3
 80080c8:	f042 0202 	orrlt.w	r2, r2, #2
 80080cc:	9307      	strge	r3, [sp, #28]
 80080ce:	9307      	strlt	r3, [sp, #28]
 80080d0:	bfb8      	it	lt
 80080d2:	9204      	strlt	r2, [sp, #16]
 80080d4:	7823      	ldrb	r3, [r4, #0]
 80080d6:	2b2e      	cmp	r3, #46	; 0x2e
 80080d8:	d10c      	bne.n	80080f4 <_svfiprintf_r+0x130>
 80080da:	7863      	ldrb	r3, [r4, #1]
 80080dc:	2b2a      	cmp	r3, #42	; 0x2a
 80080de:	d134      	bne.n	800814a <_svfiprintf_r+0x186>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	3402      	adds	r4, #2
 80080e4:	1d1a      	adds	r2, r3, #4
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	9203      	str	r2, [sp, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	bfb8      	it	lt
 80080ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80080f2:	9305      	str	r3, [sp, #20]
 80080f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80081b0 <_svfiprintf_r+0x1ec>
 80080f8:	2203      	movs	r2, #3
 80080fa:	4650      	mov	r0, sl
 80080fc:	7821      	ldrb	r1, [r4, #0]
 80080fe:	f7fe fc18 	bl	8006932 <memchr>
 8008102:	b138      	cbz	r0, 8008114 <_svfiprintf_r+0x150>
 8008104:	2240      	movs	r2, #64	; 0x40
 8008106:	9b04      	ldr	r3, [sp, #16]
 8008108:	eba0 000a 	sub.w	r0, r0, sl
 800810c:	4082      	lsls	r2, r0
 800810e:	4313      	orrs	r3, r2
 8008110:	3401      	adds	r4, #1
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008118:	2206      	movs	r2, #6
 800811a:	4826      	ldr	r0, [pc, #152]	; (80081b4 <_svfiprintf_r+0x1f0>)
 800811c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008120:	f7fe fc07 	bl	8006932 <memchr>
 8008124:	2800      	cmp	r0, #0
 8008126:	d038      	beq.n	800819a <_svfiprintf_r+0x1d6>
 8008128:	4b23      	ldr	r3, [pc, #140]	; (80081b8 <_svfiprintf_r+0x1f4>)
 800812a:	bb1b      	cbnz	r3, 8008174 <_svfiprintf_r+0x1b0>
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	3307      	adds	r3, #7
 8008130:	f023 0307 	bic.w	r3, r3, #7
 8008134:	3308      	adds	r3, #8
 8008136:	9303      	str	r3, [sp, #12]
 8008138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813a:	4433      	add	r3, r6
 800813c:	9309      	str	r3, [sp, #36]	; 0x24
 800813e:	e768      	b.n	8008012 <_svfiprintf_r+0x4e>
 8008140:	460c      	mov	r4, r1
 8008142:	2001      	movs	r0, #1
 8008144:	fb0c 3202 	mla	r2, ip, r2, r3
 8008148:	e7a6      	b.n	8008098 <_svfiprintf_r+0xd4>
 800814a:	2300      	movs	r3, #0
 800814c:	f04f 0c0a 	mov.w	ip, #10
 8008150:	4619      	mov	r1, r3
 8008152:	3401      	adds	r4, #1
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	4620      	mov	r0, r4
 8008158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800815c:	3a30      	subs	r2, #48	; 0x30
 800815e:	2a09      	cmp	r2, #9
 8008160:	d903      	bls.n	800816a <_svfiprintf_r+0x1a6>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0c6      	beq.n	80080f4 <_svfiprintf_r+0x130>
 8008166:	9105      	str	r1, [sp, #20]
 8008168:	e7c4      	b.n	80080f4 <_svfiprintf_r+0x130>
 800816a:	4604      	mov	r4, r0
 800816c:	2301      	movs	r3, #1
 800816e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008172:	e7f0      	b.n	8008156 <_svfiprintf_r+0x192>
 8008174:	ab03      	add	r3, sp, #12
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	462a      	mov	r2, r5
 800817a:	4638      	mov	r0, r7
 800817c:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <_svfiprintf_r+0x1f8>)
 800817e:	a904      	add	r1, sp, #16
 8008180:	f7fd fe70 	bl	8005e64 <_printf_float>
 8008184:	1c42      	adds	r2, r0, #1
 8008186:	4606      	mov	r6, r0
 8008188:	d1d6      	bne.n	8008138 <_svfiprintf_r+0x174>
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	065b      	lsls	r3, r3, #25
 800818e:	f53f af2d 	bmi.w	8007fec <_svfiprintf_r+0x28>
 8008192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008194:	b01d      	add	sp, #116	; 0x74
 8008196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819a:	ab03      	add	r3, sp, #12
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	462a      	mov	r2, r5
 80081a0:	4638      	mov	r0, r7
 80081a2:	4b06      	ldr	r3, [pc, #24]	; (80081bc <_svfiprintf_r+0x1f8>)
 80081a4:	a904      	add	r1, sp, #16
 80081a6:	f7fe f8fd 	bl	80063a4 <_printf_i>
 80081aa:	e7eb      	b.n	8008184 <_svfiprintf_r+0x1c0>
 80081ac:	0800bd54 	.word	0x0800bd54
 80081b0:	0800bd5a 	.word	0x0800bd5a
 80081b4:	0800bd5e 	.word	0x0800bd5e
 80081b8:	08005e65 	.word	0x08005e65
 80081bc:	08007f11 	.word	0x08007f11

080081c0 <__sflush_r>:
 80081c0:	898a      	ldrh	r2, [r1, #12]
 80081c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c4:	4605      	mov	r5, r0
 80081c6:	0710      	lsls	r0, r2, #28
 80081c8:	460c      	mov	r4, r1
 80081ca:	d457      	bmi.n	800827c <__sflush_r+0xbc>
 80081cc:	684b      	ldr	r3, [r1, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dc04      	bgt.n	80081dc <__sflush_r+0x1c>
 80081d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dc01      	bgt.n	80081dc <__sflush_r+0x1c>
 80081d8:	2000      	movs	r0, #0
 80081da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081de:	2e00      	cmp	r6, #0
 80081e0:	d0fa      	beq.n	80081d8 <__sflush_r+0x18>
 80081e2:	2300      	movs	r3, #0
 80081e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081e8:	682f      	ldr	r7, [r5, #0]
 80081ea:	6a21      	ldr	r1, [r4, #32]
 80081ec:	602b      	str	r3, [r5, #0]
 80081ee:	d032      	beq.n	8008256 <__sflush_r+0x96>
 80081f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	075a      	lsls	r2, r3, #29
 80081f6:	d505      	bpl.n	8008204 <__sflush_r+0x44>
 80081f8:	6863      	ldr	r3, [r4, #4]
 80081fa:	1ac0      	subs	r0, r0, r3
 80081fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081fe:	b10b      	cbz	r3, 8008204 <__sflush_r+0x44>
 8008200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008202:	1ac0      	subs	r0, r0, r3
 8008204:	2300      	movs	r3, #0
 8008206:	4602      	mov	r2, r0
 8008208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800820a:	4628      	mov	r0, r5
 800820c:	6a21      	ldr	r1, [r4, #32]
 800820e:	47b0      	blx	r6
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	d106      	bne.n	8008224 <__sflush_r+0x64>
 8008216:	6829      	ldr	r1, [r5, #0]
 8008218:	291d      	cmp	r1, #29
 800821a:	d82b      	bhi.n	8008274 <__sflush_r+0xb4>
 800821c:	4a28      	ldr	r2, [pc, #160]	; (80082c0 <__sflush_r+0x100>)
 800821e:	410a      	asrs	r2, r1
 8008220:	07d6      	lsls	r6, r2, #31
 8008222:	d427      	bmi.n	8008274 <__sflush_r+0xb4>
 8008224:	2200      	movs	r2, #0
 8008226:	6062      	str	r2, [r4, #4]
 8008228:	6922      	ldr	r2, [r4, #16]
 800822a:	04d9      	lsls	r1, r3, #19
 800822c:	6022      	str	r2, [r4, #0]
 800822e:	d504      	bpl.n	800823a <__sflush_r+0x7a>
 8008230:	1c42      	adds	r2, r0, #1
 8008232:	d101      	bne.n	8008238 <__sflush_r+0x78>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	b903      	cbnz	r3, 800823a <__sflush_r+0x7a>
 8008238:	6560      	str	r0, [r4, #84]	; 0x54
 800823a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800823c:	602f      	str	r7, [r5, #0]
 800823e:	2900      	cmp	r1, #0
 8008240:	d0ca      	beq.n	80081d8 <__sflush_r+0x18>
 8008242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008246:	4299      	cmp	r1, r3
 8008248:	d002      	beq.n	8008250 <__sflush_r+0x90>
 800824a:	4628      	mov	r0, r5
 800824c:	f7ff f9ec 	bl	8007628 <_free_r>
 8008250:	2000      	movs	r0, #0
 8008252:	6360      	str	r0, [r4, #52]	; 0x34
 8008254:	e7c1      	b.n	80081da <__sflush_r+0x1a>
 8008256:	2301      	movs	r3, #1
 8008258:	4628      	mov	r0, r5
 800825a:	47b0      	blx	r6
 800825c:	1c41      	adds	r1, r0, #1
 800825e:	d1c8      	bne.n	80081f2 <__sflush_r+0x32>
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0c5      	beq.n	80081f2 <__sflush_r+0x32>
 8008266:	2b1d      	cmp	r3, #29
 8008268:	d001      	beq.n	800826e <__sflush_r+0xae>
 800826a:	2b16      	cmp	r3, #22
 800826c:	d101      	bne.n	8008272 <__sflush_r+0xb2>
 800826e:	602f      	str	r7, [r5, #0]
 8008270:	e7b2      	b.n	80081d8 <__sflush_r+0x18>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	e7ae      	b.n	80081da <__sflush_r+0x1a>
 800827c:	690f      	ldr	r7, [r1, #16]
 800827e:	2f00      	cmp	r7, #0
 8008280:	d0aa      	beq.n	80081d8 <__sflush_r+0x18>
 8008282:	0793      	lsls	r3, r2, #30
 8008284:	bf18      	it	ne
 8008286:	2300      	movne	r3, #0
 8008288:	680e      	ldr	r6, [r1, #0]
 800828a:	bf08      	it	eq
 800828c:	694b      	ldreq	r3, [r1, #20]
 800828e:	1bf6      	subs	r6, r6, r7
 8008290:	600f      	str	r7, [r1, #0]
 8008292:	608b      	str	r3, [r1, #8]
 8008294:	2e00      	cmp	r6, #0
 8008296:	dd9f      	ble.n	80081d8 <__sflush_r+0x18>
 8008298:	4633      	mov	r3, r6
 800829a:	463a      	mov	r2, r7
 800829c:	4628      	mov	r0, r5
 800829e:	6a21      	ldr	r1, [r4, #32]
 80082a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80082a4:	47e0      	blx	ip
 80082a6:	2800      	cmp	r0, #0
 80082a8:	dc06      	bgt.n	80082b8 <__sflush_r+0xf8>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295
 80082b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	e790      	b.n	80081da <__sflush_r+0x1a>
 80082b8:	4407      	add	r7, r0
 80082ba:	1a36      	subs	r6, r6, r0
 80082bc:	e7ea      	b.n	8008294 <__sflush_r+0xd4>
 80082be:	bf00      	nop
 80082c0:	dfbffffe 	.word	0xdfbffffe

080082c4 <_fflush_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	690b      	ldr	r3, [r1, #16]
 80082c8:	4605      	mov	r5, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	b913      	cbnz	r3, 80082d4 <_fflush_r+0x10>
 80082ce:	2500      	movs	r5, #0
 80082d0:	4628      	mov	r0, r5
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	b118      	cbz	r0, 80082de <_fflush_r+0x1a>
 80082d6:	6a03      	ldr	r3, [r0, #32]
 80082d8:	b90b      	cbnz	r3, 80082de <_fflush_r+0x1a>
 80082da:	f7fe fa11 	bl	8006700 <__sinit>
 80082de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0f3      	beq.n	80082ce <_fflush_r+0xa>
 80082e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082e8:	07d0      	lsls	r0, r2, #31
 80082ea:	d404      	bmi.n	80082f6 <_fflush_r+0x32>
 80082ec:	0599      	lsls	r1, r3, #22
 80082ee:	d402      	bmi.n	80082f6 <_fflush_r+0x32>
 80082f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082f2:	f7fe fb1c 	bl	800692e <__retarget_lock_acquire_recursive>
 80082f6:	4628      	mov	r0, r5
 80082f8:	4621      	mov	r1, r4
 80082fa:	f7ff ff61 	bl	80081c0 <__sflush_r>
 80082fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008300:	4605      	mov	r5, r0
 8008302:	07da      	lsls	r2, r3, #31
 8008304:	d4e4      	bmi.n	80082d0 <_fflush_r+0xc>
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	059b      	lsls	r3, r3, #22
 800830a:	d4e1      	bmi.n	80082d0 <_fflush_r+0xc>
 800830c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830e:	f7fe fb0f 	bl	8006930 <__retarget_lock_release_recursive>
 8008312:	e7dd      	b.n	80082d0 <_fflush_r+0xc>

08008314 <memmove>:
 8008314:	4288      	cmp	r0, r1
 8008316:	b510      	push	{r4, lr}
 8008318:	eb01 0402 	add.w	r4, r1, r2
 800831c:	d902      	bls.n	8008324 <memmove+0x10>
 800831e:	4284      	cmp	r4, r0
 8008320:	4623      	mov	r3, r4
 8008322:	d807      	bhi.n	8008334 <memmove+0x20>
 8008324:	1e43      	subs	r3, r0, #1
 8008326:	42a1      	cmp	r1, r4
 8008328:	d008      	beq.n	800833c <memmove+0x28>
 800832a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008332:	e7f8      	b.n	8008326 <memmove+0x12>
 8008334:	4601      	mov	r1, r0
 8008336:	4402      	add	r2, r0
 8008338:	428a      	cmp	r2, r1
 800833a:	d100      	bne.n	800833e <memmove+0x2a>
 800833c:	bd10      	pop	{r4, pc}
 800833e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008346:	e7f7      	b.n	8008338 <memmove+0x24>

08008348 <_sbrk_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	2300      	movs	r3, #0
 800834c:	4d05      	ldr	r5, [pc, #20]	; (8008364 <_sbrk_r+0x1c>)
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	f7fa f9ac 	bl	80026b0 <_sbrk>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_sbrk_r+0x1a>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_sbrk_r+0x1a>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	20000540 	.word	0x20000540

08008368 <memcpy>:
 8008368:	440a      	add	r2, r1
 800836a:	4291      	cmp	r1, r2
 800836c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008370:	d100      	bne.n	8008374 <memcpy+0xc>
 8008372:	4770      	bx	lr
 8008374:	b510      	push	{r4, lr}
 8008376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800837a:	4291      	cmp	r1, r2
 800837c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008380:	d1f9      	bne.n	8008376 <memcpy+0xe>
 8008382:	bd10      	pop	{r4, pc}

08008384 <__assert_func>:
 8008384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008386:	4614      	mov	r4, r2
 8008388:	461a      	mov	r2, r3
 800838a:	4b09      	ldr	r3, [pc, #36]	; (80083b0 <__assert_func+0x2c>)
 800838c:	4605      	mov	r5, r0
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68d8      	ldr	r0, [r3, #12]
 8008392:	b14c      	cbz	r4, 80083a8 <__assert_func+0x24>
 8008394:	4b07      	ldr	r3, [pc, #28]	; (80083b4 <__assert_func+0x30>)
 8008396:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800839a:	9100      	str	r1, [sp, #0]
 800839c:	462b      	mov	r3, r5
 800839e:	4906      	ldr	r1, [pc, #24]	; (80083b8 <__assert_func+0x34>)
 80083a0:	f000 f870 	bl	8008484 <fiprintf>
 80083a4:	f000 f880 	bl	80084a8 <abort>
 80083a8:	4b04      	ldr	r3, [pc, #16]	; (80083bc <__assert_func+0x38>)
 80083aa:	461c      	mov	r4, r3
 80083ac:	e7f3      	b.n	8008396 <__assert_func+0x12>
 80083ae:	bf00      	nop
 80083b0:	2000006c 	.word	0x2000006c
 80083b4:	0800bd6f 	.word	0x0800bd6f
 80083b8:	0800bd7c 	.word	0x0800bd7c
 80083bc:	0800bdaa 	.word	0x0800bdaa

080083c0 <_calloc_r>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	fba1 5402 	umull	r5, r4, r1, r2
 80083c6:	b934      	cbnz	r4, 80083d6 <_calloc_r+0x16>
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7ff f99d 	bl	8007708 <_malloc_r>
 80083ce:	4606      	mov	r6, r0
 80083d0:	b928      	cbnz	r0, 80083de <_calloc_r+0x1e>
 80083d2:	4630      	mov	r0, r6
 80083d4:	bd70      	pop	{r4, r5, r6, pc}
 80083d6:	220c      	movs	r2, #12
 80083d8:	2600      	movs	r6, #0
 80083da:	6002      	str	r2, [r0, #0]
 80083dc:	e7f9      	b.n	80083d2 <_calloc_r+0x12>
 80083de:	462a      	mov	r2, r5
 80083e0:	4621      	mov	r1, r4
 80083e2:	f7fe fa26 	bl	8006832 <memset>
 80083e6:	e7f4      	b.n	80083d2 <_calloc_r+0x12>

080083e8 <__ascii_mbtowc>:
 80083e8:	b082      	sub	sp, #8
 80083ea:	b901      	cbnz	r1, 80083ee <__ascii_mbtowc+0x6>
 80083ec:	a901      	add	r1, sp, #4
 80083ee:	b142      	cbz	r2, 8008402 <__ascii_mbtowc+0x1a>
 80083f0:	b14b      	cbz	r3, 8008406 <__ascii_mbtowc+0x1e>
 80083f2:	7813      	ldrb	r3, [r2, #0]
 80083f4:	600b      	str	r3, [r1, #0]
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	1e10      	subs	r0, r2, #0
 80083fa:	bf18      	it	ne
 80083fc:	2001      	movne	r0, #1
 80083fe:	b002      	add	sp, #8
 8008400:	4770      	bx	lr
 8008402:	4610      	mov	r0, r2
 8008404:	e7fb      	b.n	80083fe <__ascii_mbtowc+0x16>
 8008406:	f06f 0001 	mvn.w	r0, #1
 800840a:	e7f8      	b.n	80083fe <__ascii_mbtowc+0x16>

0800840c <_realloc_r>:
 800840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008410:	4680      	mov	r8, r0
 8008412:	4614      	mov	r4, r2
 8008414:	460e      	mov	r6, r1
 8008416:	b921      	cbnz	r1, 8008422 <_realloc_r+0x16>
 8008418:	4611      	mov	r1, r2
 800841a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800841e:	f7ff b973 	b.w	8007708 <_malloc_r>
 8008422:	b92a      	cbnz	r2, 8008430 <_realloc_r+0x24>
 8008424:	f7ff f900 	bl	8007628 <_free_r>
 8008428:	4625      	mov	r5, r4
 800842a:	4628      	mov	r0, r5
 800842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008430:	f000 f841 	bl	80084b6 <_malloc_usable_size_r>
 8008434:	4284      	cmp	r4, r0
 8008436:	4607      	mov	r7, r0
 8008438:	d802      	bhi.n	8008440 <_realloc_r+0x34>
 800843a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800843e:	d812      	bhi.n	8008466 <_realloc_r+0x5a>
 8008440:	4621      	mov	r1, r4
 8008442:	4640      	mov	r0, r8
 8008444:	f7ff f960 	bl	8007708 <_malloc_r>
 8008448:	4605      	mov	r5, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d0ed      	beq.n	800842a <_realloc_r+0x1e>
 800844e:	42bc      	cmp	r4, r7
 8008450:	4622      	mov	r2, r4
 8008452:	4631      	mov	r1, r6
 8008454:	bf28      	it	cs
 8008456:	463a      	movcs	r2, r7
 8008458:	f7ff ff86 	bl	8008368 <memcpy>
 800845c:	4631      	mov	r1, r6
 800845e:	4640      	mov	r0, r8
 8008460:	f7ff f8e2 	bl	8007628 <_free_r>
 8008464:	e7e1      	b.n	800842a <_realloc_r+0x1e>
 8008466:	4635      	mov	r5, r6
 8008468:	e7df      	b.n	800842a <_realloc_r+0x1e>

0800846a <__ascii_wctomb>:
 800846a:	4603      	mov	r3, r0
 800846c:	4608      	mov	r0, r1
 800846e:	b141      	cbz	r1, 8008482 <__ascii_wctomb+0x18>
 8008470:	2aff      	cmp	r2, #255	; 0xff
 8008472:	d904      	bls.n	800847e <__ascii_wctomb+0x14>
 8008474:	228a      	movs	r2, #138	; 0x8a
 8008476:	f04f 30ff 	mov.w	r0, #4294967295
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	4770      	bx	lr
 800847e:	2001      	movs	r0, #1
 8008480:	700a      	strb	r2, [r1, #0]
 8008482:	4770      	bx	lr

08008484 <fiprintf>:
 8008484:	b40e      	push	{r1, r2, r3}
 8008486:	b503      	push	{r0, r1, lr}
 8008488:	4601      	mov	r1, r0
 800848a:	ab03      	add	r3, sp, #12
 800848c:	4805      	ldr	r0, [pc, #20]	; (80084a4 <fiprintf+0x20>)
 800848e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008492:	6800      	ldr	r0, [r0, #0]
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	f000 f83d 	bl	8008514 <_vfiprintf_r>
 800849a:	b002      	add	sp, #8
 800849c:	f85d eb04 	ldr.w	lr, [sp], #4
 80084a0:	b003      	add	sp, #12
 80084a2:	4770      	bx	lr
 80084a4:	2000006c 	.word	0x2000006c

080084a8 <abort>:
 80084a8:	2006      	movs	r0, #6
 80084aa:	b508      	push	{r3, lr}
 80084ac:	f000 fa0a 	bl	80088c4 <raise>
 80084b0:	2001      	movs	r0, #1
 80084b2:	f7fa f88a 	bl	80025ca <_exit>

080084b6 <_malloc_usable_size_r>:
 80084b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ba:	1f18      	subs	r0, r3, #4
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bfbc      	itt	lt
 80084c0:	580b      	ldrlt	r3, [r1, r0]
 80084c2:	18c0      	addlt	r0, r0, r3
 80084c4:	4770      	bx	lr

080084c6 <__sfputc_r>:
 80084c6:	6893      	ldr	r3, [r2, #8]
 80084c8:	b410      	push	{r4}
 80084ca:	3b01      	subs	r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	6093      	str	r3, [r2, #8]
 80084d0:	da07      	bge.n	80084e2 <__sfputc_r+0x1c>
 80084d2:	6994      	ldr	r4, [r2, #24]
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	db01      	blt.n	80084dc <__sfputc_r+0x16>
 80084d8:	290a      	cmp	r1, #10
 80084da:	d102      	bne.n	80084e2 <__sfputc_r+0x1c>
 80084dc:	bc10      	pop	{r4}
 80084de:	f000 b933 	b.w	8008748 <__swbuf_r>
 80084e2:	6813      	ldr	r3, [r2, #0]
 80084e4:	1c58      	adds	r0, r3, #1
 80084e6:	6010      	str	r0, [r2, #0]
 80084e8:	7019      	strb	r1, [r3, #0]
 80084ea:	4608      	mov	r0, r1
 80084ec:	bc10      	pop	{r4}
 80084ee:	4770      	bx	lr

080084f0 <__sfputs_r>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	4606      	mov	r6, r0
 80084f4:	460f      	mov	r7, r1
 80084f6:	4614      	mov	r4, r2
 80084f8:	18d5      	adds	r5, r2, r3
 80084fa:	42ac      	cmp	r4, r5
 80084fc:	d101      	bne.n	8008502 <__sfputs_r+0x12>
 80084fe:	2000      	movs	r0, #0
 8008500:	e007      	b.n	8008512 <__sfputs_r+0x22>
 8008502:	463a      	mov	r2, r7
 8008504:	4630      	mov	r0, r6
 8008506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850a:	f7ff ffdc 	bl	80084c6 <__sfputc_r>
 800850e:	1c43      	adds	r3, r0, #1
 8008510:	d1f3      	bne.n	80084fa <__sfputs_r+0xa>
 8008512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008514 <_vfiprintf_r>:
 8008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	460d      	mov	r5, r1
 800851a:	4614      	mov	r4, r2
 800851c:	4698      	mov	r8, r3
 800851e:	4606      	mov	r6, r0
 8008520:	b09d      	sub	sp, #116	; 0x74
 8008522:	b118      	cbz	r0, 800852c <_vfiprintf_r+0x18>
 8008524:	6a03      	ldr	r3, [r0, #32]
 8008526:	b90b      	cbnz	r3, 800852c <_vfiprintf_r+0x18>
 8008528:	f7fe f8ea 	bl	8006700 <__sinit>
 800852c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800852e:	07d9      	lsls	r1, r3, #31
 8008530:	d405      	bmi.n	800853e <_vfiprintf_r+0x2a>
 8008532:	89ab      	ldrh	r3, [r5, #12]
 8008534:	059a      	lsls	r2, r3, #22
 8008536:	d402      	bmi.n	800853e <_vfiprintf_r+0x2a>
 8008538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800853a:	f7fe f9f8 	bl	800692e <__retarget_lock_acquire_recursive>
 800853e:	89ab      	ldrh	r3, [r5, #12]
 8008540:	071b      	lsls	r3, r3, #28
 8008542:	d501      	bpl.n	8008548 <_vfiprintf_r+0x34>
 8008544:	692b      	ldr	r3, [r5, #16]
 8008546:	b99b      	cbnz	r3, 8008570 <_vfiprintf_r+0x5c>
 8008548:	4629      	mov	r1, r5
 800854a:	4630      	mov	r0, r6
 800854c:	f000 f93a 	bl	80087c4 <__swsetup_r>
 8008550:	b170      	cbz	r0, 8008570 <_vfiprintf_r+0x5c>
 8008552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008554:	07dc      	lsls	r4, r3, #31
 8008556:	d504      	bpl.n	8008562 <_vfiprintf_r+0x4e>
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	b01d      	add	sp, #116	; 0x74
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	0598      	lsls	r0, r3, #22
 8008566:	d4f7      	bmi.n	8008558 <_vfiprintf_r+0x44>
 8008568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800856a:	f7fe f9e1 	bl	8006930 <__retarget_lock_release_recursive>
 800856e:	e7f3      	b.n	8008558 <_vfiprintf_r+0x44>
 8008570:	2300      	movs	r3, #0
 8008572:	9309      	str	r3, [sp, #36]	; 0x24
 8008574:	2320      	movs	r3, #32
 8008576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800857a:	2330      	movs	r3, #48	; 0x30
 800857c:	f04f 0901 	mov.w	r9, #1
 8008580:	f8cd 800c 	str.w	r8, [sp, #12]
 8008584:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008734 <_vfiprintf_r+0x220>
 8008588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800858c:	4623      	mov	r3, r4
 800858e:	469a      	mov	sl, r3
 8008590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008594:	b10a      	cbz	r2, 800859a <_vfiprintf_r+0x86>
 8008596:	2a25      	cmp	r2, #37	; 0x25
 8008598:	d1f9      	bne.n	800858e <_vfiprintf_r+0x7a>
 800859a:	ebba 0b04 	subs.w	fp, sl, r4
 800859e:	d00b      	beq.n	80085b8 <_vfiprintf_r+0xa4>
 80085a0:	465b      	mov	r3, fp
 80085a2:	4622      	mov	r2, r4
 80085a4:	4629      	mov	r1, r5
 80085a6:	4630      	mov	r0, r6
 80085a8:	f7ff ffa2 	bl	80084f0 <__sfputs_r>
 80085ac:	3001      	adds	r0, #1
 80085ae:	f000 80a9 	beq.w	8008704 <_vfiprintf_r+0x1f0>
 80085b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085b4:	445a      	add	r2, fp
 80085b6:	9209      	str	r2, [sp, #36]	; 0x24
 80085b8:	f89a 3000 	ldrb.w	r3, [sl]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 80a1 	beq.w	8008704 <_vfiprintf_r+0x1f0>
 80085c2:	2300      	movs	r3, #0
 80085c4:	f04f 32ff 	mov.w	r2, #4294967295
 80085c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085cc:	f10a 0a01 	add.w	sl, sl, #1
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	9307      	str	r3, [sp, #28]
 80085d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085d8:	931a      	str	r3, [sp, #104]	; 0x68
 80085da:	4654      	mov	r4, sl
 80085dc:	2205      	movs	r2, #5
 80085de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e2:	4854      	ldr	r0, [pc, #336]	; (8008734 <_vfiprintf_r+0x220>)
 80085e4:	f7fe f9a5 	bl	8006932 <memchr>
 80085e8:	9a04      	ldr	r2, [sp, #16]
 80085ea:	b9d8      	cbnz	r0, 8008624 <_vfiprintf_r+0x110>
 80085ec:	06d1      	lsls	r1, r2, #27
 80085ee:	bf44      	itt	mi
 80085f0:	2320      	movmi	r3, #32
 80085f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085f6:	0713      	lsls	r3, r2, #28
 80085f8:	bf44      	itt	mi
 80085fa:	232b      	movmi	r3, #43	; 0x2b
 80085fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008600:	f89a 3000 	ldrb.w	r3, [sl]
 8008604:	2b2a      	cmp	r3, #42	; 0x2a
 8008606:	d015      	beq.n	8008634 <_vfiprintf_r+0x120>
 8008608:	4654      	mov	r4, sl
 800860a:	2000      	movs	r0, #0
 800860c:	f04f 0c0a 	mov.w	ip, #10
 8008610:	9a07      	ldr	r2, [sp, #28]
 8008612:	4621      	mov	r1, r4
 8008614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008618:	3b30      	subs	r3, #48	; 0x30
 800861a:	2b09      	cmp	r3, #9
 800861c:	d94d      	bls.n	80086ba <_vfiprintf_r+0x1a6>
 800861e:	b1b0      	cbz	r0, 800864e <_vfiprintf_r+0x13a>
 8008620:	9207      	str	r2, [sp, #28]
 8008622:	e014      	b.n	800864e <_vfiprintf_r+0x13a>
 8008624:	eba0 0308 	sub.w	r3, r0, r8
 8008628:	fa09 f303 	lsl.w	r3, r9, r3
 800862c:	4313      	orrs	r3, r2
 800862e:	46a2      	mov	sl, r4
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	e7d2      	b.n	80085da <_vfiprintf_r+0xc6>
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	1d19      	adds	r1, r3, #4
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	9103      	str	r1, [sp, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	bfbb      	ittet	lt
 8008640:	425b      	neglt	r3, r3
 8008642:	f042 0202 	orrlt.w	r2, r2, #2
 8008646:	9307      	strge	r3, [sp, #28]
 8008648:	9307      	strlt	r3, [sp, #28]
 800864a:	bfb8      	it	lt
 800864c:	9204      	strlt	r2, [sp, #16]
 800864e:	7823      	ldrb	r3, [r4, #0]
 8008650:	2b2e      	cmp	r3, #46	; 0x2e
 8008652:	d10c      	bne.n	800866e <_vfiprintf_r+0x15a>
 8008654:	7863      	ldrb	r3, [r4, #1]
 8008656:	2b2a      	cmp	r3, #42	; 0x2a
 8008658:	d134      	bne.n	80086c4 <_vfiprintf_r+0x1b0>
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	3402      	adds	r4, #2
 800865e:	1d1a      	adds	r2, r3, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	9203      	str	r2, [sp, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	bfb8      	it	lt
 8008668:	f04f 33ff 	movlt.w	r3, #4294967295
 800866c:	9305      	str	r3, [sp, #20]
 800866e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008738 <_vfiprintf_r+0x224>
 8008672:	2203      	movs	r2, #3
 8008674:	4650      	mov	r0, sl
 8008676:	7821      	ldrb	r1, [r4, #0]
 8008678:	f7fe f95b 	bl	8006932 <memchr>
 800867c:	b138      	cbz	r0, 800868e <_vfiprintf_r+0x17a>
 800867e:	2240      	movs	r2, #64	; 0x40
 8008680:	9b04      	ldr	r3, [sp, #16]
 8008682:	eba0 000a 	sub.w	r0, r0, sl
 8008686:	4082      	lsls	r2, r0
 8008688:	4313      	orrs	r3, r2
 800868a:	3401      	adds	r4, #1
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008692:	2206      	movs	r2, #6
 8008694:	4829      	ldr	r0, [pc, #164]	; (800873c <_vfiprintf_r+0x228>)
 8008696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800869a:	f7fe f94a 	bl	8006932 <memchr>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d03f      	beq.n	8008722 <_vfiprintf_r+0x20e>
 80086a2:	4b27      	ldr	r3, [pc, #156]	; (8008740 <_vfiprintf_r+0x22c>)
 80086a4:	bb1b      	cbnz	r3, 80086ee <_vfiprintf_r+0x1da>
 80086a6:	9b03      	ldr	r3, [sp, #12]
 80086a8:	3307      	adds	r3, #7
 80086aa:	f023 0307 	bic.w	r3, r3, #7
 80086ae:	3308      	adds	r3, #8
 80086b0:	9303      	str	r3, [sp, #12]
 80086b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b4:	443b      	add	r3, r7
 80086b6:	9309      	str	r3, [sp, #36]	; 0x24
 80086b8:	e768      	b.n	800858c <_vfiprintf_r+0x78>
 80086ba:	460c      	mov	r4, r1
 80086bc:	2001      	movs	r0, #1
 80086be:	fb0c 3202 	mla	r2, ip, r2, r3
 80086c2:	e7a6      	b.n	8008612 <_vfiprintf_r+0xfe>
 80086c4:	2300      	movs	r3, #0
 80086c6:	f04f 0c0a 	mov.w	ip, #10
 80086ca:	4619      	mov	r1, r3
 80086cc:	3401      	adds	r4, #1
 80086ce:	9305      	str	r3, [sp, #20]
 80086d0:	4620      	mov	r0, r4
 80086d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086d6:	3a30      	subs	r2, #48	; 0x30
 80086d8:	2a09      	cmp	r2, #9
 80086da:	d903      	bls.n	80086e4 <_vfiprintf_r+0x1d0>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0c6      	beq.n	800866e <_vfiprintf_r+0x15a>
 80086e0:	9105      	str	r1, [sp, #20]
 80086e2:	e7c4      	b.n	800866e <_vfiprintf_r+0x15a>
 80086e4:	4604      	mov	r4, r0
 80086e6:	2301      	movs	r3, #1
 80086e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086ec:	e7f0      	b.n	80086d0 <_vfiprintf_r+0x1bc>
 80086ee:	ab03      	add	r3, sp, #12
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	462a      	mov	r2, r5
 80086f4:	4630      	mov	r0, r6
 80086f6:	4b13      	ldr	r3, [pc, #76]	; (8008744 <_vfiprintf_r+0x230>)
 80086f8:	a904      	add	r1, sp, #16
 80086fa:	f7fd fbb3 	bl	8005e64 <_printf_float>
 80086fe:	4607      	mov	r7, r0
 8008700:	1c78      	adds	r0, r7, #1
 8008702:	d1d6      	bne.n	80086b2 <_vfiprintf_r+0x19e>
 8008704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008706:	07d9      	lsls	r1, r3, #31
 8008708:	d405      	bmi.n	8008716 <_vfiprintf_r+0x202>
 800870a:	89ab      	ldrh	r3, [r5, #12]
 800870c:	059a      	lsls	r2, r3, #22
 800870e:	d402      	bmi.n	8008716 <_vfiprintf_r+0x202>
 8008710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008712:	f7fe f90d 	bl	8006930 <__retarget_lock_release_recursive>
 8008716:	89ab      	ldrh	r3, [r5, #12]
 8008718:	065b      	lsls	r3, r3, #25
 800871a:	f53f af1d 	bmi.w	8008558 <_vfiprintf_r+0x44>
 800871e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008720:	e71c      	b.n	800855c <_vfiprintf_r+0x48>
 8008722:	ab03      	add	r3, sp, #12
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	462a      	mov	r2, r5
 8008728:	4630      	mov	r0, r6
 800872a:	4b06      	ldr	r3, [pc, #24]	; (8008744 <_vfiprintf_r+0x230>)
 800872c:	a904      	add	r1, sp, #16
 800872e:	f7fd fe39 	bl	80063a4 <_printf_i>
 8008732:	e7e4      	b.n	80086fe <_vfiprintf_r+0x1ea>
 8008734:	0800bd54 	.word	0x0800bd54
 8008738:	0800bd5a 	.word	0x0800bd5a
 800873c:	0800bd5e 	.word	0x0800bd5e
 8008740:	08005e65 	.word	0x08005e65
 8008744:	080084f1 	.word	0x080084f1

08008748 <__swbuf_r>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	460e      	mov	r6, r1
 800874c:	4614      	mov	r4, r2
 800874e:	4605      	mov	r5, r0
 8008750:	b118      	cbz	r0, 800875a <__swbuf_r+0x12>
 8008752:	6a03      	ldr	r3, [r0, #32]
 8008754:	b90b      	cbnz	r3, 800875a <__swbuf_r+0x12>
 8008756:	f7fd ffd3 	bl	8006700 <__sinit>
 800875a:	69a3      	ldr	r3, [r4, #24]
 800875c:	60a3      	str	r3, [r4, #8]
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	071a      	lsls	r2, r3, #28
 8008762:	d525      	bpl.n	80087b0 <__swbuf_r+0x68>
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	b31b      	cbz	r3, 80087b0 <__swbuf_r+0x68>
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	6922      	ldr	r2, [r4, #16]
 800876c:	b2f6      	uxtb	r6, r6
 800876e:	1a98      	subs	r0, r3, r2
 8008770:	6963      	ldr	r3, [r4, #20]
 8008772:	4637      	mov	r7, r6
 8008774:	4283      	cmp	r3, r0
 8008776:	dc04      	bgt.n	8008782 <__swbuf_r+0x3a>
 8008778:	4621      	mov	r1, r4
 800877a:	4628      	mov	r0, r5
 800877c:	f7ff fda2 	bl	80082c4 <_fflush_r>
 8008780:	b9e0      	cbnz	r0, 80087bc <__swbuf_r+0x74>
 8008782:	68a3      	ldr	r3, [r4, #8]
 8008784:	3b01      	subs	r3, #1
 8008786:	60a3      	str	r3, [r4, #8]
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	6022      	str	r2, [r4, #0]
 800878e:	701e      	strb	r6, [r3, #0]
 8008790:	6962      	ldr	r2, [r4, #20]
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	429a      	cmp	r2, r3
 8008796:	d004      	beq.n	80087a2 <__swbuf_r+0x5a>
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	07db      	lsls	r3, r3, #31
 800879c:	d506      	bpl.n	80087ac <__swbuf_r+0x64>
 800879e:	2e0a      	cmp	r6, #10
 80087a0:	d104      	bne.n	80087ac <__swbuf_r+0x64>
 80087a2:	4621      	mov	r1, r4
 80087a4:	4628      	mov	r0, r5
 80087a6:	f7ff fd8d 	bl	80082c4 <_fflush_r>
 80087aa:	b938      	cbnz	r0, 80087bc <__swbuf_r+0x74>
 80087ac:	4638      	mov	r0, r7
 80087ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b0:	4621      	mov	r1, r4
 80087b2:	4628      	mov	r0, r5
 80087b4:	f000 f806 	bl	80087c4 <__swsetup_r>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d0d5      	beq.n	8008768 <__swbuf_r+0x20>
 80087bc:	f04f 37ff 	mov.w	r7, #4294967295
 80087c0:	e7f4      	b.n	80087ac <__swbuf_r+0x64>
	...

080087c4 <__swsetup_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4b2a      	ldr	r3, [pc, #168]	; (8008870 <__swsetup_r+0xac>)
 80087c8:	4605      	mov	r5, r0
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	460c      	mov	r4, r1
 80087ce:	b118      	cbz	r0, 80087d8 <__swsetup_r+0x14>
 80087d0:	6a03      	ldr	r3, [r0, #32]
 80087d2:	b90b      	cbnz	r3, 80087d8 <__swsetup_r+0x14>
 80087d4:	f7fd ff94 	bl	8006700 <__sinit>
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087de:	0718      	lsls	r0, r3, #28
 80087e0:	d422      	bmi.n	8008828 <__swsetup_r+0x64>
 80087e2:	06d9      	lsls	r1, r3, #27
 80087e4:	d407      	bmi.n	80087f6 <__swsetup_r+0x32>
 80087e6:	2309      	movs	r3, #9
 80087e8:	602b      	str	r3, [r5, #0]
 80087ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087ee:	f04f 30ff 	mov.w	r0, #4294967295
 80087f2:	81a3      	strh	r3, [r4, #12]
 80087f4:	e034      	b.n	8008860 <__swsetup_r+0x9c>
 80087f6:	0758      	lsls	r0, r3, #29
 80087f8:	d512      	bpl.n	8008820 <__swsetup_r+0x5c>
 80087fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087fc:	b141      	cbz	r1, 8008810 <__swsetup_r+0x4c>
 80087fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008802:	4299      	cmp	r1, r3
 8008804:	d002      	beq.n	800880c <__swsetup_r+0x48>
 8008806:	4628      	mov	r0, r5
 8008808:	f7fe ff0e 	bl	8007628 <_free_r>
 800880c:	2300      	movs	r3, #0
 800880e:	6363      	str	r3, [r4, #52]	; 0x34
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008816:	81a3      	strh	r3, [r4, #12]
 8008818:	2300      	movs	r3, #0
 800881a:	6063      	str	r3, [r4, #4]
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	6023      	str	r3, [r4, #0]
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	f043 0308 	orr.w	r3, r3, #8
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	b94b      	cbnz	r3, 8008840 <__swsetup_r+0x7c>
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008836:	d003      	beq.n	8008840 <__swsetup_r+0x7c>
 8008838:	4621      	mov	r1, r4
 800883a:	4628      	mov	r0, r5
 800883c:	f000 f883 	bl	8008946 <__smakebuf_r>
 8008840:	89a0      	ldrh	r0, [r4, #12]
 8008842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008846:	f010 0301 	ands.w	r3, r0, #1
 800884a:	d00a      	beq.n	8008862 <__swsetup_r+0x9e>
 800884c:	2300      	movs	r3, #0
 800884e:	60a3      	str	r3, [r4, #8]
 8008850:	6963      	ldr	r3, [r4, #20]
 8008852:	425b      	negs	r3, r3
 8008854:	61a3      	str	r3, [r4, #24]
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	b943      	cbnz	r3, 800886c <__swsetup_r+0xa8>
 800885a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800885e:	d1c4      	bne.n	80087ea <__swsetup_r+0x26>
 8008860:	bd38      	pop	{r3, r4, r5, pc}
 8008862:	0781      	lsls	r1, r0, #30
 8008864:	bf58      	it	pl
 8008866:	6963      	ldrpl	r3, [r4, #20]
 8008868:	60a3      	str	r3, [r4, #8]
 800886a:	e7f4      	b.n	8008856 <__swsetup_r+0x92>
 800886c:	2000      	movs	r0, #0
 800886e:	e7f7      	b.n	8008860 <__swsetup_r+0x9c>
 8008870:	2000006c 	.word	0x2000006c

08008874 <_raise_r>:
 8008874:	291f      	cmp	r1, #31
 8008876:	b538      	push	{r3, r4, r5, lr}
 8008878:	4604      	mov	r4, r0
 800887a:	460d      	mov	r5, r1
 800887c:	d904      	bls.n	8008888 <_raise_r+0x14>
 800887e:	2316      	movs	r3, #22
 8008880:	6003      	str	r3, [r0, #0]
 8008882:	f04f 30ff 	mov.w	r0, #4294967295
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800888a:	b112      	cbz	r2, 8008892 <_raise_r+0x1e>
 800888c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008890:	b94b      	cbnz	r3, 80088a6 <_raise_r+0x32>
 8008892:	4620      	mov	r0, r4
 8008894:	f000 f830 	bl	80088f8 <_getpid_r>
 8008898:	462a      	mov	r2, r5
 800889a:	4601      	mov	r1, r0
 800889c:	4620      	mov	r0, r4
 800889e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088a2:	f000 b817 	b.w	80088d4 <_kill_r>
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d00a      	beq.n	80088c0 <_raise_r+0x4c>
 80088aa:	1c59      	adds	r1, r3, #1
 80088ac:	d103      	bne.n	80088b6 <_raise_r+0x42>
 80088ae:	2316      	movs	r3, #22
 80088b0:	6003      	str	r3, [r0, #0]
 80088b2:	2001      	movs	r0, #1
 80088b4:	e7e7      	b.n	8008886 <_raise_r+0x12>
 80088b6:	2400      	movs	r4, #0
 80088b8:	4628      	mov	r0, r5
 80088ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088be:	4798      	blx	r3
 80088c0:	2000      	movs	r0, #0
 80088c2:	e7e0      	b.n	8008886 <_raise_r+0x12>

080088c4 <raise>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <raise+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f7ff bfd3 	b.w	8008874 <_raise_r>
 80088ce:	bf00      	nop
 80088d0:	2000006c 	.word	0x2000006c

080088d4 <_kill_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	2300      	movs	r3, #0
 80088d8:	4d06      	ldr	r5, [pc, #24]	; (80088f4 <_kill_r+0x20>)
 80088da:	4604      	mov	r4, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	4611      	mov	r1, r2
 80088e0:	602b      	str	r3, [r5, #0]
 80088e2:	f7f9 fe62 	bl	80025aa <_kill>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	d102      	bne.n	80088f0 <_kill_r+0x1c>
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	b103      	cbz	r3, 80088f0 <_kill_r+0x1c>
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	bd38      	pop	{r3, r4, r5, pc}
 80088f2:	bf00      	nop
 80088f4:	20000540 	.word	0x20000540

080088f8 <_getpid_r>:
 80088f8:	f7f9 be50 	b.w	800259c <_getpid>

080088fc <__swhatbuf_r>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	460c      	mov	r4, r1
 8008900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008904:	4615      	mov	r5, r2
 8008906:	2900      	cmp	r1, #0
 8008908:	461e      	mov	r6, r3
 800890a:	b096      	sub	sp, #88	; 0x58
 800890c:	da0c      	bge.n	8008928 <__swhatbuf_r+0x2c>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	2100      	movs	r1, #0
 8008912:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008916:	bf0c      	ite	eq
 8008918:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800891c:	2340      	movne	r3, #64	; 0x40
 800891e:	2000      	movs	r0, #0
 8008920:	6031      	str	r1, [r6, #0]
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	b016      	add	sp, #88	; 0x58
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	466a      	mov	r2, sp
 800892a:	f000 f849 	bl	80089c0 <_fstat_r>
 800892e:	2800      	cmp	r0, #0
 8008930:	dbed      	blt.n	800890e <__swhatbuf_r+0x12>
 8008932:	9901      	ldr	r1, [sp, #4]
 8008934:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008938:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800893c:	4259      	negs	r1, r3
 800893e:	4159      	adcs	r1, r3
 8008940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008944:	e7eb      	b.n	800891e <__swhatbuf_r+0x22>

08008946 <__smakebuf_r>:
 8008946:	898b      	ldrh	r3, [r1, #12]
 8008948:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800894a:	079d      	lsls	r5, r3, #30
 800894c:	4606      	mov	r6, r0
 800894e:	460c      	mov	r4, r1
 8008950:	d507      	bpl.n	8008962 <__smakebuf_r+0x1c>
 8008952:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	2301      	movs	r3, #1
 800895c:	6163      	str	r3, [r4, #20]
 800895e:	b002      	add	sp, #8
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	466a      	mov	r2, sp
 8008964:	ab01      	add	r3, sp, #4
 8008966:	f7ff ffc9 	bl	80088fc <__swhatbuf_r>
 800896a:	9900      	ldr	r1, [sp, #0]
 800896c:	4605      	mov	r5, r0
 800896e:	4630      	mov	r0, r6
 8008970:	f7fe feca 	bl	8007708 <_malloc_r>
 8008974:	b948      	cbnz	r0, 800898a <__smakebuf_r+0x44>
 8008976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897a:	059a      	lsls	r2, r3, #22
 800897c:	d4ef      	bmi.n	800895e <__smakebuf_r+0x18>
 800897e:	f023 0303 	bic.w	r3, r3, #3
 8008982:	f043 0302 	orr.w	r3, r3, #2
 8008986:	81a3      	strh	r3, [r4, #12]
 8008988:	e7e3      	b.n	8008952 <__smakebuf_r+0xc>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	6020      	str	r0, [r4, #0]
 800898e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008992:	81a3      	strh	r3, [r4, #12]
 8008994:	9b00      	ldr	r3, [sp, #0]
 8008996:	6120      	str	r0, [r4, #16]
 8008998:	6163      	str	r3, [r4, #20]
 800899a:	9b01      	ldr	r3, [sp, #4]
 800899c:	b15b      	cbz	r3, 80089b6 <__smakebuf_r+0x70>
 800899e:	4630      	mov	r0, r6
 80089a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089a4:	f000 f81e 	bl	80089e4 <_isatty_r>
 80089a8:	b128      	cbz	r0, 80089b6 <__smakebuf_r+0x70>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	f023 0303 	bic.w	r3, r3, #3
 80089b0:	f043 0301 	orr.w	r3, r3, #1
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	431d      	orrs	r5, r3
 80089ba:	81a5      	strh	r5, [r4, #12]
 80089bc:	e7cf      	b.n	800895e <__smakebuf_r+0x18>
	...

080089c0 <_fstat_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	2300      	movs	r3, #0
 80089c4:	4d06      	ldr	r5, [pc, #24]	; (80089e0 <_fstat_r+0x20>)
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	4611      	mov	r1, r2
 80089cc:	602b      	str	r3, [r5, #0]
 80089ce:	f7f9 fe4a 	bl	8002666 <_fstat>
 80089d2:	1c43      	adds	r3, r0, #1
 80089d4:	d102      	bne.n	80089dc <_fstat_r+0x1c>
 80089d6:	682b      	ldr	r3, [r5, #0]
 80089d8:	b103      	cbz	r3, 80089dc <_fstat_r+0x1c>
 80089da:	6023      	str	r3, [r4, #0]
 80089dc:	bd38      	pop	{r3, r4, r5, pc}
 80089de:	bf00      	nop
 80089e0:	20000540 	.word	0x20000540

080089e4 <_isatty_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	2300      	movs	r3, #0
 80089e8:	4d05      	ldr	r5, [pc, #20]	; (8008a00 <_isatty_r+0x1c>)
 80089ea:	4604      	mov	r4, r0
 80089ec:	4608      	mov	r0, r1
 80089ee:	602b      	str	r3, [r5, #0]
 80089f0:	f7f9 fe48 	bl	8002684 <_isatty>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d102      	bne.n	80089fe <_isatty_r+0x1a>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	b103      	cbz	r3, 80089fe <_isatty_r+0x1a>
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	20000540 	.word	0x20000540

08008a04 <_init>:
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	bf00      	nop
 8008a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0a:	bc08      	pop	{r3}
 8008a0c:	469e      	mov	lr, r3
 8008a0e:	4770      	bx	lr

08008a10 <_fini>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	bf00      	nop
 8008a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a16:	bc08      	pop	{r3}
 8008a18:	469e      	mov	lr, r3
 8008a1a:	4770      	bx	lr
